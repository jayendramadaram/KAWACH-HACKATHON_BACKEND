var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.12,1,2.175]],["body/controllers/AppController.html",[0,1.758,1,3.413,2,1.743,3,0.335,4,0.335,5,0.248,6,3.455,7,2.701,8,0.029,9,0.96,10,5.193,11,2.586,12,5.193,13,3.82,14,4.188,15,3.413,16,5.193,17,0.528,18,1.758,19,5.981,20,1.615,21,0.821,22,4.109,23,1.201,24,3.413,25,0.335,26,0.696,27,0.335,28,0.017,29,1.498,30,4.109,31,4.109,32,4.109,33,4.109,34,4.109,35,1.886,36,4.109,37,4.109,38,4.109,39,0.022,40,0.022]],["title/modules/AppModule.html",[41,1.041,42,2.175]],["body/modules/AppModule.html",[1,2.807,2,1.513,3,0.194,4,0.194,5,0.257,8,0.029,9,0.558,11,1.776,14,3.486,15,3.333,18,0.808,21,0.477,23,0.698,25,0.508,26,0.404,27,0.194,28,0.01,35,1.096,39,0.015,40,0.015,41,1.122,42,4.181,43,1.013,44,1.402,45,2.007,46,2.007,47,2.007,48,3.164,49,3.164,50,2.886,51,3.164,52,3.164,53,3.164,54,2.09,55,1.776,56,1.189,57,2.388,58,3.567,59,2.999,60,1.96,61,3.567,62,4.472,63,3.567,64,5.071,65,4.271,66,3.59,67,2.999,68,2.999,69,3.567,70,3.567,71,1.935,72,2.999,73,2.007,74,3.567,75,4.738,76,2.388,77,3.567,78,2.345,79,0.87,80,0.87,81,0.554,82,0.751,83,2.388,84,2.007,85,3.567,86,3.567,87,3.567,88,1.189,89,2.388,90,2.345,91,2.388,92,2.388,93,2.388,94,2.388,95,3.567,96,2.345,97,1.569,98,2.345,99,3.142,100,1.189,101,2.388,102,2.388,103,2.388,104,2.007,105,2.007,106,2.388,107,2.388,108,2.388,109,2.388,110,1.189,111,2.388,112,1.756,113,2.388,114,2.007,115,2.007,116,2.999,117,3.567,118,2.388,119,2.388,120,2.388,121,2.388,122,2.388,123,2.388,124,2.007,125,2.388,126,3.567,127,2.121,128,2.388,129,0.87,130,2.388,131,2.007,132,2.388,133,2.388,134,1.756,135,2.388,136,2.007,137,2.388,138,1.756,139,2.388,140,2.388]],["title/injectables/AppService.html",[53,1.968,141,0.773]],["body/injectables/AppService.html",[3,0.405,4,0.405,5,0.3,8,0.028,25,0.405,26,0.843,27,0.405,28,0.021,39,0.025,40,0.025,53,3.47,141,1.363,142,2.11,143,4.183]],["title/controllers/AuthController.html",[0,1.12,144,2.175]],["body/controllers/AuthController.html",[0,1.454,2,1.022,3,0.196,4,0.196,5,0.145,7,2.822,8,0.029,9,0.563,11,1.788,13,2.642,17,0.31,18,1.216,20,2,21,1.017,23,1.697,25,0.35,26,0.408,27,0.196,28,0.01,29,1.856,39,0.015,40,0.015,78,2.361,79,1.856,80,1.856,81,0.917,82,1.601,144,2.361,145,2.025,146,3.159,147,3.019,148,3.019,149,3.61,150,3.592,151,3.019,152,2.37,153,2.642,154,2.642,155,4.759,156,3.592,157,3.592,158,5.09,159,4.294,160,3.592,161,3.592,162,3.019,163,2.409,164,2.016,165,3.592,166,2.409,167,2.988,168,3.083,169,2.409,170,2.159,171,3.592,172,2.409,173,2.409,174,1.856,175,3.592,176,2.409,177,2.409,178,1.924,179,3.592,180,2.409,181,3.592,182,4.487,183,2.409,184,2.409,185,1.611,186,3.592,187,2.409,188,2.553,189,1.433,190,1.106,191,2.33,192,2.025,193,2.409,194,1.106,195,2.534,196,2.409,197,2.409,198,2.409,199,2.409,200,2.409,201,2.409,202,2.409,203,2.409,204,2.409,205,2.409,206,2.409,207,2.409]],["title/classes/AuthLogin.html",[28,0.014,170,1.404]],["body/classes/AuthLogin.html",[3,0.298,4,0.298,5,0.221,8,0.029,17,0.471,20,1.895,21,0.964,25,0.298,27,0.485,28,0.025,39,0.02,40,0.02,81,0.748,129,2.088,164,2.228,170,2.287,174,1.336,178,2.229,185,1.241,208,1.555,209,1.988,210,1.517,211,2.409,212,3.665,213,2.696,214,3.665,215,2.179,216,2.179,217,2.731,218,3.407,219,2.179,220,2.731,221,1.555,222,3.206,223,1.336,224,1.336,225,1.825,226,2.925,227,1.44,228,1.153,229,1.555,230,2.179,231,2.179,232,1.988,233,1.825,234,1.988]],["title/modules/AuthModule.html",[41,1.041,48,1.968]],["body/modules/AuthModule.html",[2,2.386,3,0.285,4,0.285,5,0.211,8,0.029,9,0.818,25,0.502,26,0.593,27,0.285,28,0.014,35,1.606,39,0.02,40,0.02,41,1.968,43,2.235,44,1.838,48,3.807,50,3.273,55,2.329,56,1.743,71,2.859,72,3.933,144,3.463,151,2.942,154,2.575,191,3.273,192,2.942,235,2.942,236,3.5,237,2.942,238,3.663,239,3.5,240,4.678,241,3.933,242,4.678,243,3.442,244,4.678,245,4.678,246,3.5,247,3.5,248,2.942,249,3.5,250,2.942,251,2.942,252,3.5,253,3.5,254,3.5,255,2.575]],["title/interfaces/AuthRequest.html",[256,1.207,257,1.648]],["body/interfaces/AuthRequest.html",[0,0.876,3,0.211,4,0.211,5,0.156,8,0.029,9,0.605,17,0.333,23,1.44,25,0.427,26,0.438,27,0.211,28,0.011,29,1.912,39,0.016,40,0.016,60,1.738,78,2.489,81,0.878,127,1.539,167,2.817,168,2.055,185,1.282,189,1.539,190,1.188,194,1.188,195,2.454,210,1.191,223,1.381,228,1.55,256,0.944,257,2.727,258,1.701,259,1.904,260,2.786,261,3.184,262,3.184,263,3.257,264,2.489,265,2.786,266,4.268,267,3.625,268,2.786,269,2.786,270,2.261,271,2.261,272,1.886,273,2.786,274,1.886,275,1.886,276,2.489,277,3.184,278,3.184,279,2.786,280,2.489,281,3.184,282,3.184,283,3.184,284,2.489,285,2.43,286,2.323,287,3.365,288,1.701,289,1.701,290,1.404,291,2.23,292,1.904,293,1.289,294,2.23,295,2.23,296,1.738,297,1.289,298,1.904,299,1.701,300,1.701,301,1.701,302,1.701,303,2.176,304,1.539,305,2.176,306,2.176,307,3.184,308,3.184,309,2.176,310,2.176,311,2.176,312,2.176,313,2.176,314,2.176,315,2.176,316,3.184,317,2.489,318,2.176,319,2.176,320,2.176,321,2.176,322,2.176,323,2.176,324,1.904,325,1.904]],["title/interfaces/AuthRequest-1.html",[134,2.038,256,1.01,257,1.379]],["body/interfaces/AuthRequest-1.html",[0,1.692,3,0.257,4,0.257,5,0.19,8,0.029,9,0.737,11,1.572,17,0.406,23,1.275,24,3.285,25,0.461,26,0.535,27,0.257,28,0.013,29,1.59,39,0.019,40,0.019,60,2.473,81,0.878,82,0.993,129,1.59,152,2.172,153,3.209,167,2.488,174,1.151,189,1.878,190,1.449,194,1.449,195,2.488,210,1.372,223,1.59,227,2.118,228,1.779,256,1.151,257,2.488,258,2.075,274,1.572,280,2.867,286,2.712,287,3.633,288,2.075,289,2.075,290,1.713,299,2.075,300,2.075,301,2.075,302,2.075,317,2.867,326,2.323,327,3.667,328,3.667,329,3.667,330,3.667,331,3.209,332,2.488,333,2.323,334,2.075,335,2.654,336,1.878,337,2.594,338,2.654,339,2.654,340,2.654,341,2.654,342,2.654,343,2.654,344,3.209,345,2.654,346,2.654,347,2.654,348,2.654]],["title/injectables/AuthService.html",[141,0.773,191,1.796]],["body/injectables/AuthService.html",[0,0.814,3,0.118,4,0.118,5,0.087,8,0.029,9,0.339,17,0.186,18,0.814,21,0.857,23,1.328,24,1.581,25,0.425,26,0.246,27,0.118,28,0.006,29,1.45,39,0.01,40,0.01,54,1.686,60,0.665,79,1.564,80,1.564,81,0.666,82,1.349,88,0.722,96,2.615,97,0.953,98,2.82,99,1.77,100,1.786,110,1.786,112,1.77,116,2.022,127,0.862,129,1.657,141,0.562,142,0.615,146,1.77,152,2.828,164,1.564,167,1.535,168,2.76,170,1.522,174,1.308,178,1.452,182,1.219,185,1.452,188,3.335,190,0.665,191,1.305,224,1.124,226,0.787,229,0.615,232,2.465,233,1.198,243,1.77,248,1.219,284,1.581,286,2.379,337,0.862,349,1.219,350,2.405,351,2.405,352,2.405,353,2.022,354,1.581,355,2.366,356,2.405,357,2.405,358,2.405,359,3.978,360,4.29,361,4.29,362,3.587,363,2.405,364,2.405,365,3.042,366,2.405,367,2.405,368,2.405,369,2.405,370,2.405,371,1.067,372,3.083,373,3.083,374,1.45,375,1.77,376,2.405,377,1.45,378,2.405,379,3.016,380,2.022,381,2.405,382,2.405,383,2.405,384,2.405,385,2.405,386,1.45,387,2.405,388,2.405,389,2.405,390,2.405,391,1.45,392,2.405,393,2.405,394,2.927,395,2.405,396,1.45,397,1.77,398,2.405,399,2.022,400,2.405,401,3.016,402,2.405,403,2.022,404,2.405,405,2.405,406,2.405,407,1.198,408,2.405,409,1.45,410,2.405,411,2.405,412,2.405,413,1.45,414,1.219,415,1.45,416,1.219,417,0.953,418,1.45,419,1.45,420,1.45,421,1.45,422,1.45,423,1.45,424,1.45,425,1.45,426,1.45,427,1.45,428,1.219,429,1.45,430,2.366,431,1.45,432,2.999,433,3.082,434,1.45,435,1.067,436,1.45,437,1.581,438,1.45,439,1.45,440,3.083,441,1.45,442,1.45,443,1.45,444,2.405,445,1.45,446,4.756,447,3.126,448,3.587,449,1.219,450,1.45,451,1.45,452,1.45,453,3.083,454,3.083,455,2.405,456,1.45,457,1.45,458,1.219,459,1.45,460,1.45,461,1.45,462,2.405,463,1.45,464,1.45,465,1.45,466,1.45,467,1.45,468,1.45,469,3.083,470,1.45,471,1.45,472,1.45,473,1.219,474,1.45,475,1.067,476,1.219,477,1.45,478,1.45,479,1.45,480,1.45,481,1.219,482,1.45,483,2.405,484,1.45,485,1.45,486,1.45]],["title/classes/AuthSignup.html",[28,0.014,174,1.207]],["body/classes/AuthSignup.html",[3,0.283,4,0.283,5,0.209,8,0.029,17,0.447,20,2.062,21,1.12,25,0.283,27,0.476,28,0.025,39,0.02,40,0.02,81,0.814,129,2.044,164,2.194,170,2.48,174,1.696,178,2.224,185,1.176,208,1.473,209,1.884,210,1.464,211,3.059,213,2.555,215,2.065,216,2.065,217,2.683,218,3.334,219,2.065,220,2.683,221,1.473,222,3.121,223,1.696,224,1.913,225,1.729,226,3.172,227,1.364,228,1.092,229,1.473,230,2.065,231,2.065,232,1.884,233,1.729,234,1.884,487,3.473,488,3.473,489,4.654,490,3.473,491,3.473]],["title/controllers/CoreController.html",[0,1.12,304,1.968]],["body/controllers/CoreController.html",[0,0.875,2,1.096,3,0.21,4,0.21,5,0.156,7,1.698,8,0.029,17,0.332,18,1.28,20,1.486,21,0.756,23,1.531,25,0.427,26,0.438,27,0.21,28,0.011,29,1.91,39,0.016,40,0.016,60,1.185,78,1.698,79,1.379,80,1.379,81,0.9,82,1.189,127,1.536,167,3.034,168,2.671,185,0.875,189,1.536,190,1.185,194,1.185,195,2.451,223,0.942,228,1.189,256,0.942,257,2.945,259,1.901,260,2.782,261,2.172,262,2.172,263,2.66,264,1.698,265,1.901,266,3.622,267,2.782,268,1.901,269,1.901,270,1.735,271,1.735,272,1.286,273,1.901,274,1.286,275,1.286,276,1.698,277,2.172,278,2.172,279,1.901,280,1.698,281,2.172,282,2.172,283,2.172,284,1.698,285,2.052,286,1.897,287,3.518,288,1.698,289,1.698,290,1.402,291,2.227,292,1.901,293,1.286,294,2.609,295,2.609,296,1.735,297,1.286,298,1.901,299,1.698,300,1.698,301,1.698,302,1.698,303,2.172,304,2.249,305,3.179,306,3.76,307,3.179,308,3.179,309,2.172,310,2.172,311,2.172,312,3.179,313,3.76,314,2.172,315,2.172,316,3.179,317,2.486,318,2.172,319,2.172,320,2.172,321,2.172,322,2.172,323,2.172,324,1.901,325,1.901,492,2.584,493,2.584,494,2.584,495,2.584]],["title/modules/CoreModule.html",[41,1.041,49,1.968]],["body/modules/CoreModule.html",[2,2.076,3,0.305,4,0.305,5,0.226,8,0.028,9,0.875,25,0.444,26,0.635,27,0.305,28,0.015,35,1.72,39,0.021,40,0.021,41,1.818,43,1.59,44,1.923,49,3.656,55,2.437,56,1.866,71,2.656,147,4.115,185,1.657,263,3.436,265,3.601,266,4.523,267,3.601,268,3.601,269,3.601,270,2.246,271,2.246,272,2.437,273,3.601,274,2.437,275,2.437,276,3.217,291,3.061,292,2.757,304,3.241,496,3.151,497,3.151,498,3.748,499,4.895,500,4.895,501,4.895,502,4.895,503,3.748]],["title/injectables/CoreService.html",[141,0.773,291,1.648]],["body/injectables/CoreService.html",[3,0.104,4,0.104,5,0.077,8,0.029,17,0.164,18,0.731,21,0.803,23,1.174,25,0.327,26,0.216,27,0.104,28,0.005,29,1.821,39,0.009,40,0.009,54,1.299,79,1.465,80,1.465,81,0.983,82,1.264,88,0.635,110,1.647,127,1.966,134,2.956,141,0.504,142,0.541,164,1.71,168,2.443,178,1.98,190,0.585,194,0.585,195,0.635,224,0.465,228,1.347,229,2.26,263,2.389,264,2.432,271,1.289,275,2.001,285,2.939,286,1.704,291,1.075,293,0.635,296,0.991,297,2.132,298,0.938,325,1.589,344,2.433,355,1.671,365,2.939,371,0.938,375,1.589,417,0.838,430,0.758,432,3.119,433,3.057,437,3.19,447,0.838,458,1.072,473,1.072,475,2.433,476,2.78,504,0.938,505,2.16,506,2.16,507,2.81,508,2.81,509,2.16,510,1.275,511,2.16,512,1.275,513,2.16,514,1.275,515,1.275,516,1.275,517,1.275,518,1.275,519,0.938,520,2.16,521,4.018,522,2.81,523,1.275,524,2.16,525,2.16,526,2.16,527,2.16,528,2.16,529,2.81,530,0.938,531,1.275,532,4.018,533,2.81,534,4.502,535,1.275,536,1.275,537,1.275,538,2.81,539,3.947,540,2.81,541,2.81,542,3.307,543,2.16,544,2.16,545,3.307,546,2.16,547,2.16,548,4.018,549,4.018,550,4.018,551,3.307,552,3.307,553,3.307,554,2.16,555,2.16,556,2.16,557,3.307,558,3.307,559,1.275,560,1.275,561,1.072,562,1.275,563,1.275,564,0.938,565,1.275,566,1.275,567,2.16,568,1.275,569,1.275,570,2.16,571,1.275,572,1.275,573,1.275,574,1.275,575,1.275,576,1.275,577,1.072,578,1.275,579,1.275,580,1.275,581,2.16,582,3.307,583,2.16,584,2.16]],["title/classes/EditUser.html",[28,0.014,227,1.3]],["body/classes/EditUser.html",[3,0.29,4,0.29,5,0.215,8,0.029,17,0.459,20,2.09,21,1.063,25,0.29,27,0.48,28,0.025,39,0.02,40,0.02,81,0.825,129,2.066,164,2.211,170,2.009,174,1.3,178,2.232,185,1.207,208,1.513,209,1.935,210,1.49,215,2.121,216,2.121,217,2.707,218,3.37,219,2.121,220,2.707,221,1.513,222,3.163,223,1.3,224,1.3,225,1.776,226,3.2,227,1.861,228,1.122,229,1.513,230,2.121,231,2.121,232,1.935,233,1.776,234,1.935,585,4.737,586,3.566,587,3.566,588,3.566,589,3.566]],["title/injectables/JwtStrategy.html",[141,0.773,238,1.968]],["body/injectables/JwtStrategy.html",[3,0.286,4,0.286,5,0.212,8,0.029,9,0.82,17,0.451,18,1.587,21,0.936,23,1.026,25,0.478,26,0.594,27,0.286,28,0.015,29,1.279,39,0.02,40,0.02,54,2.213,79,1.709,80,1.709,81,0.874,82,1.474,88,1.747,110,2.804,141,1.095,142,1.489,152,2.627,185,1.188,208,1.988,223,1.279,224,1.279,225,1.747,229,1.489,238,2.787,286,1.988,290,1.904,337,2.087,355,2.087,365,2.863,407,2.627,417,2.307,430,2.087,432,1.904,433,1.904,481,2.95,519,2.582,590,2.95,591,5.277,592,4.687,593,3.08,594,3.94,595,3.509,596,4.687,597,4.687,598,3.509,599,3.509,600,3.509,601,2.95,602,3.509,603,3.509,604,3.509,605,3.509,606,3.509,607,3.509,608,3.509,609,2.95,610,2.95]],["title/injectables/LogRequest.html",[90,2.175,141,0.773]],["body/injectables/LogRequest.html",[3,0.29,4,0.29,5,0.215,8,0.029,9,0.833,11,2.359,17,0.459,18,1.604,21,0.713,23,1.042,25,0.386,26,0.604,27,0.29,28,0.015,39,0.02,40,0.02,60,2.6,62,3.982,79,1.3,80,1.3,81,0.553,82,1.122,84,2.998,90,3.113,138,2.624,141,1.106,142,1.513,148,3.982,279,3.485,287,2.817,334,2.344,432,2.57,435,2.624,611,2.998,612,4.737,613,4.737,614,4.737,615,4.737,616,5.899,617,3.485,618,4.737,619,5.667,620,5.667,621,5.667,622,5.667,623,3.566,624,4.737,625,3.566,626,5.319,627,3.566,628,3.566,629,3.566,630,3.566,631,3.566,632,3.566,633,3.566]],["title/classes/MuttateDto.html",[28,0.014,294,1.648]],["body/classes/MuttateDto.html",[3,0.273,4,0.273,5,0.202,8,0.029,17,0.431,20,2.171,21,1.104,25,0.37,27,0.47,28,0.023,39,0.019,40,0.019,81,0.985,178,2.062,208,1.421,210,1.429,211,2.201,217,2.795,220,2.843,221,1.421,256,1.221,270,2.084,271,2.084,272,2.261,275,2.566,285,2.998,293,2.751,294,2.261,295,2.261,296,1.537,297,2.751,539,3.631,593,2.201,634,1.992,635,2.816,636,3.349,637,3.349,638,3.349,639,3.349,640,3.349,641,3.349,642,2.201,643,2.464,644,2.464,645,3.341,646,2.985,647,2.985,648,3.791,649,2.464,650,2.464,651,2.464,652,2.464]],["title/modules/OtpModule.html",[41,1.041,50,1.796]],["body/modules/OtpModule.html",[3,0.335,4,0.335,5,0.248,8,0.028,9,0.96,25,0.464,26,0.696,27,0.335,28,0.017,35,1.886,39,0.022,40,0.022,41,1.633,43,2.415,44,2.04,50,3.471,55,2.586,56,2.046,71,2.817,100,3.314,188,3.088,255,3.82,414,4.365,617,3.82,653,3.455,654,3.455,655,3.455,656,4.109,657,3.82,658,4.365,659,4.109,660,4.109]],["title/injectables/OtpService.html",[100,1.648,141,0.773]],["body/injectables/OtpService.html",[3,0.272,4,0.272,5,0.201,8,0.029,9,0.78,17,0.43,18,1.535,21,1.028,23,1.504,25,0.419,26,0.566,27,0.272,28,0.014,29,1.218,39,0.019,40,0.019,79,1.653,80,1.653,81,0.799,82,1.426,88,1.663,100,2.257,110,2.963,141,1.059,142,1.417,149,3.811,164,2.012,167,1.663,168,2.46,178,1.742,185,1.742,188,3.431,194,1.533,210,1.426,224,1.218,233,2.257,234,2.46,264,2.98,365,2.792,430,3.06,432,2.792,433,1.813,447,2.196,661,2.808,662,4.534,663,3.811,664,4.534,665,4.534,666,5.146,667,4.534,668,3.341,669,4.534,670,4.534,671,3.341,672,4.64,673,3.341,674,3.341,675,3.341,676,4.534,677,3.341,678,3.341,679,3.341,680,3.341,681,3.341,682,3.341,683,2.808,684,3.341,685,3.341,686,3.341]],["title/classes/Phnum.html",[28,0.014,164,1.207]],["body/classes/Phnum.html",[3,0.307,4,0.307,5,0.227,8,0.029,17,0.485,20,1.481,21,0.753,25,0.307,27,0.489,28,0.025,39,0.021,40,0.021,81,0.585,129,1.791,164,2.286,170,2.084,174,1.374,178,2.226,185,1.276,208,1.599,209,2.045,210,1.545,213,2.773,215,2.242,216,2.242,217,2.756,218,3.444,219,2.242,220,2.756,221,1.599,222,3.25,223,1.374,224,1.374,225,1.877,226,2.965,227,1.481,228,1.186,229,1.599,230,2.242,231,2.242,232,2.045,233,1.877,234,2.045,687,3.77]],["title/modules/PrismaModule.html",[41,1.041,51,1.968]],["body/modules/PrismaModule.html",[3,0.325,4,0.325,5,0.24,8,0.028,9,0.931,25,0.415,26,0.675,27,0.325,28,0.016,35,1.829,39,0.022,40,0.022,41,1.86,43,2.381,44,2.001,51,3.778,54,2.604,55,2.536,56,1.984,71,2.763,251,4.281,255,3.747,354,3.347,407,2.945,657,3.747,658,4.281,688,3.35,689,3.986,690,3.35,691,3.986,692,5.093,693,5.093,694,5.093,695,5.093,696,3.986]],["title/injectables/PrismaService.html",[54,1.3,141,0.773]],["body/injectables/PrismaService.html",[3,0.309,4,0.309,5,0.228,8,0.029,9,0.886,17,0.488,18,1.669,21,0.985,23,1.108,25,0.446,26,0.642,27,0.309,28,0.016,39,0.021,40,0.021,41,1.551,54,1.938,73,4.145,79,1.382,80,1.382,81,0.588,82,1.192,88,1.888,110,2.89,114,4.145,138,2.789,141,1.152,142,1.608,223,1.798,224,1.382,225,1.888,355,2.254,365,2.974,407,2.455,433,2.057,530,2.789,564,2.789,594,4.145,697,3.187,698,4.931,699,6.017,700,4.931,701,4.931,702,6.168,703,3.791,704,3.791,705,3.791,706,3.791,707,3.791,708,3.791]],["title/classes/QueryDto.html",[28,0.014,295,1.648]],["body/classes/QueryDto.html",[3,0.278,4,0.278,5,0.206,8,0.029,17,0.44,20,2.046,21,1.04,25,0.375,27,0.474,28,0.023,39,0.02,40,0.02,81,0.979,178,2.073,208,1.45,210,1.448,211,2.247,217,2.809,220,2.856,221,1.45,256,1.246,270,2.113,271,2.113,272,2.293,275,1.702,285,2.498,293,2.774,294,1.702,295,2.593,296,1.569,297,2.593,539,3.662,593,2.247,634,2.033,635,2.874,642,2.247,643,2.515,644,2.515,645,3.388,646,3.027,647,3.027,648,3.831,649,2.515,650,2.515,651,2.515,652,3.831,709,3.419,710,3.419,711,3.419,712,3.419,713,3.419]],["title/interfaces/QueryReturn.html",[256,1.207,296,1.519]],["body/interfaces/QueryReturn.html",[3,0.29,4,0.29,5,0.215,8,0.029,17,0.459,25,0.386,27,0.48,28,0.023,39,0.02,40,0.02,81,0.987,82,1.49,178,2.095,210,1.49,217,2.839,220,2.884,221,1.513,256,1.3,258,2.344,270,2.174,271,2.174,272,2.359,275,1.776,285,3.2,293,2.648,294,1.776,295,2.359,296,2.174,297,2.937,539,3.113,593,2.344,634,2.121,642,2.344,643,2.624,644,2.624,645,3.485,646,3.113,647,3.113,648,3.913,649,2.624,650,2.624,651,2.624,652,2.624]],["title/controllers/UserController.html",[0,1.12,336,1.968]],["body/controllers/UserController.html",[0,1.39,2,1.228,3,0.236,4,0.236,5,0.174,7,1.903,8,0.029,11,1.441,17,0.372,18,1.39,20,1.613,21,0.82,23,1.516,24,3.601,25,0.446,26,0.49,27,0.236,28,0.012,29,1.496,39,0.017,40,0.017,60,2.514,79,1.496,80,1.496,81,0.883,82,1.632,129,1.055,152,2.374,153,3.817,167,2.044,174,1.055,189,1.721,190,1.328,194,1.328,195,2.374,223,1.055,227,2.236,228,1.5,256,1.055,257,2.584,274,2.044,280,2.698,286,2.671,287,3.709,288,1.903,289,1.903,290,1.571,299,1.903,300,1.903,301,1.903,302,1.903,317,2.698,326,2.13,327,2.433,328,2.433,329,2.433,330,2.433,331,2.13,332,2.374,333,2.13,334,1.903,335,2.433,336,2.441,337,2.836,338,3.45,339,2.433,340,3.45,341,3.45,342,3.45,343,3.45,344,3.508,345,2.433,346,3.45,347,2.433,348,2.433,714,4.105,715,4.105,716,2.895,717,2.895,718,2.895,719,2.895]],["title/classes/UserDTO.html",[28,0.014,228,1.041]],["body/classes/UserDTO.html",[3,0.281,4,0.281,5,0.208,8,0.029,17,0.444,21,1.201,25,0.281,27,0.475,28,0.025,39,0.02,40,0.02,81,0.932,129,1.691,164,2.04,170,1.967,174,1.259,178,2.232,185,1.57,208,1.465,209,1.874,210,1.459,215,2.054,216,2.054,217,2.678,218,3.327,219,2.054,220,2.678,221,1.465,222,3.113,223,1.259,224,1.259,225,1.72,226,3.167,227,1.357,228,1.459,229,2.22,230,3.113,231,3.113,232,2.84,233,2.606,234,2.516,720,3.454,721,3.454,722,3.454,723,3.454,724,3.454,725,3.454]],["title/modules/UserModule.html",[41,1.041,52,1.968]],["body/modules/UserModule.html",[2,2.216,3,0.338,4,0.338,5,0.25,8,0.029,9,0.969,25,0.466,26,0.703,27,0.338,28,0.017,35,1.903,39,0.022,40,0.022,41,1.888,43,1.759,44,2.053,52,3.755,55,2.601,56,2.065,71,2.834,129,1.904,286,2.216,331,3.843,332,3.144,333,3.052,336,3.4,353,4.391,379,4.391,726,3.487,727,3.487,728,4.148,729,4.391,730,4.148]],["title/injectables/UserService.html",[141,0.773,332,1.648]],["body/injectables/UserService.html",[3,0.246,4,0.246,5,0.182,8,0.029,9,0.705,17,0.388,18,1.432,21,0.845,23,1.236,25,0.453,26,0.512,27,0.246,28,0.012,29,1.542,39,0.018,40,0.018,54,2.078,60,1.386,79,1.542,80,1.542,81,0.82,82,1.33,88,1.504,110,2.633,129,1.542,141,0.988,142,1.281,190,1.386,194,1.386,195,2.106,224,1.101,227,2.327,228,1.751,229,1.794,274,1.504,284,2.78,286,2.639,332,2.633,337,1.796,354,1.985,355,2.902,365,2.648,371,2.222,375,3.111,394,2.222,397,2.222,401,4.103,407,1.504,416,2.539,417,1.985,430,1.796,432,2.648,433,2.648,437,2.78,475,3.111,519,2.222,609,4.103,610,4.445,657,3.111,731,2.539,732,4.229,733,4.229,734,3.02,735,4.229,736,5.288,737,3.02,738,3.02,739,3.02,740,2.539,741,3.02,742,4.229]],["title/coverage.html",[743,3.787]],["body/coverage.html",[0,1.867,1,2.19,5,0.201,6,2.801,8,0.029,15,2.19,28,0.025,39,0.019,40,0.019,53,1.982,54,1.309,81,0.517,90,2.19,100,1.659,141,1.446,143,2.801,144,2.19,145,2.801,164,1.215,170,1.414,174,1.215,191,1.808,209,3.128,227,1.309,228,1.048,238,1.982,256,1.874,257,2.254,259,3.33,291,1.659,294,1.659,295,1.659,296,1.529,304,1.982,326,3.33,332,1.659,336,1.982,349,2.801,447,2.19,504,2.452,577,5.382,590,2.801,611,2.801,634,3.056,661,2.801,697,2.801,731,2.801,743,2.801,744,3.332,745,3.332,746,5.14,747,4.526,748,4.526,749,3.332,750,3.332,751,5.514,752,5.514,753,4.526,754,5.765,755,5.514,756,3.332,757,3.332,758,3.332,759,3.332,760,3.332,761,2.801,762,3.332,763,2.801,764,3.332,765,3.332,766,3.332,767,3.332]],["title/dependencies.html",[44,1.563,768,2.038]],["body/dependencies.html",[8,0.029,26,0.648,28,0.02,39,0.021,40,0.021,44,1.503,96,3.259,97,3.617,98,3.259,99,3.648,104,3.215,105,3.215,152,2.469,221,1.622,243,2.813,290,2.075,334,2.513,394,2.813,407,1.904,530,2.813,601,4.626,642,2.513,672,3.215,769,3.824,770,3.824,771,5.823,772,3.824,773,3.824,774,3.824,775,4.959,776,3.824,777,3.824,778,3.824,779,3.824,780,4.959,781,3.824,782,4.959,783,3.824,784,3.824,785,3.824,786,3.824,787,3.824,788,3.824,789,3.824,790,3.824,791,3.824,792,3.824,793,3.824,794,3.824,795,3.824,796,3.824,797,3.824,798,3.824,799,3.824,800,3.824,801,3.824,802,3.824,803,3.824]],["title/miscellaneous/enumerations.html",[804,1.82,805,3.343]],["body/miscellaneous/enumerations.html",[8,0.028,17,0.608,39,0.024,40,0.024,270,2.597,271,2.597,272,2.818,293,2.818,297,2.818,634,2.811,646,3.72,647,3.72,804,3.107,805,3.973,806,5.66,807,6.42]],["title/miscellaneous/functions.html",[804,1.82,808,3.343]],["body/miscellaneous/functions.html",[8,0.025,17,0.66,39,0.025,40,0.025,761,4.312,763,5.27,804,3.372,808,4.312,809,5.13]],["title/index.html",[17,0.356,810,2.77,811,2.77]],["body/index.html",[5,0.164,8,0.024,11,1.355,13,2.002,14,3.39,15,2.582,39,0.017,40,0.017,44,1.07,59,2.288,66,3.874,67,2.288,68,2.288,96,1.789,97,1.789,98,1.789,112,2.002,115,2.288,124,2.288,131,2.288,136,2.288,146,2.002,152,1.355,154,2.002,162,2.288,188,1.619,241,2.288,250,2.288,260,2.002,263,1.619,270,1.249,274,1.355,276,1.789,324,2.002,354,3.664,380,2.288,397,3.712,403,2.288,407,2.929,435,2.89,437,3.029,449,2.288,504,2.002,561,3.874,564,2.002,617,2.002,663,2.288,683,3.302,729,2.288,740,3.874,768,2.002,812,2.722,813,3.928,814,2.722,815,2.722,816,2.722,817,2.722,818,2.722,819,4.608,820,5.045,821,3.928,822,3.928,823,2.722,824,3.928,825,2.722,826,2.722,827,2.722,828,2.722,829,3.928,830,2.722,831,2.722,832,2.722,833,2.722,834,5.045,835,2.722,836,2.722,837,5.35,838,2.722,839,2.722,840,2.722,841,2.722,842,2.722,843,2.722,844,3.928,845,2.722,846,2.722,847,2.722,848,3.928,849,2.722,850,3.928,851,2.722,852,4.608,853,3.928,854,2.722,855,3.928,856,5.045,857,3.928,858,2.722,859,2.722,860,2.722,861,2.722,862,2.722,863,2.722,864,2.722,865,2.722,866,2.722,867,2.722,868,2.722,869,2.722,870,2.722,871,2.722,872,2.722,873,2.722,874,2.722,875,2.722,876,2.722,877,2.722,878,3.928,879,2.722,880,2.722,881,2.288,882,2.722,883,2.722,884,2.722,885,2.722,886,2.288,887,2.722,888,2.722,889,3.928,890,2.722,891,2.722,892,2.722,893,2.722,894,2.722,895,3.928,896,2.722,897,3.928,898,3.928,899,2.722,900,2.722,901,2.722,902,2.722,903,2.722,904,2.722,905,2.722,906,3.928,907,3.928,908,2.722,909,2.722,910,3.928,911,2.722,912,2.722,913,2.722,914,2.722,915,2.722,916,2.722,917,2.722,918,2.722,919,2.722,920,2.722,921,2.722,922,2.722,923,2.722,924,2.722,925,2.722,926,2.722,927,2.722,928,2.722,929,2.722,930,2.722,931,2.722]],["title/modules.html",[43,1.911]],["body/modules.html",[8,0.024,39,0.024,40,0.024,42,3.095,43,1.998,48,2.801,49,2.801,50,2.555,51,2.801,52,2.801,881,5.474,932,6.512,933,6.512,934,6.512]],["title/overview.html",[935,3.787]],["body/overview.html",[2,1.497,8,0.028,35,1.619,39,0.02,40,0.02,42,4.363,43,1.497,44,1.848,45,2.966,46,2.966,47,2.966,48,3.775,49,3.495,50,3.348,51,3.595,52,3.495,53,3.146,54,2.463,55,2.342,56,1.757,100,3.073,142,1.497,191,2.87,208,1.497,235,2.966,237,2.966,238,3.146,258,2.319,291,2.634,332,2.634,428,2.966,496,2.966,497,2.966,653,2.966,654,2.966,655,2.966,688,2.966,690,2.966,726,2.966,727,2.966,886,2.966,935,2.966,936,3.528,937,3.528,938,3.528]],["title/properties.html",[210,1.251,768,2.038]],["body/properties.html",[8,0.028,9,1.184,39,0.025,40,0.025,210,1.595,399,4.263,939,5.071,940,5.071,941,5.071,942,5.071]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthLogin.html":{},"modules/AuthModule.html":{},"interfaces/AuthRequest.html":{},"interfaces/AuthRequest-1.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"controllers/CoreController.html":{},"modules/CoreModule.html":{},"injectables/CoreService.html":{},"classes/EditUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"classes/MuttateDto.html":{},"modules/OtpModule.html":{},"injectables/OtpService.html":{},"classes/Phnum.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/QueryDto.html":{},"interfaces/QueryReturn.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":577,"title":{},"body":{"injectables/CoreService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":939,"title":{},"body":{"properties.html":{}}}],["0.05",{"_index":554,"title":{},"body":{"injectables/CoreService.html":{}}}],["0.1.13",{"_index":798,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":788,"title":{},"body":{"dependencies.html":{}}}],["0.29.1",{"_index":784,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":787,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":793,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":753,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":749,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":746,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":748,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":747,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":750,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":134,"title":{"interfaces/AuthRequest-1.html":{}},"body":{"modules/AppModule.html":{},"injectables/CoreService.html":{}}}],["1.0.0",{"_index":795,"title":{},"body":{"dependencies.html":{}}}],["1.0.34",{"_index":783,"title":{},"body":{"dependencies.html":{}}}],["1.8.1",{"_index":770,"title":{},"body":{"dependencies.html":{}}}],["1.ec2.cloud.redislabs.com",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["1/2",{"_index":752,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":755,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":765,"title":{},"body":{"coverage.html":{}}}],["1/7",{"_index":760,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":555,"title":{},"body":{"injectables/CoreService.html":{}}}],["1000000",{"_index":459,"title":{},"body":{"injectables/AuthService.html":{}}}],["1200",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["14",{"_index":759,"title":{},"body":{"coverage.html":{}}}],["15m",{"_index":388,"title":{},"body":{"injectables/AuthService.html":{}}}],["18258",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["18258.c305.ap",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["1d",{"_index":486,"title":{},"body":{"injectables/AuthService.html":{}}}],["2.0.0",{"_index":786,"title":{},"body":{"dependencies.html":{}}}],["2.0.1",{"_index":777,"title":{},"body":{"dependencies.html":{}}}],["2/6",{"_index":756,"title":{},"body":{"coverage.html":{}}}],["20min",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["25",{"_index":764,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":938,"title":{},"body":{"overview.html":{}}}],["3.0.1",{"_index":774,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":800,"title":{},"body":{"dependencies.html":{}}}],["3.0.6",{"_index":781,"title":{},"body":{"dependencies.html":{}}}],["33",{"_index":754,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":428,"title":{},"body":{"injectables/AuthService.html":{},"overview.html":{}}}],["4.0.0",{"_index":794,"title":{},"body":{"dependencies.html":{}}}],["4.1.0",{"_index":785,"title":{},"body":{"dependencies.html":{}}}],["4.3.1",{"_index":775,"title":{},"body":{"dependencies.html":{}}}],["4.7.7",{"_index":790,"title":{},"body":{"dependencies.html":{}}}],["4.8.0",{"_index":803,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":751,"title":{},"body":{"coverage.html":{}}}],["5434",{"_index":879,"title":{},"body":{"index.html":{}}}],["6",{"_index":886,"title":{},"body":{"index.html":{},"overview.html":{}}}],["6.4.6",{"_index":779,"title":{},"body":{"dependencies.html":{}}}],["6.7.8",{"_index":792,"title":{},"body":{"dependencies.html":{}}}],["6/7",{"_index":758,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":937,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":802,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":936,"title":{},"body":{"overview.html":{}}}],["85",{"_index":757,"title":{},"body":{"coverage.html":{}}}],["9.0.0",{"_index":771,"title":{},"body":{"dependencies.html":{}}}],["9._",{"_index":573,"title":{},"body":{"injectables/CoreService.html":{}}}],["91",{"_index":464,"title":{},"body":{"injectables/AuthService.html":{}}}],["9]\\d{9}\\b)|(\\b(?:[a",{"_index":572,"title":{},"body":{"injectables/CoreService.html":{}}}],["9]{25,34}\\b)|(\\b[6",{"_index":571,"title":{},"body":{"injectables/CoreService.html":{}}}],["according",{"_index":903,"title":{},"body":{"index.html":{}}}],["accountsid",{"_index":674,"title":{},"body":{"injectables/OtpService.html":{}}}],["actual",{"_index":300,"title":{},"body":{"interfaces/AuthRequest.html":{},"interfaces/AuthRequest-1.html":{},"controllers/CoreController.html":{},"controllers/UserController.html":{}}}],["addition",{"_index":563,"title":{},"body":{"injectables/CoreService.html":{}}}],["alias",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["already",{"_index":449,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["analysis",{"_index":615,"title":{},"body":{"injectables/LogRequest.html":{}}}],["api",{"_index":829,"title":{},"body":{"index.html":{}}}],["apl|abfspay|fbl|idfcbank|okaxis|okicici|axisbank|icici|yesbank|ibl|ybl))\\b)|(\\b(?:https?:\\/\\/|www\\.)\\s+\\b)/g",{"_index":574,"title":{},"body":{"injectables/CoreService.html":{}}}],["app",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["app/app.controller",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["app/app.service",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":244,"title":{},"body":{"modules/AuthModule.html":{}}}],["appmodule",{"_index":42,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":53,"title":{"injectables/AppService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["architecture",{"_index":931,"title":{},"body":{"index.html":{}}}],["argon",{"_index":416,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["argon.hash(body.password",{"_index":434,"title":{},"body":{"injectables/AuthService.html":{}}}],["argon.hash(user.password",{"_index":741,"title":{},"body":{"injectables/UserService.html":{}}}],["argon.verify(user.password",{"_index":456,"title":{},"body":{"injectables/AuthService.html":{}}}],["argon2",{"_index":394,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["array",{"_index":522,"title":{},"body":{"injectables/CoreService.html":{}}}],["aspect",{"_index":502,"title":{},"body":{"modules/CoreModule.html":{}}}],["async",{"_index":365,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CoreService.html":{},"injectables/JwtStrategy.html":{},"injectables/OtpService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{}}}],["auth",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"index.html":{}}}],["auth.controller",{"_index":246,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":144,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":289,"title":{},"body":{"interfaces/AuthRequest.html":{},"interfaces/AuthRequest-1.html":{},"controllers/CoreController.html":{},"controllers/UserController.html":{}}}],["authlogin",{"_index":170,"title":{"classes/AuthLogin.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthLogin.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"classes/Phnum.html":{},"classes/UserDTO.html":{},"coverage.html":{}}}],["authlogin:13",{"_index":491,"title":{},"body":{"classes/AuthSignup.html":{}}}],["authlogin:16",{"_index":490,"title":{},"body":{"classes/AuthSignup.html":{}}}],["authmodule",{"_index":48,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":942,"title":{},"body":{"properties.html":{}}}],["authrequest",{"_index":257,"title":{"interfaces/AuthRequest.html":{},"interfaces/AuthRequest-1.html":{}},"body":{"interfaces/AuthRequest.html":{},"interfaces/AuthRequest-1.html":{},"controllers/CoreController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["authservice",{"_index":191,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["authsignup",{"_index":174,"title":{"classes/AuthSignup.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthLogin.html":{},"interfaces/AuthRequest-1.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"classes/Phnum.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"coverage.html":{}}}],["authtoken",{"_index":676,"title":{},"body":{"injectables/OtpService.html":{}}}],["available",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["await",{"_index":433,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CoreService.html":{},"injectables/JwtStrategy.html":{},"injectables/OtpService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{}}}],["awesome",{"_index":871,"title":{},"body":{"index.html":{}}}],["b[13][a",{"_index":565,"title":{},"body":{"injectables/CoreService.html":{}}}],["backed",{"_index":501,"title":{},"body":{"modules/CoreModule.html":{}}}],["backend",{"_index":813,"title":{},"body":{"index.html":{}}}],["baseurl",{"_index":625,"title":{},"body":{"injectables/LogRequest.html":{}}}],["basicroute",{"_index":19,"title":{},"body":{"controllers/AppController.html":{}}}],["before",{"_index":267,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/CoreController.html":{},"modules/CoreModule.html":{}}}],["better",{"_index":398,"title":{},"body":{"injectables/AuthService.html":{}}}],["body",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/AuthRequest.html":{},"interfaces/AuthRequest-1.html":{},"injectables/AuthService.html":{},"controllers/CoreController.html":{},"injectables/OtpService.html":{},"controllers/UserController.html":{}}}],["body('otp",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{}}}],["body('phnum",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.context",{"_index":320,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/CoreController.html":{}}}],["body.item",{"_index":319,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/CoreController.html":{}}}],["body.phnum",{"_index":438,"title":{},"body":{"injectables/AuthService.html":{}}}],["body.report",{"_index":316,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/CoreController.html":{}}}],["body.smscontext",{"_index":311,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/CoreController.html":{}}}],["body.type",{"_index":307,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/CoreController.html":{}}}],["body.username",{"_index":439,"title":{},"body":{"injectables/AuthService.html":{}}}],["boolean",{"_index":234,"title":{},"body":{"classes/AuthLogin.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"injectables/OtpService.html":{},"classes/Phnum.html":{},"classes/UserDTO.html":{}}}],["bootstrap",{"_index":763,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["both",{"_index":262,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/CoreController.html":{}}}],["browse",{"_index":934,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":932,"title":{},"body":{"modules.html":{}}}],["cacha_manager",{"_index":363,"title":{},"body":{"injectables/AuthService.html":{}}}],["cache",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{},"index.html":{}}}],["cache_manager",{"_index":415,"title":{},"body":{"injectables/AuthService.html":{}}}],["cachemanager",{"_index":372,"title":{},"body":{"injectables/AuthService.html":{}}}],["cachemodule",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["cachemodule.register",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["cacheotp",{"_index":469,"title":{},"body":{"injectables/AuthService.html":{}}}],["calculate",{"_index":892,"title":{},"body":{"index.html":{}}}],["call",{"_index":266,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/CoreController.html":{},"modules/CoreModule.html":{}}}],["called",{"_index":278,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/CoreController.html":{}}}],["cant",{"_index":323,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/CoreController.html":{}}}],["care",{"_index":499,"title":{},"body":{"modules/CoreModule.html":{}}}],["cases",{"_index":405,"title":{},"body":{"injectables/AuthService.html":{}}}],["catch",{"_index":441,"title":{},"body":{"injectables/AuthService.html":{}}}],["centre",{"_index":866,"title":{},"body":{"index.html":{}}}],["change",{"_index":331,"title":{},"body":{"interfaces/AuthRequest-1.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["changes",{"_index":325,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/CoreController.html":{},"injectables/CoreService.html":{}}}],["checks",{"_index":527,"title":{},"body":{"injectables/CoreService.html":{}}}],["class",{"_index":28,"title":{"classes/AuthLogin.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"classes/MuttateDto.html":{},"classes/Phnum.html":{},"classes/QueryDto.html":{},"classes/UserDTO.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthLogin.html":{},"modules/AuthModule.html":{},"interfaces/AuthRequest.html":{},"interfaces/AuthRequest-1.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"controllers/CoreController.html":{},"modules/CoreModule.html":{},"injectables/CoreService.html":{},"classes/EditUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"classes/MuttateDto.html":{},"modules/OtpModule.html":{},"injectables/OtpService.html":{},"classes/Phnum.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/QueryDto.html":{},"interfaces/QueryReturn.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":208,"title":{},"body":{"classes/AuthLogin.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"injectables/JwtStrategy.html":{},"classes/MuttateDto.html":{},"classes/Phnum.html":{},"classes/QueryDto.html":{},"classes/UserDTO.html":{},"overview.html":{}}}],["click",{"_index":910,"title":{},"body":{"index.html":{}}}],["client",{"_index":700,"title":{},"body":{"injectables/PrismaService.html":{}}}],["clone",{"_index":900,"title":{},"body":{"index.html":{}}}],["close",{"_index":897,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":824,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":235,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":236,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":237,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_coremodule",{"_index":496,"title":{},"body":{"modules/CoreModule.html":{},"overview.html":{}}}],["cluster_coremodule_providers",{"_index":497,"title":{},"body":{"modules/CoreModule.html":{},"overview.html":{}}}],["cluster_otpmodule",{"_index":653,"title":{},"body":{"modules/OtpModule.html":{},"overview.html":{}}}],["cluster_otpmodule_exports",{"_index":654,"title":{},"body":{"modules/OtpModule.html":{},"overview.html":{}}}],["cluster_otpmodule_providers",{"_index":655,"title":{},"body":{"modules/OtpModule.html":{},"overview.html":{}}}],["cluster_prismamodule",{"_index":688,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_exports",{"_index":690,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_providers",{"_index":689,"title":{},"body":{"modules/PrismaModule.html":{}}}],["cluster_usermodule",{"_index":726,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":727,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["code",{"_index":920,"title":{},"body":{"index.html":{}}}],["coming",{"_index":268,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/CoreController.html":{},"modules/CoreModule.html":{}}}],["compose",{"_index":836,"title":{},"body":{"index.html":{}}}],["config",{"_index":355,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CoreService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{}}}],["config.get('database_url",{"_index":707,"title":{},"body":{"injectables/PrismaService.html":{}}}],["config.get('jwt_secret",{"_index":606,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configmodule",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/CoreService.html":{},"injectables/JwtStrategy.html":{},"injectables/OtpService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{}}}],["configservice.get('twilio_account_sid",{"_index":675,"title":{},"body":{"injectables/OtpService.html":{}}}],["configservice.get('twilio_auth_token",{"_index":677,"title":{},"body":{"injectables/OtpService.html":{}}}],["configure",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"injectables/PrismaService.html":{}}}],["configure(consumer",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["configuring",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["connect",{"_index":582,"title":{},"body":{"injectables/CoreService.html":{}}}],["connection",{"_index":693,"title":{},"body":{"modules/PrismaModule.html":{}}}],["console.log('here",{"_index":443,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(`\"${originalurl",{"_index":628,"title":{},"body":{"injectables/LogRequest.html":{}}}],["console.log(body.phnum",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log(phonenum",{"_index":457,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(res",{"_index":632,"title":{},"body":{"injectables/LogRequest.html":{}}}],["const",{"_index":432,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CoreService.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"injectables/OtpService.html":{},"injectables/UserService.html":{}}}],["constructor",{"_index":224,"title":{},"body":{"classes/AuthLogin.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"injectables/CoreService.html":{},"classes/EditUser.html":{},"injectables/JwtStrategy.html":{},"injectables/OtpService.html":{},"classes/Phnum.html":{},"injectables/PrismaService.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{}}}],["constructor(config",{"_index":594,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{}}}],["constructor(configservice",{"_index":668,"title":{},"body":{"injectables/OtpService.html":{}}}],["constructor(postgre",{"_index":371,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CoreService.html":{},"injectables/UserService.html":{}}}],["constructor(private",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/AuthRequest.html":{},"interfaces/AuthRequest-1.html":{},"controllers/CoreController.html":{},"injectables/CoreService.html":{},"injectables/OtpService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["construstor",{"_index":426,"title":{},"body":{"injectables/AuthService.html":{}}}],["consumer",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(logrequest).forroutes",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["context",{"_index":285,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/CoreController.html":{},"injectables/CoreService.html":{},"classes/MuttateDto.html":{},"classes/QueryDto.html":{},"interfaces/QueryReturn.html":{}}}],["context.match(regex",{"_index":575,"title":{},"body":{"injectables/CoreService.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CoreController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"interfaces/AuthRequest.html":{},"interfaces/AuthRequest-1.html":{},"injectables/AuthService.html":{},"controllers/CoreController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('core",{"_index":303,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/CoreController.html":{}}}],["controller('user",{"_index":335,"title":{},"body":{"interfaces/AuthRequest-1.html":{},"controllers/UserController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/CoreController.html":{},"modules/CoreModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["coonect",{"_index":701,"title":{},"body":{"injectables/PrismaService.html":{}}}],["cordination",{"_index":865,"title":{},"body":{"index.html":{}}}],["core",{"_index":260,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/CoreController.html":{},"index.html":{}}}],["core.controller",{"_index":503,"title":{},"body":{"modules/CoreModule.html":{}}}],["core.service",{"_index":292,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/CoreController.html":{},"modules/CoreModule.html":{}}}],["core/core.module",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["core/muttate",{"_index":273,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/CoreController.html":{},"modules/CoreModule.html":{}}}],["core/query",{"_index":265,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/CoreController.html":{},"modules/CoreModule.html":{}}}],["corecontroller",{"_index":304,"title":{"controllers/CoreController.html":{}},"body":{"interfaces/AuthRequest.html":{},"controllers/CoreController.html":{},"modules/CoreModule.html":{},"coverage.html":{}}}],["coremodule",{"_index":49,"title":{"modules/CoreModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules.html":{},"overview.html":{}}}],["coreservice",{"_index":291,"title":{"injectables/CoreService.html":{}},"body":{"interfaces/AuthRequest.html":{},"controllers/CoreController.html":{},"modules/CoreModule.html":{},"injectables/CoreService.html":{},"coverage.html":{},"overview.html":{}}}],["coverage",{"_index":743,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":902,"title":{},"body":{"index.html":{}}}],["created",{"_index":473,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CoreService.html":{}}}],["createdat",{"_index":230,"title":{},"body":{"classes/AuthLogin.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"classes/Phnum.html":{},"classes/UserDTO.html":{}}}],["createitem",{"_index":556,"title":{},"body":{"injectables/CoreService.html":{}}}],["creating",{"_index":403,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["crimeapp",{"_index":684,"title":{},"body":{"injectables/OtpService.html":{}}}],["crud",{"_index":733,"title":{},"body":{"injectables/UserService.html":{}}}],["current",{"_index":868,"title":{},"body":{"index.html":{}}}],["currently",{"_index":874,"title":{},"body":{"index.html":{}}}],["cyber",{"_index":863,"title":{},"body":{"index.html":{}}}],["data",{"_index":437,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CoreService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["database",{"_index":852,"title":{},"body":{"index.html":{}}}],["datasources",{"_index":705,"title":{},"body":{"injectables/PrismaService.html":{}}}],["db",{"_index":564,"title":{},"body":{"injectables/CoreService.html":{},"injectables/PrismaService.html":{},"index.html":{}}}],["dbs",{"_index":858,"title":{},"body":{"index.html":{}}}],["dbuser",{"_index":736,"title":{},"body":{"injectables/UserService.html":{}}}],["dbuser.id",{"_index":742,"title":{},"body":{"injectables/UserService.html":{}}}],["debugging",{"_index":614,"title":{},"body":{"injectables/LogRequest.html":{}}}],["decorators",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthLogin.html":{},"classes/AuthSignup.html":{},"controllers/CoreController.html":{},"classes/EditUser.html":{},"classes/MuttateDto.html":{},"classes/Phnum.html":{},"classes/QueryDto.html":{},"controllers/UserController.html":{}}}],["default",{"_index":10,"title":{},"body":{"controllers/AppController.html":{}}}],["define",{"_index":240,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthLogin.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"controllers/CoreController.html":{},"injectables/CoreService.html":{},"classes/EditUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"classes/MuttateDto.html":{},"injectables/OtpService.html":{},"classes/Phnum.html":{},"injectables/PrismaService.html":{},"classes/QueryDto.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":609,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["demand",{"_index":867,"title":{},"body":{"index.html":{}}}],["dependecies",{"_index":241,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["dependencies",{"_index":44,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CoreModule.html":{},"modules/OtpModule.html":{},"modules/PrismaModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["description",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthRequest.html":{},"interfaces/AuthRequest-1.html":{},"injectables/AuthService.html":{},"modules/CoreModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"modules/OtpModule.html":{},"injectables/OtpService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"properties.html":{}}}],["designed",{"_index":612,"title":{},"body":{"injectables/LogRequest.html":{}}}],["detection",{"_index":888,"title":{},"body":{"index.html":{}}}],["dev",{"_index":850,"title":{},"body":{"index.html":{}}}],["developed",{"_index":812,"title":{},"body":{"index.html":{}}}],["differentiation",{"_index":559,"title":{},"body":{"injectables/CoreService.html":{}}}],["docker",{"_index":819,"title":{},"body":{"index.html":{}}}],["docs",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"index.html":{}}}],["docs)[/docs",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["documentation",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{},"index.html":{}}}],["doesnt",{"_index":875,"title":{},"body":{"index.html":{}}}],["done",{"_index":468,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto",{"_index":298,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/CoreController.html":{},"injectables/CoreService.html":{}}}],["dummy",{"_index":923,"title":{},"body":{"index.html":{}}}],["easily",{"_index":845,"title":{},"body":{"index.html":{}}}],["edge",{"_index":404,"title":{},"body":{"injectables/AuthService.html":{}}}],["edit",{"_index":345,"title":{},"body":{"interfaces/AuthRequest-1.html":{},"controllers/UserController.html":{}}}],["editmydata",{"_index":714,"title":{},"body":{"controllers/UserController.html":{}}}],["editmydata(@body",{"_index":347,"title":{},"body":{"interfaces/AuthRequest-1.html":{},"controllers/UserController.html":{}}}],["editmydata(user",{"_index":716,"title":{},"body":{"controllers/UserController.html":{}}}],["edituser",{"_index":227,"title":{"classes/EditUser.html":{}},"body":{"classes/AuthLogin.html":{},"interfaces/AuthRequest-1.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"classes/Phnum.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["edituser(user",{"_index":735,"title":{},"body":{"injectables/UserService.html":{}}}],["elements",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["email",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["emailing",{"_index":384,"title":{},"body":{"injectables/AuthService.html":{}}}],["endpoint",{"_index":911,"title":{},"body":{"index.html":{}}}],["endpoints",{"_index":930,"title":{},"body":{"index.html":{}}}],["enterred",{"_index":480,"title":{},"body":{"injectables/AuthService.html":{}}}],["entity",{"_index":894,"title":{},"body":{"index.html":{}}}],["enum",{"_index":645,"title":{},"body":{"classes/MuttateDto.html":{},"classes/QueryDto.html":{},"interfaces/QueryReturn.html":{}}}],["enumerations",{"_index":805,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":112,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"index.html":{}}}],["env.example",{"_index":904,"title":{},"body":{"index.html":{}}}],["error",{"_index":442,"title":{},"body":{"injectables/AuthService.html":{}}}],["error.code",{"_index":444,"title":{},"body":{"injectables/AuthService.html":{}}}],["execute",{"_index":466,"title":{},"body":{"injectables/AuthService.html":{}}}],["exisit",{"_index":739,"title":{},"body":{"injectables/UserService.html":{}}}],["expired",{"_index":472,"title":{},"body":{"injectables/AuthService.html":{}}}],["expiresin",{"_index":485,"title":{},"body":{"injectables/AuthService.html":{}}}],["expiry",{"_index":389,"title":{},"body":{"injectables/AuthService.html":{}}}],["export",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthLogin.html":{},"modules/AuthModule.html":{},"interfaces/AuthRequest.html":{},"interfaces/AuthRequest-1.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"controllers/CoreController.html":{},"modules/CoreModule.html":{},"injectables/CoreService.html":{},"classes/EditUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"classes/MuttateDto.html":{},"modules/OtpModule.html":{},"injectables/OtpService.html":{},"classes/Phnum.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/QueryDto.html":{},"interfaces/QueryReturn.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["exported",{"_index":592,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["exporting",{"_index":694,"title":{},"body":{"modules/PrismaModule.html":{}}}],["exports",{"_index":255,"title":{},"body":{"modules/AuthModule.html":{},"modules/OtpModule.html":{},"modules/PrismaModule.html":{}}}],["express",{"_index":334,"title":{},"body":{"interfaces/AuthRequest-1.html":{},"injectables/LogRequest.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["extends",{"_index":223,"title":{},"body":{"classes/AuthLogin.html":{},"interfaces/AuthRequest.html":{},"interfaces/AuthRequest-1.html":{},"classes/AuthSignup.html":{},"controllers/CoreController.html":{},"classes/EditUser.html":{},"injectables/JwtStrategy.html":{},"classes/Phnum.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{}}}],["extracting",{"_index":357,"title":{},"body":{"injectables/AuthService.html":{}}}],["extractjwt",{"_index":600,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":604,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["feilds",{"_index":340,"title":{},"body":{"interfaces/AuthRequest-1.html":{},"controllers/UserController.html":{}}}],["few",{"_index":859,"title":{},"body":{"index.html":{}}}],["figure",{"_index":34,"title":{},"body":{"controllers/AppController.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthLogin.html":{},"modules/AuthModule.html":{},"interfaces/AuthRequest.html":{},"interfaces/AuthRequest-1.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"controllers/CoreController.html":{},"modules/CoreModule.html":{},"injectables/CoreService.html":{},"classes/EditUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"classes/MuttateDto.html":{},"modules/OtpModule.html":{},"injectables/OtpService.html":{},"classes/Phnum.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/QueryDto.html":{},"interfaces/QueryReturn.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"index.html":{}}}],["files",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["finding",{"_index":392,"title":{},"body":{"injectables/AuthService.html":{}}}],["flexible",{"_index":843,"title":{},"body":{"index.html":{}}}],["followed",{"_index":382,"title":{},"body":{"injectables/AuthService.html":{}}}],["forbiddenexception",{"_index":413,"title":{},"body":{"injectables/AuthService.html":{}}}],["forbiddenexception('credentials",{"_index":448,"title":{},"body":{"injectables/AuthService.html":{}}}],["forbiddenexception('session",{"_index":471,"title":{},"body":{"injectables/AuthService.html":{}}}],["forbiddenexception('wrong",{"_index":479,"title":{},"body":{"injectables/AuthService.html":{}}}],["forensics",{"_index":864,"title":{},"body":{"index.html":{}}}],["forgot",{"_index":378,"title":{},"body":{"injectables/AuthService.html":{}}}],["forgotpasswordlogic",{"_index":366,"title":{},"body":{"injectables/AuthService.html":{}}}],["forgotpasswordlogic(phonenum",{"_index":376,"title":{},"body":{"injectables/AuthService.html":{}}}],["forgotpwd",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{}}}],["forgotpwd(@body",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{}}}],["forgotpwd(body",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{}}}],["format",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{}}}],["framework",{"_index":827,"title":{},"body":{"index.html":{}}}],["fraud",{"_index":270,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/CoreController.html":{},"modules/CoreModule.html":{},"classes/MuttateDto.html":{},"classes/QueryDto.html":{},"interfaces/QueryReturn.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["fraudnums",{"_index":544,"title":{},"body":{"injectables/CoreService.html":{}}}],["function",{"_index":762,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":808,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["gen",{"_index":924,"title":{},"body":{"index.html":{}}}],["generated",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["generating",{"_index":380,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["get('/hehe",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('me",{"_index":338,"title":{},"body":{"interfaces/AuthRequest-1.html":{},"controllers/UserController.html":{}}}],["getting",{"_index":810,"title":{"index.html":{}},"body":{}}],["git",{"_index":898,"title":{},"body":{"index.html":{}}}],["global",{"_index":658,"title":{},"body":{"modules/OtpModule.html":{},"modules/PrismaModule.html":{}}}],["globally",{"_index":695,"title":{},"body":{"modules/PrismaModule.html":{}}}],["go",{"_index":835,"title":{},"body":{"index.html":{}}}],["good",{"_index":31,"title":{},"body":{"controllers/AppController.html":{}}}],["graph",{"_index":245,"title":{},"body":{"modules/AuthModule.html":{}}}],["guess",{"_index":841,"title":{},"body":{"index.html":{}}}],["guide",{"_index":895,"title":{},"body":{"index.html":{}}}],["hackathon",{"_index":815,"title":{},"body":{"index.html":{}}}],["ham",{"_index":283,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/CoreController.html":{}}}],["handle",{"_index":732,"title":{},"body":{"injectables/UserService.html":{}}}],["handlebars",{"_index":789,"title":{},"body":{"dependencies.html":{}}}],["handled",{"_index":406,"title":{},"body":{"injectables/AuthService.html":{}}}],["handlemobile",{"_index":505,"title":{},"body":{"injectables/CoreService.html":{}}}],["handlemobile(phnum",{"_index":511,"title":{},"body":{"injectables/CoreService.html":{}}}],["handlesms",{"_index":506,"title":{},"body":{"injectables/CoreService.html":{}}}],["handlesms(header",{"_index":513,"title":{},"body":{"injectables/CoreService.html":{}}}],["hash",{"_index":401,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["header",{"_index":344,"title":{},"body":{"interfaces/AuthRequest-1.html":{},"injectables/CoreService.html":{},"controllers/UserController.html":{}}}],["headers",{"_index":626,"title":{},"body":{"injectables/LogRequest.html":{}}}],["hehe",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{}}}],["here",{"_index":683,"title":{},"body":{"injectables/OtpService.html":{},"index.html":{}}}],["heyy",{"_index":682,"title":{},"body":{"injectables/OtpService.html":{}}}],["hj",{"_index":568,"title":{},"body":{"injectables/CoreService.html":{}}}],["host",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["hosting",{"_index":823,"title":{},"body":{"index.html":{}}}],["httpexception",{"_index":418,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpexception(error",{"_index":451,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpstatus",{"_index":421,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpstatus.forbidden",{"_index":452,"title":{},"body":{"injectables/AuthService.html":{}}}],["id",{"_index":229,"title":{},"body":{"classes/AuthLogin.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"injectables/CoreService.html":{},"classes/EditUser.html":{},"injectables/JwtStrategy.html":{},"classes/Phnum.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":744,"title":{},"body":{"coverage.html":{}}}],["implement",{"_index":915,"title":{},"body":{"index.html":{}}}],["implemented",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["implementing",{"_index":698,"title":{},"body":{"injectables/PrismaService.html":{}}}],["implements",{"_index":138,"title":{},"body":{"modules/AppModule.html":{},"injectables/LogRequest.html":{},"injectables/PrismaService.html":{}}}],["implemted",{"_index":916,"title":{},"body":{"index.html":{}}}],["import",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthLogin.html":{},"modules/AuthModule.html":{},"interfaces/AuthRequest.html":{},"interfaces/AuthRequest-1.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"controllers/CoreController.html":{},"modules/CoreModule.html":{},"injectables/CoreService.html":{},"classes/EditUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"classes/MuttateDto.html":{},"modules/OtpModule.html":{},"injectables/OtpService.html":{},"classes/Phnum.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/QueryDto.html":{},"interfaces/QueryReturn.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["include",{"_index":543,"title":{},"body":{"injectables/CoreService.html":{}}}],["incoming",{"_index":280,"title":{},"body":{"interfaces/AuthRequest.html":{},"interfaces/AuthRequest-1.html":{},"controllers/CoreController.html":{},"controllers/UserController.html":{}}}],["incomming",{"_index":279,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/CoreController.html":{},"injectables/LogRequest.html":{}}}],["incomplete",{"_index":914,"title":{},"body":{"index.html":{}}}],["incorrect",{"_index":454,"title":{},"body":{"injectables/AuthService.html":{}}}],["index",{"_index":17,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthLogin.html":{},"interfaces/AuthRequest.html":{},"interfaces/AuthRequest-1.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"controllers/CoreController.html":{},"injectables/CoreService.html":{},"classes/EditUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"classes/MuttateDto.html":{},"injectables/OtpService.html":{},"classes/Phnum.html":{},"injectables/PrismaService.html":{},"classes/QueryDto.html":{},"interfaces/QueryReturn.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthLogin.html":{},"modules/AuthModule.html":{},"interfaces/AuthRequest.html":{},"interfaces/AuthRequest-1.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"controllers/CoreController.html":{},"modules/CoreModule.html":{},"injectables/CoreService.html":{},"classes/EditUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"classes/MuttateDto.html":{},"modules/OtpModule.html":{},"injectables/OtpService.html":{},"classes/Phnum.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/QueryDto.html":{},"interfaces/QueryReturn.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["infor",{"_index":860,"title":{},"body":{"index.html":{}}}],["inherited",{"_index":489,"title":{},"body":{"classes/AuthSignup.html":{}}}],["init",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"injectables/PrismaService.html":{}}}],["initiated",{"_index":427,"title":{},"body":{"injectables/AuthService.html":{}}}],["initiating",{"_index":692,"title":{},"body":{"modules/PrismaModule.html":{}}}],["inject",{"_index":414,"title":{},"body":{"injectables/AuthService.html":{},"modules/OtpModule.html":{}}}],["inject(cache_manager",{"_index":431,"title":{},"body":{"injectables/AuthService.html":{}}}],["injectable",{"_index":141,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CoreService.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"injectables/OtpService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CoreService.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"injectables/OtpService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":142,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CoreService.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"injectables/OtpService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injected",{"_index":251,"title":{},"body":{"modules/AuthModule.html":{},"modules/PrismaModule.html":{}}}],["input",{"_index":525,"title":{},"body":{"injectables/CoreService.html":{}}}],["inserting",{"_index":351,"title":{},"body":{"injectables/AuthService.html":{}}}],["install",{"_index":901,"title":{},"body":{"index.html":{}}}],["instance",{"_index":878,"title":{},"body":{"index.html":{}}}],["interactions",{"_index":549,"title":{},"body":{"injectables/CoreService.html":{}}}],["interface",{"_index":256,"title":{"interfaces/AuthRequest.html":{},"interfaces/AuthRequest-1.html":{},"interfaces/QueryReturn.html":{}},"body":{"interfaces/AuthRequest.html":{},"interfaces/AuthRequest-1.html":{},"controllers/CoreController.html":{},"classes/MuttateDto.html":{},"classes/QueryDto.html":{},"interfaces/QueryReturn.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["interfaces",{"_index":258,"title":{},"body":{"interfaces/AuthRequest.html":{},"interfaces/AuthRequest-1.html":{},"interfaces/QueryReturn.html":{},"overview.html":{}}}],["internalservererrorexception",{"_index":419,"title":{},"body":{"injectables/AuthService.html":{}}}],["internalservererrorexception('failed",{"_index":465,"title":{},"body":{"injectables/AuthService.html":{}}}],["isboolean",{"_index":215,"title":{},"body":{"classes/AuthLogin.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"classes/Phnum.html":{},"classes/UserDTO.html":{}}}],["isemail",{"_index":216,"title":{},"body":{"classes/AuthLogin.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"classes/Phnum.html":{},"classes/UserDTO.html":{}}}],["isenum",{"_index":643,"title":{},"body":{"classes/MuttateDto.html":{},"classes/QueryDto.html":{},"interfaces/QueryReturn.html":{}}}],["isenum(itemtype",{"_index":648,"title":{},"body":{"classes/MuttateDto.html":{},"classes/QueryDto.html":{},"interfaces/QueryReturn.html":{}}}],["isglobal",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["isnotempty",{"_index":217,"title":{},"body":{"classes/AuthLogin.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"classes/MuttateDto.html":{},"classes/Phnum.html":{},"classes/QueryDto.html":{},"interfaces/QueryReturn.html":{},"classes/UserDTO.html":{}}}],["isnotempty()@isphonenumber('in",{"_index":213,"title":{},"body":{"classes/AuthLogin.html":{},"classes/AuthSignup.html":{},"classes/Phnum.html":{}}}],["isnotempty()@isstring",{"_index":635,"title":{},"body":{"classes/MuttateDto.html":{},"classes/QueryDto.html":{}}}],["isnotempty()@isstring()@isenum(itemtype",{"_index":638,"title":{},"body":{"classes/MuttateDto.html":{}}}],["isoptional",{"_index":218,"title":{},"body":{"classes/AuthLogin.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"classes/Phnum.html":{},"classes/UserDTO.html":{}}}],["isoptional()@isphonenumber('in",{"_index":587,"title":{},"body":{"classes/EditUser.html":{}}}],["isphonenumber",{"_index":219,"title":{},"body":{"classes/AuthLogin.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"classes/Phnum.html":{},"classes/UserDTO.html":{}}}],["isphonenumber('in",{"_index":222,"title":{},"body":{"classes/AuthLogin.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"classes/Phnum.html":{},"classes/UserDTO.html":{}}}],["isstring",{"_index":220,"title":{},"body":{"classes/AuthLogin.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"classes/MuttateDto.html":{},"classes/Phnum.html":{},"classes/QueryDto.html":{},"interfaces/QueryReturn.html":{},"classes/UserDTO.html":{}}}],["isstring()@isenum(itemtype",{"_index":712,"title":{},"body":{"classes/QueryDto.html":{}}}],["isstring()@isnotempty",{"_index":211,"title":{},"body":{"classes/AuthLogin.html":{},"classes/AuthSignup.html":{},"classes/MuttateDto.html":{},"classes/QueryDto.html":{}}}],["isstring()@isnotempty()@isenum(itemtype",{"_index":640,"title":{},"body":{"classes/MuttateDto.html":{}}}],["isstring()@isoptional",{"_index":585,"title":{},"body":{"classes/EditUser.html":{}}}],["item",{"_index":539,"title":{},"body":{"injectables/CoreService.html":{},"classes/MuttateDto.html":{},"classes/QueryDto.html":{},"interfaces/QueryReturn.html":{}}}],["item.fraudnums.length",{"_index":552,"title":{},"body":{"injectables/CoreService.html":{}}}],["item.id",{"_index":548,"title":{},"body":{"injectables/CoreService.html":{}}}],["item.interactions",{"_index":550,"title":{},"body":{"injectables/CoreService.html":{}}}],["item.spamreport.length",{"_index":553,"title":{},"body":{"injectables/CoreService.html":{}}}],["items",{"_index":529,"title":{},"body":{"injectables/CoreService.html":{}}}],["itemtype",{"_index":293,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/CoreController.html":{},"injectables/CoreService.html":{},"classes/MuttateDto.html":{},"classes/QueryDto.html":{},"interfaces/QueryReturn.html":{},"miscellaneous/enumerations.html":{}}}],["itemtype.mobilenum",{"_index":308,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/CoreController.html":{}}}],["itemtype.smsheader",{"_index":651,"title":{},"body":{"classes/MuttateDto.html":{},"classes/QueryDto.html":{},"interfaces/QueryReturn.html":{}}}],["jobs",{"_index":350,"title":{},"body":{"injectables/AuthService.html":{}}}],["join",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["join(__dirname",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["js",{"_index":919,"title":{},"body":{"index.html":{}}}],["json.stringify",{"_index":629,"title":{},"body":{"injectables/LogRequest.html":{}}}],["jwt",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/AuthRequest-1.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"dependencies.html":{},"index.html":{}}}],["jwtfromrequest",{"_index":603,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":247,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":252,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":360,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtsign",{"_index":367,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtsign(userid",{"_index":385,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":238,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kawach",{"_index":814,"title":{},"body":{"index.html":{}}}],["km",{"_index":566,"title":{},"body":{"injectables/CoreService.html":{}}}],["lay",{"_index":884,"title":{},"body":{"index.html":{}}}],["lets",{"_index":633,"title":{},"body":{"injectables/LogRequest.html":{}}}],["license",{"_index":940,"title":{},"body":{"properties.html":{}}}],["link",{"_index":16,"title":{},"body":{"controllers/AppController.html":{}}}],["literal",{"_index":597,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["local",{"_index":782,"title":{},"body":{"dependencies.html":{}}}],["locally",{"_index":821,"title":{},"body":{"index.html":{}}}],["log",{"_index":613,"title":{},"body":{"injectables/LogRequest.html":{}}}],["logging",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["logic",{"_index":379,"title":{},"body":{"injectables/AuthService.html":{},"modules/UserModule.html":{}}}],["login",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(@body",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(body",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginlogic",{"_index":368,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginlogic(body",{"_index":390,"title":{},"body":{"injectables/AuthService.html":{}}}],["logrequest",{"_index":90,"title":{"injectables/LogRequest.html":{}},"body":{"modules/AppModule.html":{},"injectables/LogRequest.html":{},"coverage.html":{}}}],["logs",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["look",{"_index":925,"title":{},"body":{"index.html":{}}}],["love",{"_index":842,"title":{},"body":{"index.html":{}}}],["made",{"_index":584,"title":{},"body":{"injectables/CoreService.html":{}}}],["mailservice",{"_index":424,"title":{},"body":{"injectables/AuthService.html":{}}}],["main.py",{"_index":928,"title":{},"body":{"index.html":{}}}],["maintain",{"_index":839,"title":{},"body":{"index.html":{}}}],["maintaining",{"_index":854,"title":{},"body":{"index.html":{}}}],["make",{"_index":324,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/CoreController.html":{},"index.html":{}}}],["manage",{"_index":846,"title":{},"body":{"index.html":{}}}],["management",{"_index":832,"title":{},"body":{"index.html":{}}}],["manager",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{},"index.html":{}}}],["manages",{"_index":870,"title":{},"body":{"index.html":{}}}],["many",{"_index":857,"title":{},"body":{"index.html":{}}}],["matches",{"_index":521,"title":{},"body":{"injectables/CoreService.html":{}}}],["matches.length",{"_index":576,"title":{},"body":{"injectables/CoreService.html":{}}}],["matching",{"_index":40,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthLogin.html":{},"modules/AuthModule.html":{},"interfaces/AuthRequest.html":{},"interfaces/AuthRequest-1.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"controllers/CoreController.html":{},"modules/CoreModule.html":{},"injectables/CoreService.html":{},"classes/EditUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"classes/MuttateDto.html":{},"modules/OtpModule.html":{},"injectables/OtpService.html":{},"classes/Phnum.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/QueryDto.html":{},"interfaces/QueryReturn.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["math.floor(math.random",{"_index":458,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CoreService.html":{}}}],["message",{"_index":467,"title":{},"body":{"injectables/AuthService.html":{}}}],["messaging",{"_index":833,"title":{},"body":{"index.html":{}}}],["metadata",{"_index":797,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":616,"title":{},"body":{"injectables/LogRequest.html":{}}}],["methods",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CoreController.html":{},"injectables/CoreService.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"injectables/OtpService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["middleware",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"injectables/LogRequest.html":{}}}],["middlewareconsumer",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["migrate",{"_index":849,"title":{},"body":{"index.html":{}}}],["miscellaneous",{"_index":804,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["ml",{"_index":890,"title":{},"body":{"index.html":{}}}],["mobile",{"_index":264,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/CoreController.html":{},"injectables/CoreService.html":{},"injectables/OtpService.html":{}}}],["mobilenum",{"_index":646,"title":{},"body":{"classes/MuttateDto.html":{},"classes/QueryDto.html":{},"interfaces/QueryReturn.html":{},"miscellaneous/enumerations.html":{}}}],["mode",{"_index":907,"title":{},"body":{"index.html":{}}}],["model",{"_index":921,"title":{},"body":{"index.html":{}}}],["models",{"_index":891,"title":{},"body":{"index.html":{}}}],["module",{"_index":41,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CoreModule.html":{},"modules/OtpModule.html":{},"modules/PrismaModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CoreModule.html":{},"modules/OtpModule.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/UserModule.html":{}}}],["modules",{"_index":43,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CoreModule.html":{},"modules/OtpModule.html":{},"modules/PrismaModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/mailer",{"_index":769,"title":{},"body":{"dependencies.html":{}}}],["moniter",{"_index":851,"title":{},"body":{"index.html":{}}}],["msg",{"_index":281,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/CoreController.html":{}}}],["msg/sms",{"_index":282,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/CoreController.html":{}}}],["muation",{"_index":500,"title":{},"body":{"modules/CoreModule.html":{}}}],["mutate",{"_index":313,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/CoreController.html":{}}}],["mutate(req",{"_index":492,"title":{},"body":{"controllers/CoreController.html":{}}}],["mutatemobile",{"_index":507,"title":{},"body":{"injectables/CoreService.html":{}}}],["mutatemobile(phnum",{"_index":515,"title":{},"body":{"injectables/CoreService.html":{}}}],["mutatesms",{"_index":508,"title":{},"body":{"injectables/CoreService.html":{}}}],["mutatesms(sms",{"_index":517,"title":{},"body":{"injectables/CoreService.html":{}}}],["muttatedto",{"_index":294,"title":{"classes/MuttateDto.html":{}},"body":{"interfaces/AuthRequest.html":{},"controllers/CoreController.html":{},"classes/MuttateDto.html":{},"classes/QueryDto.html":{},"interfaces/QueryReturn.html":{},"coverage.html":{}}}],["mydata",{"_index":715,"title":{},"body":{"controllers/UserController.html":{}}}],["mydata(@req",{"_index":339,"title":{},"body":{"interfaces/AuthRequest-1.html":{},"controllers/UserController.html":{}}}],["mydata(req",{"_index":718,"title":{},"body":{"controllers/UserController.html":{}}}],["mysql",{"_index":877,"title":{},"body":{"index.html":{}}}],["name",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CoreController.html":{},"injectables/CoreService.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"injectables/OtpService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["national",{"_index":862,"title":{},"body":{"index.html":{}}}],["need",{"_index":342,"title":{},"body":{"interfaces/AuthRequest-1.html":{},"controllers/UserController.html":{}}}],["nestjs",{"_index":243,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs(express",{"_index":825,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthRequest.html":{},"interfaces/AuthRequest-1.html":{},"injectables/AuthService.html":{},"controllers/CoreController.html":{},"modules/CoreModule.html":{},"injectables/CoreService.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"modules/OtpModule.html":{},"injectables/OtpService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/common/decorators",{"_index":659,"title":{},"body":{"modules/OtpModule.html":{}}}],["nestjs/common/enums",{"_index":422,"title":{},"body":{"injectables/AuthService.html":{}}}],["nestjs/common/exceptions",{"_index":420,"title":{},"body":{"injectables/AuthService.html":{}}}],["nestjs/config",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/CoreService.html":{},"injectables/JwtStrategy.html":{},"injectables/OtpService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{}}}],["nestjs/core",{"_index":772,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":248,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["nestjs/passport",{"_index":290,"title":{},"body":{"interfaces/AuthRequest.html":{},"interfaces/AuthRequest-1.html":{},"controllers/CoreController.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":773,"title":{},"body":{"dependencies.html":{}}}],["nestjs/serve",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":624,"title":{},"body":{"injectables/LogRequest.html":{}}}],["nestmodule",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["new",{"_index":447,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CoreService.html":{},"injectables/OtpService.html":{},"coverage.html":{}}}],["next",{"_index":621,"title":{},"body":{"injectables/LogRequest.html":{}}}],["nextfunction",{"_index":622,"title":{},"body":{"injectables/LogRequest.html":{}}}],["nlp",{"_index":561,"title":{},"body":{"injectables/CoreService.html":{},"index.html":{}}}],["nodemailer",{"_index":791,"title":{},"body":{"dependencies.html":{}}}],["normal",{"_index":272,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/CoreController.html":{},"modules/CoreModule.html":{},"classes/MuttateDto.html":{},"classes/QueryDto.html":{},"interfaces/QueryReturn.html":{},"miscellaneous/enumerations.html":{}}}],["now",{"_index":32,"title":{},"body":{"controllers/AppController.html":{}}}],["np",{"_index":569,"title":{},"body":{"injectables/CoreService.html":{}}}],["npx",{"_index":848,"title":{},"body":{"index.html":{}}}],["num",{"_index":526,"title":{},"body":{"injectables/CoreService.html":{}}}],["number",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthLogin.html":{},"interfaces/AuthRequest.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"controllers/CoreController.html":{},"modules/CoreModule.html":{},"classes/EditUser.html":{},"injectables/JwtStrategy.html":{},"injectables/OtpService.html":{},"classes/Phnum.html":{},"classes/UserDTO.html":{}}}],["numbers",{"_index":665,"title":{},"body":{"injectables/OtpService.html":{}}}],["obj.type",{"_index":650,"title":{},"body":{"classes/MuttateDto.html":{},"classes/QueryDto.html":{},"interfaces/QueryReturn.html":{}}}],["object",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"interfaces/AuthRequest-1.html":{},"injectables/AuthService.html":{},"controllers/UserController.html":{}}}],["onmoduleinit",{"_index":702,"title":{},"body":{"injectables/PrismaService.html":{}}}],["optional",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/AuthRequest-1.html":{},"injectables/AuthService.html":{},"controllers/CoreController.html":{},"injectables/CoreService.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"injectables/OtpService.html":{},"injectables/PrismaService.html":{},"interfaces/QueryReturn.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["options",{"_index":531,"title":{},"body":{"injectables/CoreService.html":{}}}],["options.length",{"_index":536,"title":{},"body":{"injectables/CoreService.html":{}}}],["options[randomindex",{"_index":537,"title":{},"body":{"injectables/CoreService.html":{}}}],["organised",{"_index":929,"title":{},"body":{"index.html":{}}}],["originalurl",{"_index":627,"title":{},"body":{"injectables/LogRequest.html":{}}}],["orm",{"_index":740,"title":{},"body":{"injectables/UserService.html":{},"index.html":{}}}],["otp",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/OtpModule.html":{},"injectables/OtpService.html":{},"index.html":{}}}],["otp.service",{"_index":660,"title":{},"body":{"modules/OtpModule.html":{}}}],["otp/otp.module",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["otp/otp.service",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["otpmodule",{"_index":50,"title":{"modules/OtpModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/OtpModule.html":{},"modules.html":{},"overview.html":{}}}],["otpsender",{"_index":373,"title":{},"body":{"injectables/AuthService.html":{}}}],["otpservice",{"_index":100,"title":{"injectables/OtpService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"modules/OtpModule.html":{},"injectables/OtpService.html":{},"coverage.html":{},"overview.html":{}}}],["out",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CoreModule.html":{},"modules/OtpModule.html":{},"modules/PrismaModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["over",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["overview",{"_index":935,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p2002",{"_index":445,"title":{},"body":{"injectables/AuthService.html":{}}}],["package",{"_index":768,"title":{"dependencies.html":{},"properties.html":{}},"body":{"index.html":{}}}],["page",{"_index":38,"title":{},"body":{"controllers/AppController.html":{}}}],["param",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/AuthRequest.html":{},"interfaces/AuthRequest-1.html":{},"controllers/CoreController.html":{},"injectables/CoreService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["parameters",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CoreController.html":{},"injectables/CoreService.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"injectables/OtpService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["pas",{"_index":738,"title":{},"body":{"injectables/UserService.html":{}}}],["pass",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/AuthRequest-1.html":{},"controllers/UserController.html":{}}}],["passport",{"_index":601,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportjs",{"_index":831,"title":{},"body":{"index.html":{}}}],["passportstrategy",{"_index":599,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":602,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthLogin.html":{},"interfaces/AuthRequest-1.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"classes/Phnum.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["passwords",{"_index":402,"title":{},"body":{"injectables/AuthService.html":{}}}],["path",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["payload",{"_index":337,"title":{},"body":{"interfaces/AuthRequest-1.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["payload.sub",{"_index":608,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["pending",{"_index":882,"title":{},"body":{"index.html":{}}}],["phnum",{"_index":164,"title":{"classes/Phnum.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthLogin.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"injectables/CoreService.html":{},"classes/EditUser.html":{},"injectables/OtpService.html":{},"classes/Phnum.html":{},"classes/UserDTO.html":{},"coverage.html":{}}}],["phonenum",{"_index":232,"title":{},"body":{"classes/AuthLogin.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"classes/Phnum.html":{},"classes/UserDTO.html":{}}}],["pipelines",{"_index":885,"title":{},"body":{"index.html":{}}}],["port",{"_index":136,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["post",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/AuthRequest.html":{},"interfaces/AuthRequest-1.html":{},"controllers/CoreController.html":{},"controllers/UserController.html":{}}}],["post('/requestotp",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/signin",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/signup",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/verifyotp",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('edit",{"_index":346,"title":{},"body":{"interfaces/AuthRequest-1.html":{},"controllers/UserController.html":{}}}],["post('mutate",{"_index":312,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/CoreController.html":{}}}],["post('query",{"_index":305,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/CoreController.html":{}}}],["postgre",{"_index":375,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CoreService.html":{},"injectables/UserService.html":{}}}],["postgres",{"_index":354,"title":{},"body":{"injectables/AuthService.html":{},"modules/PrismaModule.html":{},"injectables/UserService.html":{},"index.html":{}}}],["posts",{"_index":330,"title":{},"body":{"interfaces/AuthRequest-1.html":{},"controllers/UserController.html":{}}}],["predb",{"_index":528,"title":{},"body":{"injectables/CoreService.html":{}}}],["predict",{"_index":269,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/CoreController.html":{},"modules/CoreModule.html":{}}}],["prediction",{"_index":562,"title":{},"body":{"injectables/CoreService.html":{}}}],["prefetched",{"_index":861,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CoreController.html":{},"controllers/UserController.html":{}}}],["prisma",{"_index":407,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"dependencies.html":{},"index.html":{}}}],["prisma.service",{"_index":696,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma/client",{"_index":530,"title":{},"body":{"injectables/CoreService.html":{},"injectables/PrismaService.html":{},"dependencies.html":{}}}],["prisma/prisma.module",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["prisma/prisma.service",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["prismaclient",{"_index":699,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismamodule",{"_index":51,"title":{"modules/PrismaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PrismaModule.html":{},"modules.html":{},"overview.html":{}}}],["prismaservice",{"_index":54,"title":{"injectables/PrismaService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/CoreService.html":{},"injectables/JwtStrategy.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":430,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CoreService.html":{},"injectables/JwtStrategy.html":{},"injectables/OtpService.html":{},"injectables/UserService.html":{}}}],["production",{"_index":909,"title":{},"body":{"index.html":{}}}],["project",{"_index":917,"title":{},"body":{"index.html":{}}}],["promise",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/AuthRequest.html":{},"injectables/AuthService.html":{},"controllers/CoreController.html":{},"injectables/CoreService.html":{},"injectables/OtpService.html":{}}}],["promise.resolve",{"_index":321,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/CoreController.html":{}}}],["properties",{"_index":210,"title":{"properties.html":{}},"body":{"classes/AuthLogin.html":{},"interfaces/AuthRequest.html":{},"interfaces/AuthRequest-1.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"classes/MuttateDto.html":{},"injectables/OtpService.html":{},"classes/Phnum.html":{},"classes/QueryDto.html":{},"interfaces/QueryReturn.html":{},"classes/UserDTO.html":{},"properties.html":{}}}],["property",{"_index":301,"title":{},"body":{"interfaces/AuthRequest.html":{},"interfaces/AuthRequest-1.html":{},"controllers/CoreController.html":{},"controllers/UserController.html":{}}}],["provided",{"_index":254,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CoreModule.html":{},"modules/OtpModule.html":{},"modules/PrismaModule.html":{},"modules/UserModule.html":{}}}],["pw",{"_index":341,"title":{},"body":{"interfaces/AuthRequest-1.html":{},"controllers/UserController.html":{}}}],["pwmatches",{"_index":455,"title":{},"body":{"injectables/AuthService.html":{}}}],["python",{"_index":828,"title":{},"body":{"index.html":{}}}],["qmvxege8cv0xsmddlkgezlo4u3b9rwwj",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["quering",{"_index":352,"title":{},"body":{"injectables/AuthService.html":{}}}],["query",{"_index":276,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/CoreController.html":{},"modules/CoreModule.html":{},"index.html":{}}}],["querycontext",{"_index":306,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/CoreController.html":{}}}],["querycontext(req",{"_index":494,"title":{},"body":{"controllers/CoreController.html":{}}}],["querydto",{"_index":295,"title":{"classes/QueryDto.html":{}},"body":{"interfaces/AuthRequest.html":{},"controllers/CoreController.html":{},"classes/MuttateDto.html":{},"classes/QueryDto.html":{},"interfaces/QueryReturn.html":{},"coverage.html":{}}}],["queryreturn",{"_index":296,"title":{"interfaces/QueryReturn.html":{}},"body":{"interfaces/AuthRequest.html":{},"controllers/CoreController.html":{},"injectables/CoreService.html":{},"classes/MuttateDto.html":{},"classes/QueryDto.html":{},"interfaces/QueryReturn.html":{},"coverage.html":{}}}],["railway",{"_index":822,"title":{},"body":{"index.html":{}}}],["random",{"_index":381,"title":{},"body":{"injectables/AuthService.html":{}}}],["randomindex",{"_index":535,"title":{},"body":{"injectables/CoreService.html":{}}}],["reading",{"_index":37,"title":{},"body":{"controllers/AppController.html":{}}}],["readonly",{"_index":673,"title":{},"body":{"injectables/OtpService.html":{}}}],["reddis",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["reddistore",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["redis",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{},"index.html":{}}}],["reflect",{"_index":796,"title":{},"body":{"dependencies.html":{}}}],["regex",{"_index":558,"title":{},"body":{"injectables/CoreService.html":{}}}],["related",{"_index":284,"title":{},"body":{"interfaces/AuthRequest.html":{},"injectables/AuthService.html":{},"controllers/CoreController.html":{},"injectables/UserService.html":{}}}],["relations",{"_index":844,"title":{},"body":{"index.html":{}}}],["relationships",{"_index":242,"title":{},"body":{"modules/AuthModule.html":{}}}],["replace",{"_index":299,"title":{},"body":{"interfaces/AuthRequest.html":{},"interfaces/AuthRequest-1.html":{},"controllers/CoreController.html":{},"controllers/UserController.html":{}}}],["repo",{"_index":899,"title":{},"body":{"index.html":{}}}],["report",{"_index":275,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/CoreController.html":{},"modules/CoreModule.html":{},"injectables/CoreService.html":{},"classes/MuttateDto.html":{},"classes/QueryDto.html":{},"interfaces/QueryReturn.html":{}}}],["report.casetype",{"_index":540,"title":{},"body":{"injectables/CoreService.html":{}}}],["report.context",{"_index":541,"title":{},"body":{"injectables/CoreService.html":{}}}],["reportedfraudnums",{"_index":583,"title":{},"body":{"injectables/CoreService.html":{}}}],["reportedspamnums",{"_index":581,"title":{},"body":{"injectables/CoreService.html":{}}}],["reports",{"_index":551,"title":{},"body":{"injectables/CoreService.html":{}}}],["reporttype",{"_index":297,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/CoreController.html":{},"injectables/CoreService.html":{},"classes/MuttateDto.html":{},"classes/QueryDto.html":{},"interfaces/QueryReturn.html":{},"miscellaneous/enumerations.html":{}}}],["reporttype.fraud",{"_index":532,"title":{},"body":{"injectables/CoreService.html":{}}}],["reporttype.normal",{"_index":533,"title":{},"body":{"injectables/CoreService.html":{}}}],["reporttype.spam",{"_index":534,"title":{},"body":{"injectables/CoreService.html":{}}}],["req",{"_index":287,"title":{},"body":{"interfaces/AuthRequest.html":{},"interfaces/AuthRequest-1.html":{},"controllers/CoreController.html":{},"injectables/LogRequest.html":{},"controllers/UserController.html":{}}}],["req.user",{"_index":317,"title":{},"body":{"interfaces/AuthRequest.html":{},"interfaces/AuthRequest-1.html":{},"controllers/CoreController.html":{},"controllers/UserController.html":{}}}],["req.user.verfied",{"_index":314,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/CoreController.html":{}}}],["request",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AuthRequest.html":{},"interfaces/AuthRequest-1.html":{},"injectables/AuthService.html":{},"controllers/CoreController.html":{},"injectables/LogRequest.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["requestotp",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{}}}],["requests",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{},"injectables/LogRequest.html":{}}}],["required",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"index.html":{}}}],["res",{"_index":619,"title":{},"body":{"injectables/LogRequest.html":{}}}],["res.on('close",{"_index":630,"title":{},"body":{"injectables/LogRequest.html":{}}}],["reset",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CoreModule.html":{},"modules/OtpModule.html":{},"modules/PrismaModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resp",{"_index":462,"title":{},"body":{"injectables/AuthService.html":{}}}],["response",{"_index":620,"title":{},"body":{"injectables/LogRequest.html":{}}}],["responses",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{}}}],["respsent",{"_index":631,"title":{},"body":{"injectables/LogRequest.html":{}}}],["rest",{"_index":36,"title":{},"body":{"controllers/AppController.html":{}}}],["results",{"_index":39,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthLogin.html":{},"modules/AuthModule.html":{},"interfaces/AuthRequest.html":{},"interfaces/AuthRequest-1.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"controllers/CoreController.html":{},"modules/CoreModule.html":{},"injectables/CoreService.html":{},"classes/EditUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"classes/MuttateDto.html":{},"modules/OtpModule.html":{},"injectables/OtpService.html":{},"classes/Phnum.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/QueryDto.html":{},"interfaces/QueryReturn.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["retrieve",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["retrieved",{"_index":411,"title":{},"body":{"injectables/AuthService.html":{}}}],["return",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"interfaces/AuthRequest.html":{},"interfaces/AuthRequest-1.html":{},"injectables/AuthService.html":{},"controllers/CoreController.html":{},"injectables/CoreService.html":{},"injectables/JwtStrategy.html":{},"injectables/OtpService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["returns",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/AuthRequest.html":{},"interfaces/AuthRequest-1.html":{},"injectables/AuthService.html":{},"controllers/CoreController.html":{},"injectables/CoreService.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"injectables/OtpService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["rimraf",{"_index":799,"title":{},"body":{"dependencies.html":{}}}],["rn",{"_index":873,"title":{},"body":{"index.html":{}}}],["root",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["rootpath",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["rout",{"_index":277,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/CoreController.html":{}}}],["route",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/AuthRequest-1.html":{},"injectables/LogRequest.html":{},"controllers/UserController.html":{},"index.html":{}}}],["routes",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/AuthRequest.html":{},"controllers/CoreController.html":{}}}],["routs",{"_index":327,"title":{},"body":{"interfaces/AuthRequest-1.html":{},"controllers/UserController.html":{}}}],["run",{"_index":820,"title":{},"body":{"index.html":{}}}],["run/build",{"_index":896,"title":{},"body":{"index.html":{}}}],["running",{"_index":880,"title":{},"body":{"index.html":{}}}],["runnlp",{"_index":509,"title":{},"body":{"injectables/CoreService.html":{}}}],["runnlp(context",{"_index":520,"title":{},"body":{"injectables/CoreService.html":{}}}],["rxjs",{"_index":801,"title":{},"body":{"dependencies.html":{}}}],["sample",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{}}}],["saved",{"_index":329,"title":{},"body":{"interfaces/AuthRequest-1.html":{},"controllers/UserController.html":{}}}],["search",{"_index":560,"title":{},"body":{"injectables/CoreService.html":{}}}],["secondary",{"_index":817,"title":{},"body":{"index.html":{}}}],["secret",{"_index":359,"title":{},"body":{"injectables/AuthService.html":{}}}],["secretkey",{"_index":387,"title":{},"body":{"injectables/AuthService.html":{}}}],["secretorkey",{"_index":605,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["seeded",{"_index":922,"title":{},"body":{"index.html":{}}}],["select",{"_index":545,"title":{},"body":{"injectables/CoreService.html":{}}}],["send",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{},"injectables/OtpService.html":{}}}],["sendotp",{"_index":667,"title":{},"body":{"injectables/OtpService.html":{}}}],["sendotp(otp",{"_index":670,"title":{},"body":{"injectables/OtpService.html":{}}}],["sense",{"_index":876,"title":{},"body":{"index.html":{}}}],["servce",{"_index":356,"title":{},"body":{"injectables/AuthService.html":{}}}],["serve",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["server",{"_index":837,"title":{},"body":{"index.html":{}}}],["serveroot",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forroot",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["service",{"_index":657,"title":{},"body":{"modules/OtpModule.html":{},"modules/PrismaModule.html":{},"injectables/UserService.html":{}}}],["services",{"_index":429,"title":{},"body":{"injectables/AuthService.html":{}}}],["serving",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["setup",{"_index":729,"title":{},"body":{"modules/UserModule.html":{},"index.html":{}}}],["several",{"_index":855,"title":{},"body":{"index.html":{}}}],["sha",{"_index":400,"title":{},"body":{"injectables/AuthService.html":{}}}],["signin",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{}}}],["signing",{"_index":361,"title":{},"body":{"injectables/AuthService.html":{}}}],["signup",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(@body",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(body",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{}}}],["signuplogic",{"_index":369,"title":{},"body":{"injectables/AuthService.html":{}}}],["signuplogic(body",{"_index":395,"title":{},"body":{"injectables/AuthService.html":{}}}],["sms",{"_index":263,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/CoreController.html":{},"modules/CoreModule.html":{},"injectables/CoreService.html":{},"index.html":{}}}],["smscontext",{"_index":652,"title":{},"body":{"classes/MuttateDto.html":{},"classes/QueryDto.html":{},"interfaces/QueryReturn.html":{}}}],["smsheader",{"_index":647,"title":{},"body":{"classes/MuttateDto.html":{},"classes/QueryDto.html":{},"interfaces/QueryReturn.html":{},"miscellaneous/enumerations.html":{}}}],["smssent",{"_index":680,"title":{},"body":{"injectables/OtpService.html":{}}}],["smssent.sid",{"_index":686,"title":{},"body":{"injectables/OtpService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthLogin.html":{},"modules/AuthModule.html":{},"interfaces/AuthRequest.html":{},"interfaces/AuthRequest-1.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"controllers/CoreController.html":{},"modules/CoreModule.html":{},"injectables/CoreService.html":{},"classes/EditUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"classes/MuttateDto.html":{},"modules/OtpModule.html":{},"injectables/OtpService.html":{},"classes/Phnum.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/QueryDto.html":{},"interfaces/QueryReturn.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["south",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["spam",{"_index":271,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/CoreController.html":{},"modules/CoreModule.html":{},"injectables/CoreService.html":{},"classes/MuttateDto.html":{},"classes/QueryDto.html":{},"interfaces/QueryReturn.html":{},"miscellaneous/enumerations.html":{}}}],["spamreport",{"_index":546,"title":{},"body":{"injectables/CoreService.html":{}}}],["src/.../index.ts",{"_index":806,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":809,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.module.ts",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:60",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app/app.controller.ts:11",{"_index":22,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app/app.service.ts",{"_index":143,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:26",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:36",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:46",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:58",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:69",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":239,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":349,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:116",{"_index":409,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:148",{"_index":386,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:30",{"_index":374,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:43",{"_index":396,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:70",{"_index":391,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:93",{"_index":377,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/jwtstrategy.ts",{"_index":590,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwtstrategy.ts:11",{"_index":595,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwtstrategy.ts:19",{"_index":598,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/core/core.controller.ts",{"_index":259,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/CoreController.html":{},"coverage.html":{}}}],["src/core/core.controller.ts:32",{"_index":495,"title":{},"body":{"controllers/CoreController.html":{}}}],["src/core/core.controller.ts:50",{"_index":493,"title":{},"body":{"controllers/CoreController.html":{}}}],["src/core/core.module.ts",{"_index":498,"title":{},"body":{"modules/CoreModule.html":{}}}],["src/core/core.service.ts",{"_index":504,"title":{},"body":{"injectables/CoreService.html":{},"coverage.html":{},"index.html":{}}}],["src/core/core.service.ts:17",{"_index":523,"title":{},"body":{"injectables/CoreService.html":{}}}],["src/core/core.service.ts:187",{"_index":516,"title":{},"body":{"injectables/CoreService.html":{}}}],["src/core/core.service.ts:23",{"_index":512,"title":{},"body":{"injectables/CoreService.html":{}}}],["src/core/core.service.ts:239",{"_index":518,"title":{},"body":{"injectables/CoreService.html":{}}}],["src/core/core.service.ts:9",{"_index":510,"title":{},"body":{"injectables/CoreService.html":{}}}],["src/core/core.service.ts:93",{"_index":514,"title":{},"body":{"injectables/CoreService.html":{}}}],["src/core/dto/index.ts",{"_index":634,"title":{},"body":{"classes/MuttateDto.html":{},"classes/QueryDto.html":{},"interfaces/QueryReturn.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/core/dto/index.ts:17",{"_index":709,"title":{},"body":{"classes/QueryDto.html":{}}}],["src/core/dto/index.ts:21",{"_index":713,"title":{},"body":{"classes/QueryDto.html":{}}}],["src/core/dto/index.ts:26",{"_index":711,"title":{},"body":{"classes/QueryDto.html":{}}}],["src/core/dto/index.ts:42",{"_index":637,"title":{},"body":{"classes/MuttateDto.html":{}}}],["src/core/dto/index.ts:47",{"_index":641,"title":{},"body":{"classes/MuttateDto.html":{}}}],["src/core/dto/index.ts:52",{"_index":639,"title":{},"body":{"classes/MuttateDto.html":{}}}],["src/core/dto/index.ts:56",{"_index":636,"title":{},"body":{"classes/MuttateDto.html":{}}}],["src/mail/mail.service",{"_index":425,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":761,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/middleware/requestlog.ts",{"_index":611,"title":{},"body":{"injectables/LogRequest.html":{},"coverage.html":{}}}],["src/middleware/requestlog.ts:10",{"_index":623,"title":{},"body":{"injectables/LogRequest.html":{}}}],["src/otp/otp.module",{"_index":249,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/otp/otp.module.ts",{"_index":656,"title":{},"body":{"modules/OtpModule.html":{}}}],["src/otp/otp.service",{"_index":423,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/otp/otp.service.ts",{"_index":661,"title":{},"body":{"injectables/OtpService.html":{},"coverage.html":{}}}],["src/otp/otp.service.ts:11",{"_index":669,"title":{},"body":{"injectables/OtpService.html":{}}}],["src/otp/otp.service.ts:18",{"_index":671,"title":{},"body":{"injectables/OtpService.html":{}}}],["src/prisma/prisma.module.ts",{"_index":691,"title":{},"body":{"modules/PrismaModule.html":{}}}],["src/prisma/prisma.service",{"_index":417,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CoreService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["src/prisma/prisma.service.ts",{"_index":697,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma/prisma.service.ts:10",{"_index":703,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma/prisma.service.ts:20",{"_index":704,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/typings",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/AuthRequest.html":{},"interfaces/AuthRequest-1.html":{},"injectables/AuthService.html":{},"controllers/CoreController.html":{},"injectables/CoreService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["src/typings/auth.ts",{"_index":209,"title":{},"body":{"classes/AuthLogin.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"classes/Phnum.html":{},"classes/UserDTO.html":{},"coverage.html":{}}}],["src/typings/auth.ts:13",{"_index":214,"title":{},"body":{"classes/AuthLogin.html":{}}}],["src/typings/auth.ts:16",{"_index":212,"title":{},"body":{"classes/AuthLogin.html":{}}}],["src/typings/auth.ts:18",{"_index":487,"title":{},"body":{"classes/AuthSignup.html":{}}}],["src/typings/auth.ts:24",{"_index":488,"title":{},"body":{"classes/AuthSignup.html":{}}}],["src/typings/auth.ts:30",{"_index":588,"title":{},"body":{"classes/EditUser.html":{}}}],["src/typings/auth.ts:33",{"_index":586,"title":{},"body":{"classes/EditUser.html":{}}}],["src/typings/auth.ts:36",{"_index":589,"title":{},"body":{"classes/EditUser.html":{}}}],["src/typings/auth.ts:42",{"_index":687,"title":{},"body":{"classes/Phnum.html":{}}}],["src/typings/auth.ts:46",{"_index":721,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/typings/auth.ts:47",{"_index":720,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/typings/auth.ts:48",{"_index":723,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/typings/auth.ts:49",{"_index":722,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/typings/auth.ts:50",{"_index":724,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/typings/auth.ts:51",{"_index":725,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/user/user.controller.ts",{"_index":326,"title":{},"body":{"interfaces/AuthRequest-1.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:26",{"_index":719,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:37",{"_index":717,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module.ts",{"_index":728,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":731,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:11",{"_index":734,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:20",{"_index":737,"title":{},"body":{"injectables/UserService.html":{}}}],["stack",{"_index":816,"title":{},"body":{"index.html":{}}}],["start",{"_index":906,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":905,"title":{},"body":{"index.html":{}}}],["start:prod",{"_index":908,"title":{},"body":{"index.html":{}}}],["started",{"_index":811,"title":{"index.html":{}},"body":{}}],["statements",{"_index":745,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["stats",{"_index":893,"title":{},"body":{"index.html":{}}}],["storage",{"_index":818,"title":{},"body":{"index.html":{}}}],["store",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["storing",{"_index":383,"title":{},"body":{"injectables/AuthService.html":{}}}],["strategy",{"_index":591,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthLogin.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"injectables/CoreService.html":{},"classes/EditUser.html":{},"classes/MuttateDto.html":{},"injectables/OtpService.html":{},"classes/Phnum.html":{},"classes/QueryDto.html":{},"interfaces/QueryReturn.html":{},"classes/UserDTO.html":{}}}],["struggle",{"_index":33,"title":{},"body":{"controllers/AppController.html":{}}}],["studio",{"_index":853,"title":{},"body":{"index.html":{}}}],["stuff",{"_index":927,"title":{},"body":{"index.html":{}}}],["sub",{"_index":481,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["subjected",{"_index":579,"title":{},"body":{"injectables/CoreService.html":{}}}],["subset",{"_index":253,"title":{},"body":{"modules/AuthModule.html":{}}}],["super",{"_index":225,"title":{},"body":{"classes/AuthLogin.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"injectables/JwtStrategy.html":{},"classes/Phnum.html":{},"injectables/PrismaService.html":{},"classes/UserDTO.html":{}}}],["support",{"_index":881,"title":{},"body":{"index.html":{},"modules.html":{}}}],["supprt",{"_index":364,"title":{},"body":{"injectables/AuthService.html":{}}}],["suspected",{"_index":580,"title":{},"body":{"injectables/CoreService.html":{}}}],["svg",{"_index":933,"title":{},"body":{"modules.html":{}}}],["table",{"_index":767,"title":{},"body":{"coverage.html":{}}}],["tables",{"_index":856,"title":{},"body":{"index.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":766,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{},"modules/CoreModule.html":{}}}],["taken",{"_index":450,"title":{},"body":{"injectables/AuthService.html":{}}}],["takes",{"_index":524,"title":{},"body":{"injectables/CoreService.html":{}}}],["tasks",{"_index":883,"title":{},"body":{"index.html":{}}}],["test",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{},"index.html":{}}}],["test(@body('email",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{}}}],["test(email",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{}}}],["testing",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"index.html":{}}}],["things",{"_index":250,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["this.$connect",{"_index":708,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.authservice.forgotpasswordlogic(body.phnum",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.loginlogic(body",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signuplogic(body",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.verifylogic(otp",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.cachemanager.del(phonenum",{"_index":478,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cachemanager.get(phonenum",{"_index":470,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cachemanager.set(phonenum",{"_index":460,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.config.get('jwt_secret",{"_index":482,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('twilio_phone_num",{"_index":685,"title":{},"body":{"injectables/OtpService.html":{}}}],["this.coreservice.handlemobile(body.item",{"_index":309,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/CoreController.html":{}}}],["this.coreservice.handlesms(body.item",{"_index":310,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/CoreController.html":{}}}],["this.coreservice.mutatemobile(body.item",{"_index":315,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/CoreController.html":{}}}],["this.coreservice.mutatesms",{"_index":318,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/CoreController.html":{}}}],["this.jwt.signasync(payload",{"_index":484,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtsign(user.id",{"_index":440,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.mailservice.senduserconfirmation(otp",{"_index":461,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.otpsender.sendotp(otp",{"_index":463,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.postgre.items.create",{"_index":557,"title":{},"body":{"injectables/CoreService.html":{}}}],["this.postgre.items.findunique",{"_index":542,"title":{},"body":{"injectables/CoreService.html":{}}}],["this.postgre.items.update",{"_index":547,"title":{},"body":{"injectables/CoreService.html":{}}}],["this.postgre.predb.findunique",{"_index":538,"title":{},"body":{"injectables/CoreService.html":{}}}],["this.postgre.usertable.create",{"_index":436,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.postgre.usertable.findunique",{"_index":453,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.postgre.usertable.update",{"_index":475,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CoreService.html":{},"injectables/UserService.html":{}}}],["this.prisma.usertable.findunique",{"_index":607,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.runnlp(context",{"_index":578,"title":{},"body":{"injectables/CoreService.html":{}}}],["this.twilioclient",{"_index":678,"title":{},"body":{"injectables/OtpService.html":{}}}],["this.twilioclient.messages.create",{"_index":681,"title":{},"body":{"injectables/OtpService.html":{}}}],["this.userservice.edituser(user",{"_index":348,"title":{},"body":{"interfaces/AuthRequest-1.html":{},"controllers/UserController.html":{}}}],["throw",{"_index":446,"title":{},"body":{"injectables/AuthService.html":{}}}],["token",{"_index":483,"title":{},"body":{"injectables/AuthService.html":{}}}],["transformer",{"_index":642,"title":{},"body":{"classes/MuttateDto.html":{},"classes/QueryDto.html":{},"interfaces/QueryReturn.html":{},"dependencies.html":{}}}],["trigger",{"_index":889,"title":{},"body":{"index.html":{}}}],["true",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AuthRequest.html":{},"injectables/AuthService.html":{},"controllers/CoreController.html":{},"injectables/CoreService.html":{}}}],["try",{"_index":435,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LogRequest.html":{},"index.html":{}}}],["ts",{"_index":826,"title":{},"body":{"index.html":{}}}],["ttl",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{}}}],["twilio",{"_index":672,"title":{},"body":{"injectables/OtpService.html":{},"dependencies.html":{}}}],["twilio(accountsid",{"_index":679,"title":{},"body":{"injectables/OtpService.html":{}}}],["twilioclient",{"_index":666,"title":{},"body":{"injectables/OtpService.html":{}}}],["twillio",{"_index":663,"title":{},"body":{"injectables/OtpService.html":{},"index.html":{}}}],["two",{"_index":261,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/CoreController.html":{}}}],["type",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthLogin.html":{},"interfaces/AuthRequest.html":{},"interfaces/AuthRequest-1.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"controllers/CoreController.html":{},"injectables/CoreService.html":{},"classes/EditUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"classes/MuttateDto.html":{},"injectables/OtpService.html":{},"classes/Phnum.html":{},"injectables/PrismaService.html":{},"classes/QueryDto.html":{},"interfaces/QueryReturn.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["types",{"_index":887,"title":{},"body":{"index.html":{}}}],["types/cache",{"_index":776,"title":{},"body":{"dependencies.html":{}}}],["types/nodemailer",{"_index":778,"title":{},"body":{"dependencies.html":{}}}],["types/passport",{"_index":780,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":830,"title":{},"body":{"index.html":{}}}],["u",{"_index":913,"title":{},"body":{"index.html":{}}}],["underneath",{"_index":664,"title":{},"body":{"injectables/OtpService.html":{}}}],["unknown",{"_index":519,"title":{},"body":{"injectables/CoreService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["unlicensed",{"_index":941,"title":{},"body":{"properties.html":{}}}],["up",{"_index":926,"title":{},"body":{"index.html":{}}}],["update",{"_index":274,"title":{},"body":{"interfaces/AuthRequest.html":{},"interfaces/AuthRequest-1.html":{},"controllers/CoreController.html":{},"modules/CoreModule.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["updatedat",{"_index":231,"title":{},"body":{"classes/AuthLogin.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"classes/Phnum.html":{},"classes/UserDTO.html":{}}}],["uptime",{"_index":12,"title":{},"body":{"controllers/AppController.html":{}}}],["url",{"_index":706,"title":{},"body":{"injectables/PrismaService.html":{}}}],["use",{"_index":617,"title":{},"body":{"injectables/LogRequest.html":{},"modules/OtpModule.html":{},"index.html":{}}}],["use(req",{"_index":618,"title":{},"body":{"injectables/LogRequest.html":{}}}],["used",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["usedas",{"_index":109,"title":{},"body":{"modules/AppModule.html":{}}}],["useguards",{"_index":288,"title":{},"body":{"interfaces/AuthRequest.html":{},"interfaces/AuthRequest-1.html":{},"controllers/CoreController.html":{},"controllers/UserController.html":{}}}],["useguards(authguard('jwt",{"_index":302,"title":{},"body":{"interfaces/AuthRequest.html":{},"interfaces/AuthRequest-1.html":{},"controllers/CoreController.html":{},"controllers/UserController.html":{}}}],["user",{"_index":286,"title":{},"body":{"interfaces/AuthRequest.html":{},"interfaces/AuthRequest-1.html":{},"injectables/AuthService.html":{},"controllers/CoreController.html":{},"injectables/CoreService.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["user.controller",{"_index":730,"title":{},"body":{"modules/UserModule.html":{}}}],["user.id",{"_index":476,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CoreService.html":{}}}],["user.password",{"_index":610,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["user.service",{"_index":333,"title":{},"body":{"interfaces/AuthRequest-1.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user/user.module",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["usercontroller",{"_index":336,"title":{"controllers/UserController.html":{}},"body":{"interfaces/AuthRequest-1.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdata",{"_index":353,"title":{},"body":{"injectables/AuthService.html":{},"modules/UserModule.html":{}}}],["userdto",{"_index":228,"title":{"classes/UserDTO.html":{}},"body":{"classes/AuthLogin.html":{},"interfaces/AuthRequest.html":{},"interfaces/AuthRequest-1.html":{},"classes/AuthSignup.html":{},"controllers/CoreController.html":{},"injectables/CoreService.html":{},"classes/EditUser.html":{},"classes/Phnum.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["userid",{"_index":362,"title":{},"body":{"injectables/AuthService.html":{}}}],["userinfo",{"_index":328,"title":{},"body":{"interfaces/AuthRequest-1.html":{},"controllers/UserController.html":{}}}],["usermodule",{"_index":52,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":226,"title":{},"body":{"classes/AuthLogin.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"classes/Phnum.html":{},"classes/UserDTO.html":{}}}],["users",{"_index":869,"title":{},"body":{"index.html":{}}}],["userservice",{"_index":332,"title":{"injectables/UserService.html":{}},"body":{"interfaces/AuthRequest-1.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userupdate",{"_index":474,"title":{},"body":{"injectables/AuthService.html":{}}}],["userverifed",{"_index":477,"title":{},"body":{"injectables/AuthService.html":{}}}],["uses",{"_index":662,"title":{},"body":{"injectables/OtpService.html":{}}}],["using",{"_index":397,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["valid",{"_index":343,"title":{},"body":{"interfaces/AuthRequest-1.html":{},"controllers/UserController.html":{}}}],["validate",{"_index":593,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/MuttateDto.html":{},"classes/QueryDto.html":{},"interfaces/QueryReturn.html":{}}}],["validate(payload",{"_index":596,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateif",{"_index":644,"title":{},"body":{"classes/MuttateDto.html":{},"classes/QueryDto.html":{},"interfaces/QueryReturn.html":{}}}],["validateif((obj",{"_index":649,"title":{},"body":{"classes/MuttateDto.html":{},"classes/QueryDto.html":{},"interfaces/QueryReturn.html":{}}}],["validateif(obj",{"_index":710,"title":{},"body":{"classes/QueryDto.html":{}}}],["validator",{"_index":221,"title":{},"body":{"classes/AuthLogin.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"classes/MuttateDto.html":{},"classes/Phnum.html":{},"classes/QueryDto.html":{},"interfaces/QueryReturn.html":{},"classes/UserDTO.html":{},"dependencies.html":{}}}],["value",{"_index":807,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["values",{"_index":358,"title":{},"body":{"injectables/AuthService.html":{}}}],["verfied",{"_index":233,"title":{},"body":{"classes/AuthLogin.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"injectables/OtpService.html":{},"classes/Phnum.html":{},"classes/UserDTO.html":{}}}],["verfies",{"_index":412,"title":{},"body":{"injectables/AuthService.html":{}}}],["verfifying",{"_index":393,"title":{},"body":{"injectables/AuthService.html":{}}}],["verified",{"_index":322,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/CoreController.html":{}}}],["verify",{"_index":410,"title":{},"body":{"injectables/AuthService.html":{}}}],["verifylogic",{"_index":370,"title":{},"body":{"injectables/AuthService.html":{}}}],["verifylogic(otp",{"_index":408,"title":{},"body":{"injectables/AuthService.html":{}}}],["verifyotp",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{}}}],["verifyotp(otp",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{}}}],["version",{"_index":399,"title":{},"body":{"injectables/AuthService.html":{},"properties.html":{}}}],["via",{"_index":847,"title":{},"body":{"index.html":{}}}],["view",{"_index":912,"title":{},"body":{"index.html":{}}}],["void",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"injectables/LogRequest.html":{}}}],["welcome_msg",{"_index":30,"title":{},"body":{"controllers/AppController.html":{}}}],["well",{"_index":838,"title":{},"body":{"index.html":{}}}],["work",{"_index":872,"title":{},"body":{"index.html":{}}}],["works",{"_index":840,"title":{},"body":{"index.html":{}}}],["write",{"_index":918,"title":{},"body":{"index.html":{}}}],["yarn",{"_index":834,"title":{},"body":{"index.html":{}}}],["yes",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{}}}],["z0",{"_index":570,"title":{},"body":{"injectables/CoreService.html":{}}}],["za",{"_index":567,"title":{},"body":{"injectables/CoreService.html":{}}}],["zoom",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CoreModule.html":{},"modules/OtpModule.html":{},"modules/PrismaModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/app.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /\n            \n\n\n            \n                Description\n            \n            \n                Default Route\n/ - uptime testing\n/docs - documentation Link\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                basicRoute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        basicRoute\n                        \n                    \n                \n            \n            \n                \nbasicRoute()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app/app.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         object\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\n\n/**\n * Default Route\n * / - uptime testing\n * /docs - documentation Link\n */\n@Controller('/')\nexport class AppController {\n  @Get()\n  basicRoute(): object {\n    return {\n      welcome_msg:\n        'GOOD Now struggle and figure out rest reading my /docs page ',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCoreModule\n\nCoreModule\n\nAppModule -->\n\nCoreModule->AppModule\n\n\n\n\n\nOtpModule\n\nOtpModule\n\nAppModule -->\n\nOtpModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Root Of the APP with request logging middleware implemented\n @alias ServeStaticModule used for serving this docs over (docs)[/docs] Documentation is generated in documentation file\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CoreModule\n                        \n                        \n                            OtpModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:60\n                \n            \n\n\n            \n                \n                    Configuring the middleware for routes\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import {\n  CacheModule,\n  MiddlewareConsumer,\n  Module,\n  NestModule,\n} from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { AuthModule } from './auth/auth.module';\nimport { LogRequest } from './middleware';\nimport { PrismaService } from './prisma/prisma.service';\nimport { PrismaModule } from './prisma/prisma.module';\nimport { UserModule } from './user/user.module';\nimport { OtpModule } from './otp/otp.module';\nimport * as ReddiStore from 'cache-manager-redis-store';\nimport { OtpService } from './otp/otp.service';\nimport { AppController } from './app/app.controller';\nimport { AppService } from './app/app.service';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { join } from 'path';\nimport { CoreModule } from './core/core.module';\n\n/**\n * Root Of the APP with request logging middleware implemented\n *  @alias ServeStaticModule used for serving this docs over (docs)[/docs] Documentation is generated in `documentation` file\n * @alias ConfigModule usedas Configservice to retrieve env elements\n * @alias CacheModule used to init reddis cache store with ttl 1200 `20min`\n */\n@Module({\n  imports: [\n    ServeStaticModule.forRoot({\n      rootPath: join(__dirname, '..', 'documentation'),\n      serveRoot: '/docs', // this will serve your files on /docs route\n    }),\n\n    ConfigModule.forRoot({\n      isGlobal: true,\n    }),\n    CacheModule.register({\n      store: ReddiStore,\n      password: 'qmvXege8CV0xSmddlkgEZlo4u3b9rWwJ',\n      host: 'redis-18258.c305.ap-south-1-1.ec2.cloud.redislabs.com',\n      port: 18258,\n      isGlobal: true,\n      ttl: 1200,\n    }),\n    AuthModule,\n    PrismaModule,\n    UserModule,\n    OtpModule,\n    CoreModule,\n  ],\n  providers: [PrismaService, AppService],\n  controllers: [AppController],\n})\nexport class AppModule implements NestModule {\n  /**\n   * Configuring the middleware for routes\n   * @alias LogRequest middleware logs type of request and route\n   */\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(LogRequest).forRoutes('*');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/app.service.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n            \n                Description\n            \n            \n                Controller to take all requests and send responses\nPrefix --> /auth\nRoutes available [NO JWT PASS REQUIRED]\n\n/Signup\n/Signin\n/requestOtp\n/verifyOTP\n/hehe\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ForgotPwd\n                            \n                            \n                                Login\n                            \n                            \n                                Signup\n                            \n                            \n                                test\n                            \n                            \n                                verifyOTP\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ForgotPwd\n                        \n                    \n                \n            \n            \n                \nForgotPwd(body: Phnum)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/requestOtp')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                Phnum\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Login\n                        \n                    \n                \n            \n            \n                \nLogin(body: AuthLogin)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/Signin')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                AuthLogin\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Signup\n                        \n                    \n                \n            \n            \n                \nSignup(body: AuthSignup)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/Signup')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                AuthSignup\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        JWT\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        test\n                        \n                    \n                \n            \n            \n                \ntest(email?: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/hehe')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:69\n                \n            \n\n\n            \n                \n                    Sample Testing Route\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verifyOTP\n                        \n                    \n                \n            \n            \n                \nverifyOTP(OTP: number, email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/verifyOTP')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    OTP\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Get, Body } from '@nestjs/common';\nimport { AuthLogin, AuthSignup, Phnum } from 'src/Typings';\nimport { AuthService } from './auth.service';\n\n/**\n * Controller to take all requests and send responses\n * Prefix --> /auth\n *\n * Routes available [NO JWT PASS REQUIRED]\n * - /Signup\n * - /Signin\n * - /requestOtp\n * - /verifyOTP\n * - /hehe\n */\n@Controller('auth')\nexport class AuthController {\n  constructor(private AuthService: AuthService) {}\n\n  /**\n   *\n   * @param body @type {AuthSignup} send body of this format\n   * @returns JWT\n   */\n  @Post('/Signup')\n  Signup(@Body() body: AuthSignup): Promise {\n    return this.AuthService.signupLogic(body);\n  }\n\n  /**\n   *\n   * @param body @type {AuthLogin}\n   * @returns\n   */\n  @Post('/Signin')\n  Login(@Body() body: AuthLogin): Promise {\n    return this.AuthService.loginLogic(body);\n  }\n\n  /**\n   *\n   * @param body @type {Phnum}\n   * @returns\n   */\n  @Post('/requestOtp')\n  ForgotPwd(@Body() body: Phnum): Promise {\n    console.log(body.phnum);\n    return this.AuthService.forgotpasswordLogic(body.phnum);\n  }\n\n  /**\n   *\n   * @param OTP @type {number}\n   * @param phnum @type {Phnum}\n   * @returns\n   */\n  @Post('/verifyOTP')\n  verifyOTP(\n    @Body('OTP') OTP: number,\n    @Body('phnum') email: string,\n  ): Promise {\n    return this.AuthService.verifyLogic(OTP, email);\n  }\n\n  /**\n   * Sample Testing Route\n   */\n  @Get('/hehe')\n  test(@Body('email') email?: string): string {\n    return 'hehe';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthLogin.html":{"url":"classes/AuthLogin.html","title":"class - AuthLogin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthLogin\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Typings/auth.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                phnum\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Typings/auth.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phnum\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsPhoneNumber('IN')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Typings/auth.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsBoolean,\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsPhoneNumber,\n  IsString,\n} from 'class-validator';\n\nexport class AuthLogin {\n  @IsNotEmpty()\n  @IsPhoneNumber('IN')\n  phnum: string;\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n}\nexport class AuthSignup extends AuthLogin {\n  constructor() {\n    super();\n  }\n  @IsString()\n  @IsNotEmpty()\n  username: string;\n}\n\nexport class EditUser {\n  @IsOptional()\n  @IsPhoneNumber('IN')\n  phnum: string;\n  @IsString()\n  @IsOptional()\n  password: string;\n  @IsString()\n  @IsOptional()\n  username: string;\n}\n\nexport class Phnum {\n  @IsNotEmpty()\n  @IsPhoneNumber('IN')\n  phnum: string;\n}\n\nexport class UserDTO {\n  id: number;\n  CreatedAt: string;\n  UpdatedAt: string;\n  phonenum: string;\n  username: string;\n  verfied: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nOtpModule\n\nOtpModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nOtpModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Module is where we define all dependecies and relationships for nestjs application graph\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            OtpModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { JwtModule } from '@nestjs/jwt';\nimport { JwtStrategy } from './JwtStrategy';\nimport { OtpModule } from 'src/otp/otp.module';\n\n/**\n * Module is where we define all dependecies and relationships for nestjs application graph\n */\n@Module({\n  /**\n   * things that have to be injected into controllers\n   */\n  providers: [AuthService, JwtStrategy],\n\n  // the controllers in this module\n  controllers: [AuthController],\n\n  // Modules required for this module\n  imports: [JwtModule.register({}), OtpModule],\n\n  // the subset of providers that are provided by this module and should be available in other modules which import this module.\n  exports: [],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthRequest.html":{"url":"interfaces/AuthRequest.html","title":"interface - AuthRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AuthRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/core.controller.ts\n        \n\n\n            \n                Description\n            \n            \n                core has two Routes for both SMS and Mobile\n\ncore/query  - call it before every call or sms in coming to predict it as fraud or spam or normal\ncore/muttate - call it for update or report a sms or number\n\nquery rout must be called before incomming call or incoming msg which returns is a msg/sms is spam or ham or fraud and also related context\n\n            \n\n            \n                Extends\n            \n            \n                    Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         UserDTO\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UserDTO\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Body, Controller, Post, Req, UseGuards } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { UserDTO } from 'src/Typings';\nimport { CoreService } from './core.service';\nimport { ItemType, MuttateDto, QueryDto, QueryReturn, ReportType } from './dto';\n\n/**\n * core has two Routes for both SMS and Mobile\n * - core/query  - call it before every call or sms in coming to predict it as fraud or spam or normal\n * - core/muttate - call it for update or report a sms or number\n *\n * query rout must be called before incomming call or incoming msg which returns is a msg/sms is spam or ham or fraud and also related context\n *\n */\n\ninterface AuthRequest extends Request {\n  user: UserDTO; // Replace `any` with the actual type of the `user` property\n}\n\n@UseGuards(AuthGuard('jwt'))\n@Controller('core')\nexport class CoreController {\n  constructor(private coreService: CoreService) {}\n\n  /**\n   *\n   * @param req @type {AuthRequest}\n   * @param body @type {QueryDto}\n   * @returns @type {QueryReturn}\n   */\n  @Post('query')\n  QueryContext(\n    @Req() req: AuthRequest,\n    @Body() body: QueryDto,\n  ): Promise {\n    if (body.Type == ItemType.MobileNum) {\n      return this.coreService.handleMobile(body.Item);\n    } else {\n      return this.coreService.handleSms(body.Item, body.SmsContext);\n    }\n  }\n\n  /**\n   *\n   * @param req @type {AuthRequest}\n   * @param body @type {MuttateDto}\n   * @returns\n   */\n  @Post('mutate')\n  mutate(\n    @Req() req: AuthRequest,\n    @Body() body: MuttateDto,\n  ): Promise {\n    if (req.user.verfied === true) {\n      if (body.Type == ItemType.MobileNum) {\n        return this.coreService.mutateMobile(body.Item, body.Report, req.user);\n      } else {\n        return this.coreService.mutateSMS(\n          body.Item,\n          body.Context,\n          body.Report,\n          req.user,\n        );\n      }\n    } else {\n      return Promise.resolve({\n        Context: 'User Not verified Cant Make Changes',\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthRequest-1.html":{"url":"interfaces/AuthRequest-1.html","title":"interface - AuthRequest-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AuthRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n\n            \n                Description\n            \n            \n                Controller for User routs\n\nget UserInfo and Saved Posts\nChange Password or body\n\n\n            \n\n            \n                Extends\n            \n            \n                    Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         UserDTO\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UserDTO\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Body, Controller, Get, Post, Req, UseGuards } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { UserService } from './user.service';\nimport { Request } from 'express';\nimport { AuthSignup, EditUser, UserDTO } from 'src/Typings';\n\n/**\n * Controller for User routs\n * - get UserInfo and Saved Posts\n * - Change Password or body\n */\ninterface AuthRequest extends Request {\n  user: UserDTO; // Replace `any` with the actual type of the `user` property\n}\n\n@UseGuards(AuthGuard('jwt'))\n@Controller('user')\nexport class UserController {\n  constructor(private userService: UserService) {}\n  /**\n   *\n   * @param req @type {UserDTO} Incoming req GET route\n   * @returns {object} user payload\n   */\n  @Get('me')\n  MyData(@Req() req: Request): object {\n    return req.user;\n  }\n\n  /**\n   * pass update user object and feilds are optional there can be pw or not but need to pass valid JWT in header\n   * @param User @type {EditUser} edit user payload\n   * @param req @type {EditUser} Incoming req with JWT in header\n   * @returns\n   */\n  @Post('edit')\n  EditMyData(@Body() User: EditUser, @Req() req: AuthRequest) {\n    return this.userService.editUser(User, req.user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Controller For Auth related Jobs\n\nPrismaService for inserting and QUering UserData from Postgres\nConfig Servce for extracting Values [Jwt Secret] from .env\nJwtService for Signing Jwt with UserID\nCACHA_MANAGER for redis supprt to store OTP with ttl\n\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                forgotpasswordLogic\n                            \n                            \n                                    Async\n                                JwtSign\n                            \n                            \n                                    Async\n                                loginLogic\n                            \n                            \n                                    Async\n                                signupLogic\n                            \n                            \n                                    Async\n                                verifyLogic\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postgre: PrismaService, config: ConfigService, jwt: JwtService, cachemanager: Cache, otpsender: OtpService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:30\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postgre\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwt\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cachemanager\n                                                  \n                                                        \n                                                                    Cache\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        otpsender\n                                                  \n                                                        \n                                                                        OtpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        forgotpasswordLogic\n                        \n                    \n                \n            \n            \n                \n                    \n                    forgotpasswordLogic(phonenum: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:93\n                \n            \n\n\n            \n                \n                    Forgot PassWord Logic Generating Random OTP Followed By\nStoring it in Redis and Emailing the User His Otp\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    phonenum\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        JwtSign\n                        \n                    \n                \n            \n            \n                \n                    \n                    JwtSign(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:148\n                \n            \n\n\n            \n                \n                    Signing JWT with SecretKey with 15m expiry\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        loginLogic\n                        \n                    \n                \n            \n            \n                \n                    \n                    loginLogic(body: AuthLogin)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:70\n                \n            \n\n\n            \n                \n                    Finding User , Verfifying Password with Argon2 and signing Jwt\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                AuthLogin\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signupLogic\n                        \n                    \n                \n            \n            \n                \n                    \n                    signupLogic(body: AuthSignup)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:43\n                \n            \n\n\n            \n                \n                    Using argon2 a better version of SHA to Hash the passwords\nand Creating User Object all edge cases are handled by Prisma and Nestjs\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                AuthSignup\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        verifyLogic\n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyLogic(OTP: number, phonenum: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:116\n                \n            \n\n\n            \n                \n                    Verify Otp Logic Where OTP is retrieved From Redis and verfied\nreturns JWT and also verfies user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    OTP\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    phonenum\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  ForbiddenException,\n  Inject,\n  CACHE_MANAGER,\n} from '@nestjs/common';\nimport { AuthLogin, AuthSignup } from 'src/Typings';\nimport * as argon from 'argon2';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { Cache } from 'cache-manager';\nimport {\n  HttpException,\n  InternalServerErrorException,\n} from '@nestjs/common/exceptions';\nimport { HttpStatus } from '@nestjs/common/enums';\nimport { OtpService } from 'src/otp/otp.service';\n// import { MailService } from 'src/mail/mail.service';\n\n/**\n * ### Controller For Auth related Jobs\n * @constructor construstor is initiated with 4 Services\n *  - PrismaService for inserting and QUering UserData from `Postgres`\n *  - Config Servce for extracting Values [Jwt Secret] from `.env`\n *  - JwtService for Signing `Jwt` with UserID\n *  - CACHA_MANAGER for redis supprt to store OTP with `ttl`\n */\n@Injectable()\nexport class AuthService {\n  constructor(\n    private postgre: PrismaService,\n    private config: ConfigService,\n    private jwt: JwtService,\n    @Inject(CACHE_MANAGER) private cachemanager: Cache, //\n    private otpsender: OtpService,\n  ) {}\n\n  /**\n   * Using argon2 a better version of SHA to Hash the passwords\n   * and Creating User Object all edge cases are handled by Prisma and Nestjs\n   */\n  async signupLogic(body: AuthSignup): Promise {\n    const hash = await argon.hash(body.password);\n    try {\n      const user = await this.postgre.usertable.create({\n        data: {\n          phnum: body.phnum,\n          password: hash,\n          username: body.username,\n        },\n      });\n      return {\n        Jwt: await this.JwtSign(user.id),\n      };\n    } catch (error) {\n      console.log('here', error.code);\n\n      if (error.code == 'P2002') {\n        throw new ForbiddenException('Credentials Already Taken');\n      } else {\n        throw new HttpException(error, HttpStatus.FORBIDDEN);\n      }\n    }\n  }\n\n  /**\n   * Finding User , Verfifying Password with Argon2 and signing Jwt\n   */\n  async loginLogic(body: AuthLogin): Promise {\n    const { phnum, password } = body;\n\n    const user = await this.postgre.usertable.findUnique({\n      where: {\n        phnum: phnum,\n      },\n    });\n    if (!user) {\n      throw new ForbiddenException('Credentials incorrect');\n    }\n    const pwMatches = await argon.verify(user.password, password);\n    if (!pwMatches) throw new ForbiddenException('Credentials incorrect');\n\n    return {\n      Jwt: await this.JwtSign(user.id),\n    };\n  }\n\n  /**\n   * Forgot PassWord Logic Generating Random OTP Followed By\n   * Storing it in Redis and Emailing the User His Otp\n   */\n  async forgotpasswordLogic(phonenum: string): Promise {\n    console.log(phonenum);\n    const user = await this.postgre.usertable.findUnique({\n      where: {\n        phnum: phonenum,\n      },\n    });\n    if (!user) {\n      throw new ForbiddenException('Credentials incorrect');\n    }\n    const OTP = Math.floor(Math.random() * 1000000);\n    await this.cachemanager.set(phonenum, OTP);\n    // await this.mailService.sendUserConfirmation(OTP, email);\n    const resp = await this.otpsender.sendotp(OTP, '+91' + phonenum);\n    if (!resp)\n      throw new InternalServerErrorException('Failed to execute request');\n    return { message: 'done' };\n  }\n\n  /**\n   * Verify Otp Logic Where OTP is retrieved From Redis and verfied\n   * returns JWT and also verfies user\n   */\n  async verifyLogic(OTP: number, phonenum: string): Promise {\n    const cacheotp = await this.cachemanager.get(phonenum);\n    if (!cacheotp) {\n      throw new ForbiddenException('Session Expired or Not created');\n    }\n    if (OTP == cacheotp) {\n      const user = await this.postgre.usertable.findUnique({\n        where: {\n          phnum: phonenum,\n        },\n      });\n      const userUpdate = await this.postgre.usertable.update({\n        where: {\n          id: user.id,\n        },\n        data: {\n          ...user,\n          userverifed: true,\n        },\n      });\n      await this.cachemanager.del(phonenum);\n      return {\n        Jwt: await this.JwtSign(user.id),\n      };\n    } else {\n      throw new ForbiddenException('Wrong Otp Enterred');\n    }\n  }\n\n  /**\n   * Signing JWT with SecretKey with `15m` expiry\n   */\n  async JwtSign(userId: number): Promise {\n    const payload = {\n      sub: userId,\n    };\n    const secret = this.config.get('JWT_SECRET');\n    const token = await this.jwt.signAsync(payload, {\n      expiresIn: '1d',\n      secret: secret,\n    });\n    return token;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthSignup.html":{"url":"classes/AuthSignup.html","title":"class - AuthSignup","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthSignup\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Typings/auth.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthLogin\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                username\n                            \n                            \n                                password\n                            \n                            \n                                phnum\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/Typings/auth.ts:18\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Typings/auth.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         AuthLogin\n\n                            \n                        \n                    \n                        \n                                Defined in         AuthLogin:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phnum\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsPhoneNumber('IN')\n                        \n                    \n                \n                        \n                            \n                                Inherited from         AuthLogin\n\n                            \n                        \n                    \n                        \n                                Defined in         AuthLogin:13\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsBoolean,\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsPhoneNumber,\n  IsString,\n} from 'class-validator';\n\nexport class AuthLogin {\n  @IsNotEmpty()\n  @IsPhoneNumber('IN')\n  phnum: string;\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n}\nexport class AuthSignup extends AuthLogin {\n  constructor() {\n    super();\n  }\n  @IsString()\n  @IsNotEmpty()\n  username: string;\n}\n\nexport class EditUser {\n  @IsOptional()\n  @IsPhoneNumber('IN')\n  phnum: string;\n  @IsString()\n  @IsOptional()\n  password: string;\n  @IsString()\n  @IsOptional()\n  username: string;\n}\n\nexport class Phnum {\n  @IsNotEmpty()\n  @IsPhoneNumber('IN')\n  phnum: string;\n}\n\nexport class UserDTO {\n  id: number;\n  CreatedAt: string;\n  UpdatedAt: string;\n  phonenum: string;\n  username: string;\n  verfied: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CoreController.html":{"url":"controllers/CoreController.html","title":"controller - CoreController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CoreController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/core.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                core\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                mutate\n                            \n                            \n                                QueryContext\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        mutate\n                        \n                    \n                \n            \n            \n                \nmutate(req: AuthRequest, body: MuttateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('mutate')\n                \n            \n\n            \n                \n                    Defined in src/core/core.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                AuthRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                MuttateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        QueryContext\n                        \n                    \n                \n            \n            \n                \nQueryContext(req: AuthRequest, body: QueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('query')\n                \n            \n\n            \n                \n                    Defined in src/core/core.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                AuthRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                QueryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, Req, UseGuards } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { UserDTO } from 'src/Typings';\nimport { CoreService } from './core.service';\nimport { ItemType, MuttateDto, QueryDto, QueryReturn, ReportType } from './dto';\n\n/**\n * core has two Routes for both SMS and Mobile\n * - core/query  - call it before every call or sms in coming to predict it as fraud or spam or normal\n * - core/muttate - call it for update or report a sms or number\n *\n * query rout must be called before incomming call or incoming msg which returns is a msg/sms is spam or ham or fraud and also related context\n *\n */\n\ninterface AuthRequest extends Request {\n  user: UserDTO; // Replace `any` with the actual type of the `user` property\n}\n\n@UseGuards(AuthGuard('jwt'))\n@Controller('core')\nexport class CoreController {\n  constructor(private coreService: CoreService) {}\n\n  /**\n   *\n   * @param req @type {AuthRequest}\n   * @param body @type {QueryDto}\n   * @returns @type {QueryReturn}\n   */\n  @Post('query')\n  QueryContext(\n    @Req() req: AuthRequest,\n    @Body() body: QueryDto,\n  ): Promise {\n    if (body.Type == ItemType.MobileNum) {\n      return this.coreService.handleMobile(body.Item);\n    } else {\n      return this.coreService.handleSms(body.Item, body.SmsContext);\n    }\n  }\n\n  /**\n   *\n   * @param req @type {AuthRequest}\n   * @param body @type {MuttateDto}\n   * @returns\n   */\n  @Post('mutate')\n  mutate(\n    @Req() req: AuthRequest,\n    @Body() body: MuttateDto,\n  ): Promise {\n    if (req.user.verfied === true) {\n      if (body.Type == ItemType.MobileNum) {\n        return this.coreService.mutateMobile(body.Item, body.Report, req.user);\n      } else {\n        return this.coreService.mutateSMS(\n          body.Item,\n          body.Context,\n          body.Report,\n          req.user,\n        );\n      }\n    } else {\n      return Promise.resolve({\n        Context: 'User Not verified Cant Make Changes',\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CoreModule.html":{"url":"modules/CoreModule.html","title":"module - CoreModule","body":"\n                   \n\n\n\n\n    Modules\n    CoreModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CoreModule\n\n\n\ncluster_CoreModule_providers\n\n\n\n\nCoreService\n\nCoreService\n\n\n\nCoreModule\n\nCoreModule\n\nCoreModule -->\n\nCoreService->CoreModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/core.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            MODULE to take care of query and muation of backed aspect\n\ncore/query  - call it before every call or sms in coming to predict it as fraud or spam or normal\ncore/muttate - call it for update or report a sms or number\n\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CoreService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CoreController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CoreController } from './core.controller';\nimport { CoreService } from './core.service';\n\n/**\n * MODULE to take care of query and muation of backed aspect\n * - core/query  - call it before every call or sms in coming to predict it as fraud or spam or normal\n * - core/muttate - call it for update or report a sms or number\n */\n@Module({\n  controllers: [CoreController],\n  providers: [CoreService],\n})\nexport class CoreModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CoreService.html":{"url":"injectables/CoreService.html","title":"injectable - CoreService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CoreService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/core.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                handleMobile\n                            \n                            \n                                    Async\n                                handleSms\n                            \n                            \n                                    Async\n                                mutateMobile\n                            \n                            \n                                    Async\n                                mutateSMS\n                            \n                            \n                                    Async\n                                RunNlp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postgre: PrismaService, config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/core/core.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postgre\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleMobile\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleMobile(phnum: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/core.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    phnum\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleSms\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleSms(header: string, Context: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/core.service.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    header\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    Context\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        mutateMobile\n                        \n                    \n                \n            \n            \n                \n                    \n                    mutateMobile(phnum: string, type: ReportType, user: UserDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/core/core.service.ts:187\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    phnum\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    type\n                                    \n                                                ReportType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        mutateSMS\n                        \n                    \n                \n            \n            \n                \n                    \n                    mutateSMS(Sms: string, Context: string, type: ReportType, user: UserDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/core/core.service.ts:239\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    Sms\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    Context\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    type\n                                    \n                                                ReportType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        RunNlp\n                        \n                    \n                \n            \n            \n                \n                    \n                    RunNlp(Context: string, matches: Array)\n                \n            \n\n\n            \n                \n                    Defined in src/core/core.service.ts:17\n                \n            \n\n\n            \n                \n                    Takes input as mobile num checks it in predb and\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    Context\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    matches\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { items } from '@prisma/client';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { UserDTO } from 'src/Typings';\nimport { ItemType, QueryReturn, ReportType } from './dto';\n\n@Injectable()\nexport class CoreService {\n  constructor(private postgre: PrismaService, private config: ConfigService) {}\n  /**\n   * Takes input as mobile num checks it in predb and\n   *\n   * @param phnum @type {string}\n   * @returns {QueryReturn}\n   */\n  async RunNlp(Context: string, matches: Array): Promise {\n    const options = [ReportType.Fraud, ReportType.Normal, ReportType.Spam];\n    const randomIndex = Math.floor(Math.random() * options.length);\n    return options[randomIndex];\n  }\n\n  async handleMobile(phnum: string): Promise {\n    const report = await this.postgre.predb.findUnique({\n      where: {\n        item: phnum,\n      },\n    });\n    if (report) {\n      const type =\n        report.casetype == 'Spam' ? ReportType.Spam : ReportType.Fraud;\n      return {\n        Type: type,\n        Context: report.context,\n      };\n    } else {\n      const item = await this.postgre.items.findUnique({\n        where: {\n          item: phnum,\n        },\n        include: {\n          fraudnums: {\n            select: {\n              id: true,\n            },\n          },\n          spamreport: {\n            select: {\n              id: true,\n            },\n          },\n        },\n      });\n      if (item) {\n        await this.postgre.items.update({\n          where: {\n            id: item.id,\n          },\n          data: {\n            interactions: item.interactions + 1,\n          },\n        });\n        const reports = item.fraudnums.length + item.spamreport.length;\n        if (reports / item.interactions > 0.05 && item.interactions > 10) {\n          const type =\n            item.fraudnums.length > item.spamreport.length\n              ? ReportType.Fraud\n              : ReportType.Spam;\n          return {\n            Type: type,\n          };\n        } else {\n          return {\n            Type: ReportType.Normal,\n          };\n        }\n      } else {\n        const createitem = await this.postgre.items.create({\n          data: {\n            interactions: 1,\n            type: 'Mobile',\n            item: phnum,\n          },\n        });\n        return {\n          Type: ReportType.Normal,\n          Context: 'New Item Created',\n        };\n      }\n    }\n  }\n\n  async handleSms(header: string, Context: string): Promise {\n    const report = await this.postgre.predb.findUnique({\n      where: {\n        item: header,\n      },\n    });\n    /**\n     * regex differentiation\n     * search regex\n     * context NLP prediction\n     * regex addition to db\n     *\n     */\n    const regex =\n      /(\\b[13][a-km-zA-HJ-NP-Z0-9]{25,34}\\b)|(\\b[6-9]\\d{9}\\b)|(\\b(?:[a-zA-Z0-9._%+-]+@(?:apl|abfspay|fbl|idfcbank|okaxis|okicici|axisbank|icici|yesbank|ibl|ybl))\\b)|(\\b(?:https?:\\/\\/|www\\.)\\S+\\b)/g;\n\n    const matches = Context.match(regex);\n    if (report) {\n      const type =\n        report.casetype == 'Spam' ? ReportType.Spam : ReportType.Fraud;\n      return {\n        Type: type,\n        Context: report.context,\n      };\n    } else {\n      if (matches.length > 0) {\n        for (const item of matches) {\n          const report = await this.postgre.predb.findUnique({\n            where: {\n              item: item,\n            },\n          });\n          if (report) {\n            const type =\n              report.casetype == 'Spam' ? ReportType.Spam : ReportType.Fraud;\n            return {\n              Type: type,\n              Context: report.context,\n            };\n          }\n        }\n      }\n      const item = await this.postgre.items.findUnique({\n        where: {\n          item: header,\n        },\n        include: {\n          fraudnums: {\n            select: {\n              id: true,\n            },\n          },\n          spamreport: {\n            select: {\n              id: true,\n            },\n          },\n        },\n      });\n      if (item) {\n        await this.postgre.items.update({\n          where: {\n            id: item.id,\n          },\n          data: {\n            interactions: item.interactions + 1,\n          },\n        });\n        const reports = item.fraudnums.length + item.spamreport.length;\n        if (reports / item.interactions > 0.05 && item.interactions > 10) {\n          const type =\n            item.fraudnums.length > item.spamreport.length\n              ? ReportType.Fraud\n              : ReportType.Spam;\n          return {\n            Type: type,\n          };\n        }\n      }\n      const createitem = await this.postgre.items.create({\n        data: {\n          interactions: 1,\n          type: 'Sms',\n          item: header,\n        },\n      });\n      const type = await this.RunNlp(Context, matches);\n      return {\n        Type: type,\n        Context: `This Subjected SMS is suspected to be ${type}`,\n      };\n    }\n  }\n\n  async mutateMobile(\n    phnum: string,\n    type: ReportType,\n    user: UserDTO,\n  ): Promise {\n    let item: items;\n    item = await this.postgre.items.findUnique({\n      where: {\n        item: phnum,\n      },\n    });\n    if (!item) {\n      item = await this.postgre.items.create({\n        data: {\n          interactions: 1,\n          type: 'Mobile',\n          item: phnum,\n        },\n      });\n    }\n    if (type == ReportType.Spam) {\n      await this.postgre.usertable.update({\n        where: {\n          id: user.id,\n        },\n        data: {\n          reportedSpamNums: {\n            connect: {\n              id: item.id,\n            },\n          },\n        },\n      });\n    } else {\n      await this.postgre.usertable.update({\n        where: {\n          id: user.id,\n        },\n        data: {\n          reportedFraudNums: {\n            connect: {\n              id: item.id,\n            },\n          },\n        },\n      });\n    }\n    return {\n      Context: 'Changes Made',\n    };\n  }\n\n  async mutateSMS(\n    Sms: string,\n    Context: string,\n    type: ReportType,\n    user: UserDTO,\n  ) {\n    let item: items;\n    item = await this.postgre.items.findUnique({\n      where: {\n        item: Sms,\n      },\n    });\n    if (!item) {\n      item = await this.postgre.items.create({\n        data: {\n          interactions: 1,\n          type: 'Mobile',\n          item: Sms,\n        },\n      });\n    }\n    if (type == ReportType.Spam) {\n      await this.postgre.usertable.update({\n        where: {\n          id: user.id,\n        },\n        data: {\n          reportedSpamNums: {\n            connect: {\n              id: item.id,\n            },\n          },\n        },\n      });\n    } else {\n      await this.postgre.usertable.update({\n        where: {\n          id: user.id,\n        },\n        data: {\n          reportedFraudNums: {\n            connect: {\n              id: item.id,\n            },\n          },\n        },\n      });\n    }\n    return {\n      Context: 'Changes Made',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EditUser.html":{"url":"classes/EditUser.html","title":"class - EditUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EditUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Typings/auth.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                phnum\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Typings/auth.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phnum\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPhoneNumber('IN')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Typings/auth.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Typings/auth.ts:36\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsBoolean,\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsPhoneNumber,\n  IsString,\n} from 'class-validator';\n\nexport class AuthLogin {\n  @IsNotEmpty()\n  @IsPhoneNumber('IN')\n  phnum: string;\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n}\nexport class AuthSignup extends AuthLogin {\n  constructor() {\n    super();\n  }\n  @IsString()\n  @IsNotEmpty()\n  username: string;\n}\n\nexport class EditUser {\n  @IsOptional()\n  @IsPhoneNumber('IN')\n  phnum: string;\n  @IsString()\n  @IsOptional()\n  password: string;\n  @IsString()\n  @IsOptional()\n  username: string;\n}\n\nexport class Phnum {\n  @IsNotEmpty()\n  @IsPhoneNumber('IN')\n  phnum: string;\n}\n\nexport class UserDTO {\n  id: number;\n  CreatedAt: string;\n  UpdatedAt: string;\n  phonenum: string;\n  username: string;\n  verfied: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/JwtStrategy.ts\n        \n\n\n            \n                Description\n            \n            \n                JWT strategy exported to other classes\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService, prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/JwtStrategy.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/JwtStrategy.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PrismaService } from 'src/prisma/prisma.service';\n\n/**\n * JWT strategy exported to other classes\n */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(config: ConfigService, private prisma: PrismaService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: config.get('JWT_SECRET'),\n    });\n  }\n\n  async validate(payload: { sub: number }) {\n    const user = await this.prisma.usertable.findUnique({\n      where: {\n        id: payload.sub,\n      },\n    });\n    delete user.password;\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LogRequest.html":{"url":"injectables/LogRequest.html","title":"injectable - LogRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LogRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/middleware/requestLog.ts\n        \n\n\n            \n                Description\n            \n            \n                This is a Middleware is designed to log the incomming requests for debugging and analysis\nMETHOD + ROUTE\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/middleware/requestLog.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { NextFunction, Request, Response } from 'express';\n\n/**\n * This is a Middleware is designed to log the incomming requests for debugging and analysis\n * METHOD + ROUTE\n */\n@Injectable()\nexport class LogRequest implements NestMiddleware {\n  use(req: Request, res: Response, next: NextFunction) {\n    const { baseUrl, headers, method, originalUrl } = req;\n    console.log(`\"${originalUrl}\" - METHOD ${method}`);\n\n    // with headers ${JSON.stringify(\n    //   headers,\n    // )}\n\n    res.on('close', () => {\n      // const respSent = res;\n      // console.log(res, 'lets try');\n    });\n\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MuttateDto.html":{"url":"classes/MuttateDto.html","title":"class - MuttateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MuttateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/dto/index.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                Context\n                            \n                            \n                                Item\n                            \n                            \n                                Report\n                            \n                            \n                                Type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        Context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/dto/index.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Item\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/dto/index.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Report\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ReportType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@IsEnum(ItemType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/dto/index.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ItemType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsEnum(ItemType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/dto/index.ts:47\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport {\n  IsEnum,\n  IsNotEmpty,\n  IsString,\n  validate,\n  ValidateIf,\n} from 'class-validator';\n\nexport enum ItemType {\n  MobileNum = 'MobileNum',\n  SmsHeader = 'SmsHeader',\n}\nexport class QueryDto {\n  @IsString()\n  @IsNotEmpty()\n  Item: string;\n\n  @IsString()\n  @IsEnum(ItemType)\n  Type: ItemType;\n\n  @ValidateIf((obj: QueryDto) => obj.Type === ItemType.SmsHeader)\n  @IsNotEmpty()\n  @IsString()\n  SmsContext: string;\n}\n\nexport enum ReportType {\n  Normal = 'Normal',\n  Spam = 'Spam',\n  Fraud = 'Fraud',\n}\nexport interface QueryReturn {\n  Type: ReportType;\n  Context?: string;\n}\n\nexport class MuttateDto {\n  @IsString()\n  @IsNotEmpty()\n  Item: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @IsEnum(ItemType)\n  Type: ItemType;\n\n  @IsNotEmpty()\n  @IsString()\n  @IsEnum(ItemType)\n  Report: ReportType;\n\n  @IsNotEmpty()\n  @IsString()\n  Context: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OtpModule.html":{"url":"modules/OtpModule.html","title":"module - OtpModule","body":"\n                   \n\n\n\n\n    Modules\n    OtpModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_OtpModule\n\n\n\ncluster_OtpModule_exports\n\n\n\ncluster_OtpModule_providers\n\n\n\n\nOtpService \n\nOtpService \n\n\n\nOtpModule\n\nOtpModule\n\nOtpService  -->\n\nOtpModule->OtpService \n\n\n\n\n\nOtpService\n\nOtpService\n\nOtpModule -->\n\nOtpService->OtpModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/otp/otp.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            OTP service for other modules to inject and use\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            OtpService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            OtpService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { Global } from '@nestjs/common/decorators';\nimport { OtpService } from './otp.service';\n\n/**\n *OTP service for other modules to inject and use\n */\n@Global()\n@Module({\n  providers: [OtpService],\n  exports: [OtpService],\n})\nexport class OtpModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OtpService.html":{"url":"injectables/OtpService.html","title":"injectable - OtpService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OtpService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/otp/otp.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Uses twillio underneath to Send OTP to verfied mobile Numbers\nreturns Boolean\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                twilioClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendotp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/otp/otp.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendotp\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendotp(OTP: number, phnum: string)\n                \n            \n\n\n            \n                \n                    Defined in src/otp/otp.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    OTP\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    phnum\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        twilioClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Twilio\n\n                    \n                \n                    \n                        \n                                Defined in src/otp/otp.service.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Twilio } from 'twilio';\n\n/**\n * Uses twillio underneath to Send OTP to verfied mobile Numbers\n * returns Boolean\n */\n@Injectable()\nexport class OtpService {\n  private twilioClient: Twilio;\n\n  constructor(private readonly configService: ConfigService) {\n    const accountSid = configService.get('TWILIO_ACCOUNT_SID');\n    const authToken = configService.get('TWILIO_AUTH_TOKEN');\n    this.twilioClient = new Twilio(accountSid, authToken);\n  }\n  async sendotp(OTP: number, phnum: string): Promise {\n    const smsSent = await this.twilioClient.messages.create({\n      to: phnum,\n      body: `Heyy here is your crimeapp otp ${OTP}`,\n      from: this.configService.get('TWILIO_PHONE_NUM'),\n    });\n    return !!smsSent.sid;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Phnum.html":{"url":"classes/Phnum.html","title":"class - Phnum","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Phnum\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Typings/auth.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                phnum\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        phnum\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsPhoneNumber('IN')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Typings/auth.ts:42\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsBoolean,\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsPhoneNumber,\n  IsString,\n} from 'class-validator';\n\nexport class AuthLogin {\n  @IsNotEmpty()\n  @IsPhoneNumber('IN')\n  phnum: string;\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n}\nexport class AuthSignup extends AuthLogin {\n  constructor() {\n    super();\n  }\n  @IsString()\n  @IsNotEmpty()\n  username: string;\n}\n\nexport class EditUser {\n  @IsOptional()\n  @IsPhoneNumber('IN')\n  phnum: string;\n  @IsString()\n  @IsOptional()\n  password: string;\n  @IsString()\n  @IsOptional()\n  username: string;\n}\n\nexport class Phnum {\n  @IsNotEmpty()\n  @IsPhoneNumber('IN')\n  phnum: string;\n}\n\nexport class UserDTO {\n  id: number;\n  CreatedAt: string;\n  UpdatedAt: string;\n  phonenum: string;\n  username: string;\n  verfied: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_PrismaModule_exports\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/prisma/prisma.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Module for initiating Prisma-Postgres Connection\nand exporting Prisma Service globally for it to get injected in all modules\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\n\n/**\n * Module for initiating Prisma-Postgres Connection\n * and exporting Prisma Service globally for it to get injected in all modules\n */\n@Global()\n@Module({\n  providers: [PrismaService],\n  exports: [PrismaService],\n})\nexport class PrismaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma/prisma.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Implementing PrismaClient\nconfigure prisma client and coonect  it on module init\n\n            \n\n            \n                Extends\n            \n            \n                    PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/prisma/prisma.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/prisma/prisma.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PrismaClient } from '@prisma/client';\n\n/**\n * Implementing PrismaClient\n * configure prisma client and coonect  it on module init\n */\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n  constructor(config: ConfigService) {\n    super({\n      datasources: {\n        db: {\n          url: config.get('DATABASE_URL'),\n        },\n      },\n    });\n  }\n  async onModuleInit() {\n    await this.$connect();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QueryDto.html":{"url":"classes/QueryDto.html","title":"class - QueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/dto/index.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                Item\n                            \n                            \n                                SmsContext\n                            \n                            \n                                Type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        Item\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/dto/index.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SmsContext\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateIf(obj => )@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/dto/index.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ItemType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsEnum(ItemType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/dto/index.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport {\n  IsEnum,\n  IsNotEmpty,\n  IsString,\n  validate,\n  ValidateIf,\n} from 'class-validator';\n\nexport enum ItemType {\n  MobileNum = 'MobileNum',\n  SmsHeader = 'SmsHeader',\n}\nexport class QueryDto {\n  @IsString()\n  @IsNotEmpty()\n  Item: string;\n\n  @IsString()\n  @IsEnum(ItemType)\n  Type: ItemType;\n\n  @ValidateIf((obj: QueryDto) => obj.Type === ItemType.SmsHeader)\n  @IsNotEmpty()\n  @IsString()\n  SmsContext: string;\n}\n\nexport enum ReportType {\n  Normal = 'Normal',\n  Spam = 'Spam',\n  Fraud = 'Fraud',\n}\nexport interface QueryReturn {\n  Type: ReportType;\n  Context?: string;\n}\n\nexport class MuttateDto {\n  @IsString()\n  @IsNotEmpty()\n  Item: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @IsEnum(ItemType)\n  Type: ItemType;\n\n  @IsNotEmpty()\n  @IsString()\n  @IsEnum(ItemType)\n  Report: ReportType;\n\n  @IsNotEmpty()\n  @IsString()\n  Context: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/QueryReturn.html":{"url":"interfaces/QueryReturn.html","title":"interface - QueryReturn","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  QueryReturn\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/dto/index.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            Context\n                                        \n                                \n                                \n                                        \n                                            Type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        Context\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Context:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Type:         ReportType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ReportType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport {\n  IsEnum,\n  IsNotEmpty,\n  IsString,\n  validate,\n  ValidateIf,\n} from 'class-validator';\n\nexport enum ItemType {\n  MobileNum = 'MobileNum',\n  SmsHeader = 'SmsHeader',\n}\nexport class QueryDto {\n  @IsString()\n  @IsNotEmpty()\n  Item: string;\n\n  @IsString()\n  @IsEnum(ItemType)\n  Type: ItemType;\n\n  @ValidateIf((obj: QueryDto) => obj.Type === ItemType.SmsHeader)\n  @IsNotEmpty()\n  @IsString()\n  SmsContext: string;\n}\n\nexport enum ReportType {\n  Normal = 'Normal',\n  Spam = 'Spam',\n  Fraud = 'Fraud',\n}\nexport interface QueryReturn {\n  Type: ReportType;\n  Context?: string;\n}\n\nexport class MuttateDto {\n  @IsString()\n  @IsNotEmpty()\n  Item: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @IsEnum(ItemType)\n  Type: ItemType;\n\n  @IsNotEmpty()\n  @IsString()\n  @IsEnum(ItemType)\n  Report: ReportType;\n\n  @IsNotEmpty()\n  @IsString()\n  Context: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                EditMyData\n                            \n                            \n                                MyData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        EditMyData\n                        \n                    \n                \n            \n            \n                \nEditMyData(User: EditUser, req: AuthRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('edit')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:37\n                \n            \n\n\n            \n                \n                    pass update user object and feilds are optional there can be pw or not but need to pass valid JWT in header\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    User\n                                    \n                                                EditUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                                AuthRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MyData\n                        \n                    \n                \n            \n            \n                \nMyData(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('me')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        user payload\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post, Req, UseGuards } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { UserService } from './user.service';\nimport { Request } from 'express';\nimport { AuthSignup, EditUser, UserDTO } from 'src/Typings';\n\n/**\n * Controller for User routs\n * - get UserInfo and Saved Posts\n * - Change Password or body\n */\ninterface AuthRequest extends Request {\n  user: UserDTO; // Replace `any` with the actual type of the `user` property\n}\n\n@UseGuards(AuthGuard('jwt'))\n@Controller('user')\nexport class UserController {\n  constructor(private userService: UserService) {}\n  /**\n   *\n   * @param req @type {UserDTO} Incoming req GET route\n   * @returns {object} user payload\n   */\n  @Get('me')\n  MyData(@Req() req: Request): object {\n    return req.user;\n  }\n\n  /**\n   * pass update user object and feilds are optional there can be pw or not but need to pass valid JWT in header\n   * @param User @type {EditUser} edit user payload\n   * @param req @type {EditUser} Incoming req with JWT in header\n   * @returns\n   */\n  @Post('edit')\n  EditMyData(@Body() User: EditUser, @Req() req: AuthRequest) {\n    return this.userService.editUser(User, req.user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserDTO.html":{"url":"classes/UserDTO.html","title":"class - UserDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Typings/auth.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                CreatedAt\n                            \n                            \n                                id\n                            \n                            \n                                phonenum\n                            \n                            \n                                UpdatedAt\n                            \n                            \n                                username\n                            \n                            \n                                verfied\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        CreatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/Typings/auth.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/Typings/auth.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phonenum\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/Typings/auth.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        UpdatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/Typings/auth.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/Typings/auth.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verfied\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/Typings/auth.ts:51\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsBoolean,\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsPhoneNumber,\n  IsString,\n} from 'class-validator';\n\nexport class AuthLogin {\n  @IsNotEmpty()\n  @IsPhoneNumber('IN')\n  phnum: string;\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n}\nexport class AuthSignup extends AuthLogin {\n  constructor() {\n    super();\n  }\n  @IsString()\n  @IsNotEmpty()\n  username: string;\n}\n\nexport class EditUser {\n  @IsOptional()\n  @IsPhoneNumber('IN')\n  phnum: string;\n  @IsString()\n  @IsOptional()\n  password: string;\n  @IsString()\n  @IsOptional()\n  username: string;\n}\n\nexport class Phnum {\n  @IsNotEmpty()\n  @IsPhoneNumber('IN')\n  phnum: string;\n}\n\nexport class UserDTO {\n  id: number;\n  CreatedAt: string;\n  UpdatedAt: string;\n  phonenum: string;\n  username: string;\n  verfied: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService\n\nUserService\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Module to Setup User Logic to get their userData or change Password\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { UserController } from './user.controller';\n\n/**\n * Module to Setup User Logic to get their userData or change Password\n */\n@Module({\n  providers: [UserService],\n  controllers: [UserController],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Userservice service to handle user related CRUD\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                editUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postgre: PrismaService, config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postgre\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        editUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    editUser(User: EditUser, dbuser: UserDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    User\n                                    \n                                                EditUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dbuser\n                                    \n                                                UserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { EditUser, UserDTO } from 'src/Typings';\nimport * as argon from 'argon2';\n\n/**\n * Userservice service to handle user related CRUD\n */\n@Injectable()\nexport class UserService {\n  constructor(private postgre: PrismaService, private config: ConfigService) {}\n\n  /**\n   *\n   * @param User @type  {EditUser}\n   * @param dbuser @type {UserDTO}\n   * @returns\n   */\n  async editUser(User: EditUser, dbuser: UserDTO) {\n    /**\n     * hash password from request payload if pas exisit\n     * update using postgres prisma ORM\n     */\n    if (User.password) {\n      const hash = await argon.hash(User.password);\n      delete User.password;\n      const user = await this.postgre.usertable.update({\n        where: {\n          id: dbuser.id,\n        },\n        data: {\n          ...User,\n          password: hash,\n        },\n      });\n      delete user.password;\n      return user;\n    } else {\n      const user = await this.postgre.usertable.update({\n        where: {\n          id: dbuser.id,\n        },\n        data: {\n          ...User,\n        },\n      });\n      delete user.password;\n      return user;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/Typings/auth.ts\n            \n            class\n            AuthLogin\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/Typings/auth.ts\n            \n            class\n            AuthSignup\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/Typings/auth.ts\n            \n            class\n            EditUser\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/Typings/auth.ts\n            \n            class\n            Phnum\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/Typings/auth.ts\n            \n            class\n            UserDTO\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/app/app.controller.ts\n            \n            controller\n            AppController\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/app/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/JwtStrategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                33 %\n                (2/6)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/core/core.controller.ts\n            \n            controller\n            CoreController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/core.controller.ts\n            \n            interface\n            AuthRequest\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/core/core.service.ts\n            \n            injectable\n            CoreService\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                src/core/dto/index.ts\n            \n            class\n            MuttateDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/dto/index.ts\n            \n            class\n            QueryDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/dto/index.ts\n            \n            interface\n            QueryReturn\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/middleware/requestLog.ts\n            \n            injectable\n            LogRequest\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/otp/otp.service.ts\n            \n            injectable\n            OtpService\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            interface\n            AuthRequest\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                33 %\n                (1/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs-modules/mailer : ^1.8.1\n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/serve-static : ^3.0.1\n        \n            @prisma/client : ^4.3.1\n        \n            @types/cache-manager-redis-store : ^2.0.1\n        \n            @types/nodemailer : ^6.4.6\n        \n            @types/passport-jwt : ^3.0.6\n        \n            @types/passport-local : ^1.0.34\n        \n            argon2 : ^0.29.1\n        \n            cache-manager : ^4.1.0\n        \n            cache-manager-redis-store : ^2.0.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            handlebars : ^4.7.7\n        \n            nodemailer : ^6.7.8\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            prisma : ^4.3.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            twilio : ^4.8.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ItemType   (src/.../index.ts)\n                        \n                        \n                            ReportType   (src/.../index.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/core/dto/index.ts\n    \n        \n            \n                \n                    \n                        \n                        ItemType\n                    \n                \n                        \n                            \n                                 MobileNum\n                            \n                        \n                        \n                            \n                                Value : MobileNum\n                            \n                        \n                        \n                            \n                                 SmsHeader\n                            \n                        \n                        \n                            \n                                Value : SmsHeader\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ReportType\n                    \n                \n                        \n                            \n                                 Normal\n                            \n                        \n                        \n                            \n                                Value : Normal\n                            \n                        \n                        \n                            \n                                 Spam\n                            \n                        \n                        \n                            \n                                Value : Spam\n                            \n                        \n                        \n                            \n                                 Fraud\n                            \n                        \n                        \n                            \n                                Value : Fraud\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nApp where I developed Backend for Kawach Hackathon.\nStack used\n\nPrisma - for Postgres ORM\nreddis - Cache secondary storage\nDocker - to host and run postgres [locally only] railway for hosting cloud postgres\nNestJS(express-TS) - backend framework\npython - api testing\nTypescript\nPassportJs - Auth and jwt management\nTwillio - SMS messaging\nYarn - as Package manager\n\nHow did it Go\n\nI used Compose Docs for generating the documentation and i am serving it over /docs route of server\nPrisma well i used to maintain all my db works and i guess i am in love with it 🥰 , Prisma ORM is flexible for me to setup relations easily and manage creating via npx prisma migrate dev and moniter my database from npx prisma studio\ni am maintaining several tables and several many to many relations from dbs. Got few tables with infor prefetched from national cyber forensics cordination centre and other tables which has demand data about our current users prisma ORM manages them for me\nPostgres was awesome to work with rn as i was currently using Prisma it doesnt make sense for me as it is Mysql or Postgres\nDocker i am using to run my postgres instance on port 5434 on locally and on railway for cloud\nRunning Redis instance on docker for OTP support\n\nPending tasks\n\nLay pipelines for 6 types of fraud detection\ntrigger ml models\nquery tables and calculate stats of an entity\n\n\n\nGuide To RUN/BUILD:\n\nclose this git repo using git clone \ninstall required dependecies using yarn\nCreate and update .env files according to .env.example file\ntry yarn start:dev to start server in dev mode\nor try yarn start:prod to start server in production mode\nFOR DOCUMENTATION click here --> docs\nfor SERVER API endpoint click here --> SERVER\nTo view database u can use prisma studio\n\nIncomplete things [GUIDE TO IMPLEMENT NLP]\n\nNLP trigger must be implemted\nclose this project and run it\ngot to src/core/core.service.ts write JS code to run NLP model\ni have seeded database with dummy gen data can look up stuff in it\nmain.py has data organised already to test core endpoints\n\n##Dependencies and Architecture\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CoreModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OtpModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CoreModule\n\n\n\ncluster_CoreModule_providers\n\n\n\ncluster_OtpModule\n\n\n\ncluster_OtpModule_exports\n\n\n\ncluster_OtpModule_providers\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCoreModule\n\nCoreModule\n\nAppModule -->\n\nCoreModule->AppModule\n\n\n\n\n\nOtpModule\n\nOtpModule\n\nAuthModule -->\n\nOtpModule->AuthModule\n\n\n\nAppModule -->\n\nOtpModule->AppModule\n\n\n\n\n\nOtpService \n\nOtpService \n\nOtpService  -->\n\nOtpModule->OtpService \n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nCoreService\n\nCoreService\n\nCoreModule -->\n\nCoreService->CoreModule\n\n\n\n\n\nOtpService\n\nOtpService\n\nOtpModule -->\n\nOtpService->OtpModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    8 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
