var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.147,1,1.915]],["body/controllers/AppController.html",[0,1.789,1,2.987,2,1.705,3,0.377,4,0.377,5,0.32,6,3.09,7,2.666,8,0.037,9,0.637,10,1.629,11,5.493,12,5.493,13,2.168,14,1.004,15,3.734,16,1.483,17,2.987,18,3.734,19,2.666,20,0.377,21,0.637,22,0.377,23,0.022,24,1.547,25,3.734,26,3.734,27,3.734,28,3.734,29,3.734,30,1.705,31,3.734,32,3.734,33,2.666,34,3.734,35,0.028,36,0.028]],["title/modules/AppModule.html",[37,0.951,38,1.915]],["body/modules/AppModule.html",[1,2.345,2,1.402,3,0.203,4,0.203,5,0.319,8,0.037,10,0.689,14,0.425,16,0.627,19,1.434,20,0.567,21,0.343,22,0.203,23,0.012,30,0.917,33,2.981,35,0.018,36,0.018,37,0.959,38,3.595,39,0.833,40,1.157,41,1.663,42,1.663,43,1.663,44,2.662,45,2.395,46,2.662,47,2.662,48,2.662,49,1.787,50,1.551,51,1.015,52,2.009,53,0.627,54,3.071,55,2.542,56,1.883,57,3.071,58,3.925,59,3.071,60,4.498,61,3.728,62,3.085,63,2.542,64,2.542,65,3.071,66,3.211,67,3.071,68,1.724,69,2.542,70,1.663,71,3.071,72,4.175,73,2.009,74,3.071,75,3.071,76,0.757,77,0.757,78,0.585,79,0.689,80,2.009,81,3.071,82,3.071,83,3.071,84,1.015,85,2.009,86,1.932,87,2.009,88,2.009,89,2.009,90,2.009,91,3.071,92,1.932,93,1.434,94,1.932,95,2.662,96,0.833,97,2.009,98,2.009,99,2.009,100,1.663,101,1.663,102,2.009,103,2.009,104,2.009,105,1.015,106,2.009,107,1.663,108,2.009,109,1.663,110,1.663,111,2.542,112,3.071,113,2.009,114,2.009,115,2.009,116,2.009,117,2.009,118,2.009,119,2.009,120,1.724,121,2.009,122,3.071,123,3.071,124,2.009,125,0.627,126,2.009,127,1.663,128,2.009,129,2.009,130,1.663,131,2.009,132,1.663,133,2.009,134,1.434,135,2.009,136,2.009]],["title/injectables/AppService.html",[48,1.709,137,0.644]],["body/injectables/AppService.html",[3,0.456,4,0.456,5,0.387,8,0.035,20,0.456,21,0.77,22,0.456,23,0.026,35,0.031,36,0.031,48,2.993,137,1.128,138,1.87,139,3.734]],["title/controllers/AuthController.html",[0,1.147,140,1.915]],["body/controllers/AuthController.html",[0,1.519,2,1.044,3,0.231,4,0.231,5,0.196,7,1.632,8,0.037,9,0.39,10,1.161,13,2.172,14,1.006,16,1.485,20,0.407,21,0.39,22,0.231,23,0.013,24,1.971,35,0.02,36,0.02,53,0.714,76,1.792,77,1.792,78,0.906,79,1.631,120,1.9,140,2.129,141,1.892,142,1.632,143,3.385,144,2.801,145,3.385,146,3.385,147,4.455,148,3.385,149,3.385,150,3.385,151,4.756,152,3.385,153,3.385,154,3.385,155,2.286,156,1.528,157,3.385,158,2.286,159,2.893,160,3.778,161,2.286,162,1.679,163,3.385,164,2.286,165,2.286,166,1.391,167,3.385,168,2.286,169,2.286,170,2.193,171,3.385,172,2.286,173,3.385,174,2.801,175,4.121,176,2.286,177,2.286,178,1.519,179,3.385,180,2.286,181,2.129,182,1.632,183,1.283,184,2.035,185,1.892,186,2.286,187,1.283,188,2.286,189,2.286,190,2.286,191,2.286,192,2.286,193,2.286,194,2.286,195,2.286,196,2.286,197,2.286,198,2.286,199,2.286]],["title/classes/AuthLogin.html",[23,0.018,162,1.147]],["body/classes/AuthLogin.html",[3,0.322,4,0.322,5,0.273,8,0.036,9,0.543,13,1.954,14,0.905,20,0.322,22,0.544,23,0.033,35,0.025,36,0.025,78,0.815,125,1.613,156,1.903,162,1.821,166,0.995,170,2.499,178,1.2,200,1.608,201,1.608,202,1.612,203,2.636,204,3.185,205,2.274,206,3.185,207,1.788,208,3.025,209,2.9,210,1.788,211,3.025,212,1.608,213,2.712,214,1.2,215,1.092,216,1.454,217,2.44,218,1.092,219,1.092,220,1.454,221,1.788,222,1.788,223,1.608]],["title/modules/AuthModule.html",[37,0.951,44,1.709]],["body/modules/AuthModule.html",[2,2.285,3,0.298,4,0.298,5,0.253,8,0.037,20,0.572,21,0.503,22,0.298,23,0.017,30,1.347,35,0.024,36,0.024,37,1.768,39,1.924,40,1.53,44,3.263,45,2.738,50,2.05,51,1.489,53,0.921,68,2.607,69,3.36,96,1.222,140,2.921,184,2.738,185,2.441,224,2.441,225,2.949,226,2.441,227,3.119,228,2.949,229,4.061,230,4.061,231,4.061,232,2.899,233,4.061,234,4.061,235,2.949,236,2.949,237,2.441,238,2.441,239,2.949,240,2.949,241,2.441,242,2.949,243,2.949,244,2.949,245,2.949,246,2.949,247,2.106]],["title/interfaces/AuthRequest.html",[248,1.709,249,1.915]],["body/interfaces/AuthRequest.html",[0,1.66,3,0.27,4,0.27,5,0.229,8,0.037,9,0.456,16,1.184,17,2.384,20,0.511,21,0.456,22,0.27,23,0.016,24,1.57,35,0.022,36,0.022,53,0.835,56,2.42,78,0.963,79,0.917,120,1.5,125,1.184,159,2.472,166,0.835,182,1.908,183,1.5,187,1.5,202,1.428,214,1.428,218,1.644,219,1.736,248,1.5,249,2.771,250,2.672,251,1.908,252,2.938,253,3.137,254,3.137,255,3.137,256,3.137,257,2.706,258,3.943,259,2.211,260,2.211,261,1.681,262,2.011,263,1.908,264,1.681,265,2.211,266,2.211,267,2.211,268,2.211,269,2.211,270,1.5,271,3.144,272,3.137,273,2.128,274,2.211,275,2.211,276,3.137,277,3.137,278,1.908,279,2.211,280,2.211,281,2.211,282,2.211,283,1.914,284,3.137,285,2.211,286,2.211,287,2.211,288,2.211]],["title/injectables/AuthService.html",[137,0.644,184,1.537]],["body/injectables/AuthService.html",[0,0.751,3,0.119,4,0.119,5,0.101,8,0.037,9,0.201,10,0.684,14,0.785,16,1.234,17,1.254,20,0.466,21,0.201,22,0.119,23,0.007,24,1.415,35,0.012,36,0.012,49,1.398,53,0.367,56,0.594,76,1.398,77,1.398,78,0.706,79,1.272,84,0.594,92,2.149,93,0.84,94,2.334,95,1.423,96,1.265,105,1.541,107,1.649,111,1.649,125,1.234,137,0.422,138,0.487,142,1.423,156,1.272,159,1.455,160,3.2,162,1.15,166,0.953,170,1.537,175,0.973,178,1.398,181,3.147,183,0.66,184,1.006,215,0.889,217,0.594,223,1.996,232,1.423,237,0.973,238,0.973,252,2.387,273,0.66,283,2.563,289,0.973,290,1.649,291,1.993,292,1.993,293,1.993,294,1.649,295,1.254,296,2.149,297,1.993,298,1.993,299,1.993,300,3.415,301,3.71,302,3.71,303,3.052,304,1.993,305,1.993,306,2.808,307,1.993,308,1.993,309,1.993,310,1.993,311,1.993,312,0.973,313,2.593,314,2.593,315,1.176,316,1.649,317,1.993,318,1.176,319,1.993,320,2.526,321,1.649,322,1.993,323,1.993,324,1.993,325,1.993,326,1.993,327,1.176,328,1.993,329,1.993,330,1.993,331,1.993,332,1.176,333,1.993,334,1.993,335,2.438,336,1.993,337,1.176,338,1.423,339,1.993,340,1.649,341,1.993,342,2.526,343,1.993,344,1.649,345,1.993,346,1.993,347,1.993,348,0.91,349,1.993,350,1.176,351,1.993,352,1.993,353,1.993,354,1.176,355,1.176,356,1.176,357,0.973,358,0.84,359,1.176,360,1.176,361,1.176,362,1.176,363,1.176,364,1.176,365,1.176,366,1.176,367,1.176,368,1.176,369,1.176,370,2.149,371,1.176,372,2.711,373,2.808,374,1.176,375,0.973,376,1.176,377,0.84,378,1.176,379,1.176,380,2.593,381,1.176,382,1.176,383,1.176,384,1.993,385,1.176,386,4.157,387,2.968,388,3.052,389,1.176,390,1.176,391,1.176,392,1.176,393,2.593,394,2.593,395,1.993,396,1.176,397,1.176,398,1.176,399,1.176,400,1.176,401,1.176,402,1.993,403,1.176,404,1.176,405,1.176,406,1.176,407,1.176,408,1.176,409,2.593,410,1.176,411,1.176,412,1.176,413,1.176,414,1.176,415,1.176,416,1.176,417,0.973,418,1.176,419,1.993,420,1.176,421,1.176,422,1.176]],["title/classes/AuthSignup.html",[23,0.018,166,0.951]],["body/classes/AuthSignup.html",[3,0.302,4,0.302,5,0.257,8,0.036,9,0.511,13,2.137,14,1.065,20,0.302,22,0.533,23,0.032,35,0.024,36,0.024,78,0.891,125,1.572,156,1.869,162,1.987,166,1.281,170,2.491,178,1.128,200,1.512,201,1.512,202,1.546,203,3.395,205,2.137,207,1.68,208,2.961,209,2.826,210,1.68,211,2.961,212,1.512,213,2.627,214,1.546,215,1.605,216,1.367,217,2.663,218,1.027,219,1.027,220,1.367,221,1.68,222,1.68,223,1.512,423,2.994,424,2.994,425,4.102,426,2.994,427,2.994]],["title/classes/EditUser.html",[23,0.018,218,1.044]],["body/classes/EditUser.html",[3,0.312,4,0.312,5,0.264,8,0.036,9,0.526,13,2.171,14,1.006,20,0.312,22,0.539,23,0.032,35,0.025,36,0.025,78,0.905,125,1.592,156,1.886,162,1.578,166,0.964,170,2.501,178,1.163,200,1.558,201,1.558,202,1.578,207,1.732,208,2.993,209,2.862,210,1.732,211,2.993,212,1.558,213,2.669,214,1.163,215,1.059,216,1.409,217,2.692,218,1.437,219,1.059,220,1.409,221,1.732,222,1.732,223,1.558,428,4.189,429,3.086,430,3.086,431,3.086,432,3.086]],["title/injectables/JwtStrategy.html",[137,0.644,227,1.709]],["body/injectables/JwtStrategy.html",[3,0.315,4,0.315,5,0.267,8,0.037,9,0.531,10,1.446,14,0.892,16,0.973,20,0.54,21,0.531,22,0.315,23,0.018,24,1.291,35,0.025,36,0.025,49,1.929,76,1.588,77,1.588,78,0.975,79,1.446,84,1.573,105,2.585,137,0.892,138,1.291,178,1.174,214,1.174,215,1.069,216,1.422,220,1.422,227,2.366,252,2.128,261,1.96,273,1.749,283,1.573,296,1.96,306,2.682,348,2.181,358,2.224,370,1.96,372,1.749,373,1.749,417,2.578,433,2.578,434,4.215,435,3.488,436,3.115,437,4.215,438,4.215,439,3.115,440,2.578,441,3.115,442,3.115,443,3.115,444,2.578,445,3.115,446,3.115,447,3.115,448,3.115,449,3.115,450,3.115,451,3.115,452,2.578,453,2.578]],["title/injectables/LogRequest.html",[86,1.915,137,0.644]],["body/injectables/LogRequest.html",[3,0.316,4,0.316,5,0.268,8,0.037,9,0.533,10,1.449,14,0.661,16,0.976,19,2.231,20,0.427,21,0.533,22,0.316,23,0.018,35,0.025,36,0.025,53,0.976,56,2.588,58,3.496,76,1.178,77,1.178,78,0.595,79,1.072,86,2.657,134,2.231,137,0.893,138,1.295,144,3.496,258,3.016,264,1.966,372,2.371,375,2.586,454,2.586,455,4.224,456,4.224,457,4.224,458,4.224,459,4.224,460,4.224,461,4.224,462,5.126,463,5.126,464,5.126,465,5.126,466,3.125,467,4.224,468,3.125,469,4.785,470,4.785,471,3.125,472,3.125,473,3.125,474,3.125,475,3.125,476,3.125,477,3.125]],["title/modules/OtpModule.html",[37,0.951,45,1.537]],["body/modules/OtpModule.html",[3,0.377,4,0.377,5,0.32,8,0.036,20,0.527,21,0.637,22,0.377,23,0.022,30,1.705,35,0.028,36,0.028,37,1.483,39,1.547,40,1.789,45,2.974,50,2.397,51,1.886,68,2.665,96,2.542,247,3.39,478,3.09,479,3.09,480,3.09,481,3.734,482,3.929,483,3.734,484,3.734]],["title/injectables/OtpService.html",[96,1.262,137,0.644]],["body/injectables/OtpService.html",[3,0.309,4,0.309,5,0.262,8,0.036,9,0.521,10,1.428,14,1.001,16,0.955,20,0.478,21,0.521,22,0.309,23,0.018,24,1.267,35,0.024,36,0.024,76,1.568,77,1.568,78,0.901,79,1.428,84,1.544,96,1.725,105,2.768,137,0.88,138,1.267,156,1.742,159,1.717,160,2.972,170,1.961,178,1.783,181,2.977,187,1.717,202,1.568,215,1.049,306,2.656,370,2.977,372,2.656,373,1.717,387,2.183,485,2.531,486,4.732,487,4.162,488,3.058,489,4.162,490,4.162,491,3.058,492,4.204,493,3.058,494,3.058,495,3.058,496,4.162,497,3.058,498,3.058,499,3.058,500,3.058,501,3.058,502,3.058,503,3.058,504,3.058,505,3.058,506,3.058]],["title/classes/Phnum.html",[23,0.018,156,1.044]],["body/classes/Phnum.html",[3,0.332,4,0.332,5,0.282,8,0.036,9,0.561,13,1.502,14,0.696,20,0.332,22,0.55,23,0.033,35,0.026,36,0.026,78,0.626,125,1.366,156,1.96,162,1.648,166,1.028,170,2.496,178,1.24,200,1.661,201,1.661,202,1.648,205,2.349,207,1.847,208,3.058,209,2.938,210,1.847,211,3.058,212,1.661,213,2.757,214,1.24,215,1.129,216,1.502,217,2.48,218,1.129,219,1.129,220,1.502,221,1.847,222,1.847,223,1.661,507,3.29]],["title/modules/PrismaModule.html",[37,0.951,46,1.709]],["body/modules/PrismaModule.html",[3,0.351,4,0.351,5,0.298,8,0.036,20,0.458,21,0.592,22,0.351,23,0.02,30,1.586,35,0.027,36,0.027,37,1.669,39,2.09,40,1.708,46,3.251,49,2.288,50,2.288,51,1.754,53,1.085,68,2.544,241,3.75,247,3.235,295,2.851,348,2.441,482,3.75,508,2.875,509,2.875,510,3.474,511,3.474,512,4.532,513,4.532,514,4.532,515,3.75,516,4.532,517,3.474]],["title/injectables/PrismaService.html",[49,1.147,137,0.644]],["body/injectables/PrismaService.html",[3,0.331,4,0.331,5,0.281,8,0.037,9,0.559,10,1.497,14,0.923,16,1.024,20,0.495,21,0.559,22,0.331,23,0.019,35,0.026,36,0.026,37,1.363,49,1.644,53,1.024,70,3.611,76,1.236,77,1.236,78,0.624,79,1.125,84,1.656,105,2.639,109,3.611,134,2.341,137,0.923,138,1.359,214,1.644,215,1.125,216,1.497,296,2.063,306,2.752,348,1.992,373,1.841,435,3.611,518,2.714,519,4.363,520,5.442,521,4.363,522,4.363,523,5.596,524,3.279,525,3.279,526,2.714,527,3.279,528,2.714,529,3.279,530,3.279,531,3.279]],["title/controllers/UserController.html",[0,1.147,270,1.709]],["body/controllers/UserController.html",[0,1.334,2,1.11,3,0.246,4,0.246,5,0.208,7,1.736,8,0.037,9,0.415,10,1.215,13,1.617,14,0.749,16,1.433,17,2.627,20,0.493,21,0.415,22,0.246,23,0.014,24,1.467,35,0.021,36,0.021,56,2.463,76,1.334,77,1.334,78,0.969,79,1.574,120,1.365,125,0.759,159,1.988,166,0.759,182,1.736,183,1.365,187,1.365,214,0.916,218,1.746,219,1.433,248,1.365,249,2.886,251,1.736,252,2.886,253,2.012,254,2.012,255,2.012,256,2.012,257,1.736,258,4.036,259,2.012,260,2.012,261,1.529,262,1.907,263,1.736,264,1.529,265,2.012,266,2.012,267,2.012,268,2.012,269,2.012,270,1.988,271,2.982,272,2.93,273,2.344,274,2.93,275,2.012,276,2.93,277,3.797,278,2.528,279,2.93,280,2.93,281,2.93,282,2.93,283,2.109,284,3.456,285,2.012,286,2.93,287,2.012,288,2.012,532,3.541,533,3.541,534,2.431,535,2.431,536,2.431,537,2.431]],["title/classes/UserDTO.html",[23,0.018,219,1.044]],["body/classes/UserDTO.html",[3,0.307,4,0.307,5,0.26,8,0.036,9,0.518,14,1.122,20,0.307,22,0.536,23,0.032,35,0.024,36,0.024,78,1.01,125,1.294,156,1.738,162,1.562,166,0.949,170,2.509,178,1.562,200,1.535,201,1.535,202,1.562,207,1.706,208,2.977,209,2.844,210,1.706,211,2.977,212,1.535,213,2.648,214,1.145,215,1.042,216,1.388,217,2.678,218,1.042,219,1.422,220,2.154,221,2.648,222,2.648,223,2.382,538,3.039,539,3.039,540,3.039,541,3.039,542,3.039]],["title/modules/UserModule.html",[37,0.951,47,1.709]],["body/modules/UserModule.html",[2,2.132,3,0.368,4,0.368,5,0.312,8,0.036,20,0.521,21,0.621,22,0.368,23,0.021,30,1.662,35,0.027,36,0.027,37,1.699,39,1.508,40,1.76,47,3.232,50,2.358,51,1.837,53,1.136,68,2.621,125,1.458,252,2.358,257,3.334,262,2.629,263,2.598,270,2.895,294,3.864,320,3.864,543,3.011,544,3.011,545,3.639,546,3.864,547,3.639]],["title/injectables/UserService.html",[137,0.644,262,1.39]],["body/injectables/UserService.html",[3,0.256,4,0.256,5,0.217,8,0.037,9,0.433,10,1.252,14,0.772,16,1.14,20,0.501,21,0.433,22,0.256,23,0.015,24,1.513,35,0.021,36,0.021,49,1.763,53,0.792,56,1.281,76,1.376,77,1.376,78,0.891,79,1.252,84,1.281,105,2.363,125,1.14,137,0.772,138,1.051,183,1.424,187,1.424,215,0.87,218,1.826,219,1.701,220,1.667,252,2.844,262,2.137,271,2.607,273,1.424,278,1.811,290,3.022,295,1.595,296,2.691,306,2.401,312,2.099,316,3.022,335,1.811,338,1.811,342,3.54,348,1.158,357,2.099,358,1.811,370,1.595,372,2.401,373,2.401,377,2.607,440,2.099,452,3.54,453,3.873,515,3.022,548,2.099,549,3.651,550,3.651,551,2.536,552,3.651,553,4.68,554,2.536,555,2.536,556,2.536,557,2.099,558,2.536,559,3.651,560,3.651]],["title/coverage.html",[561,3.435]],["body/coverage.html",[0,1.812,1,1.985,5,0.27,6,2.611,8,0.036,23,0.032,35,0.025,36,0.025,48,1.771,49,1.189,66,2.252,78,0.601,86,1.985,96,1.307,137,1.196,139,2.611,140,1.985,141,2.611,156,1.082,162,1.189,166,0.985,184,1.593,201,2.712,218,1.082,219,1.082,227,1.771,248,1.771,249,1.985,251,3.035,262,1.441,270,1.771,289,2.611,387,2.252,433,2.611,454,2.611,485,2.611,518,2.611,548,2.611,561,2.611,562,3.155,563,3.155,564,5.889,565,4.808,566,3.155,567,4.251,568,3.155,569,3.155,570,4.251,571,5.145,572,3.155,573,3.155,574,3.155,575,2.611,576,3.155,577,2.611,578,4.251,579,4.251,580,4.808,581,3.155,582,3.155]],["title/dependencies.html",[40,1.379,583,2.106]],["body/dependencies.html",[8,0.037,21,0.565,23,0.026,35,0.026,36,0.026,40,1.248,92,2.763,93,3.518,94,2.763,95,3.136,100,2.741,101,2.741,212,1.672,232,2.365,261,2.084,264,2.084,283,2.218,335,2.365,348,1.512,444,4.078,492,2.741,526,2.741,584,3.312,585,3.312,586,5.247,587,3.312,588,3.312,589,3.312,590,4.392,591,3.312,592,3.312,593,3.312,594,3.312,595,4.392,596,3.312,597,4.392,598,3.312,599,3.312,600,3.312,601,3.312,602,3.312,603,3.312,604,3.312,605,3.312,606,3.312,607,3.312,608,3.312,609,3.312,610,3.312,611,3.312,612,3.312,613,3.312,614,3.312,615,3.312,616,3.312,617,3.312,618,3.312,619,3.312]],["title/miscellaneous/functions.html",[620,2.106,621,3.029]],["body/miscellaneous/functions.html",[8,0.032,9,0.799,35,0.032,36,0.032,575,3.875,577,4.77,620,3.875,621,3.875,622,4.682]],["title/index.html",[9,0.434,623,2.545,624,2.545]],["body/index.html",[8,0.029,33,2.813,35,0.023,36,0.023,40,1.064,55,2.337,62,3.755,63,2.337,64,2.337,66,2.016,92,1.776,94,1.776,110,2.337,120,1.585,127,2.337,132,2.337,142,2.016,174,2.337,181,1.776,283,1.426,295,3.366,321,2.337,338,2.813,344,2.337,348,2.507,377,2.016,528,2.337,546,2.337,557,3.755,625,2.824,626,3.94,627,2.824,628,2.824,629,2.824,630,2.824,631,2.824,632,4.538,633,3.94,634,3.94,635,3.94,636,2.824,637,3.94,638,2.824,639,2.824,640,2.824,641,2.824,642,2.824,643,2.824,644,2.824,645,2.824,646,2.824,647,2.824,648,2.824,649,2.824,650,2.824,651,2.824,652,2.824,653,2.824,654,2.824,655,2.824,656,2.824,657,2.824,658,3.94,659,2.824,660,2.824,661,2.824,662,3.94,663,2.824,664,2.824,665,2.824,666,2.824,667,2.824,668,2.824,669,3.94,670,4.911,671,3.94,672,2.824,673,2.824,674,2.824,675,2.824,676,2.824,677,2.824,678,2.824,679,2.824,680,2.824,681,2.824,682,2.824,683,2.824,684,2.824,685,2.824,686,2.824,687,2.824,688,2.824,689,2.824,690,2.824,691,2.824,692,2.824,693,3.94,694,2.824,695,2.824,696,2.337,697,2.824,698,2.824,699,2.824,700,2.824,701,2.824,702,2.824,703,2.824,704,2.824,705,2.824,706,2.824,707,2.824,708,2.824,709,2.824,710,2.824,711,2.824,712,2.824]],["title/modules.html",[39,1.72]],["body/modules.html",[8,0.03,35,0.03,36,0.03,38,2.716,39,1.789,44,2.423,45,2.18,46,2.423,47,2.423,696,4.894,713,5.914,714,5.914,715,5.914]],["title/overview.html",[716,3.435]],["body/overview.html",[2,1.441,8,0.036,30,1.441,35,0.025,36,0.025,38,3.809,39,1.307,40,1.602,41,2.611,42,2.611,43,2.611,44,3.27,45,2.855,46,3.106,47,3.015,48,2.699,49,2.167,50,2.147,51,1.593,96,2.343,130,2.611,138,1.307,184,2.428,200,1.593,224,2.611,226,2.611,227,2.699,248,1.771,262,2.196,478,2.611,479,2.611,480,2.611,508,2.611,509,2.611,543,2.611,544,2.611,716,2.611,717,4.251,718,3.155,719,3.155]],["title/properties.html",[202,1.379,583,2.106]],["body/properties.html",[8,0.036,35,0.032,36,0.032,53,1.442,202,1.74,340,3.821,720,4.617,721,4.617,722,4.617,723,4.617]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthLogin.html":{},"modules/AuthModule.html":{},"interfaces/AuthRequest.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"modules/OtpModule.html":{},"injectables/OtpService.html":{},"classes/Phnum.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":564,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":720,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":614,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":604,"title":{},"body":{"dependencies.html":{}}}],["0.29.1",{"_index":599,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":603,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":609,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":570,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":568,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":565,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":567,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":566,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":569,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["1.0.0",{"_index":611,"title":{},"body":{"dependencies.html":{}}}],["1.0.34",{"_index":598,"title":{},"body":{"dependencies.html":{}}}],["1.8.1",{"_index":585,"title":{},"body":{"dependencies.html":{}}}],["1.ec2.cloud.redislabs.com",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["1/2",{"_index":579,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":580,"title":{},"body":{"coverage.html":{}}}],["1000000",{"_index":399,"title":{},"body":{"injectables/AuthService.html":{}}}],["1200",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["15m",{"_index":329,"title":{},"body":{"injectables/AuthService.html":{}}}],["18258",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["18258.c305.ap",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["1d",{"_index":422,"title":{},"body":{"injectables/AuthService.html":{}}}],["2.0.0",{"_index":601,"title":{},"body":{"dependencies.html":{}}}],["2.0.1",{"_index":592,"title":{},"body":{"dependencies.html":{}}}],["2/6",{"_index":572,"title":{},"body":{"coverage.html":{}}}],["20min",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["3",{"_index":718,"title":{},"body":{"overview.html":{}}}],["3.0.1",{"_index":589,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":616,"title":{},"body":{"dependencies.html":{}}}],["3.0.6",{"_index":596,"title":{},"body":{"dependencies.html":{}}}],["33",{"_index":571,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":368,"title":{},"body":{"injectables/AuthService.html":{}}}],["4.0.0",{"_index":610,"title":{},"body":{"dependencies.html":{}}}],["4.1.0",{"_index":600,"title":{},"body":{"dependencies.html":{}}}],["4.3.1",{"_index":590,"title":{},"body":{"dependencies.html":{}}}],["4.7.7",{"_index":606,"title":{},"body":{"dependencies.html":{}}}],["4.8.0",{"_index":619,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":717,"title":{},"body":{"overview.html":{}}}],["50",{"_index":578,"title":{},"body":{"coverage.html":{}}}],["5434",{"_index":694,"title":{},"body":{"index.html":{}}}],["6",{"_index":701,"title":{},"body":{"index.html":{}}}],["6.4.6",{"_index":594,"title":{},"body":{"dependencies.html":{}}}],["6.7.8",{"_index":608,"title":{},"body":{"dependencies.html":{}}}],["6/7",{"_index":574,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":719,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":618,"title":{},"body":{"dependencies.html":{}}}],["85",{"_index":573,"title":{},"body":{"coverage.html":{}}}],["9.0.0",{"_index":586,"title":{},"body":{"dependencies.html":{}}}],["91",{"_index":404,"title":{},"body":{"injectables/AuthService.html":{}}}],["accountsid",{"_index":494,"title":{},"body":{"injectables/OtpService.html":{}}}],["actual",{"_index":266,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/UserController.html":{}}}],["alias",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["already",{"_index":389,"title":{},"body":{"injectables/AuthService.html":{}}}],["analysis",{"_index":459,"title":{},"body":{"injectables/LogRequest.html":{}}}],["api",{"_index":642,"title":{},"body":{"index.html":{}}}],["app",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["app/app.controller",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["app/app.service",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":233,"title":{},"body":{"modules/AuthModule.html":{}}}],["appmodule",{"_index":38,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":48,"title":{"injectables/AppService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["architecture",{"_index":712,"title":{},"body":{"index.html":{}}}],["argon",{"_index":357,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["argon.hash(body.password",{"_index":374,"title":{},"body":{"injectables/AuthService.html":{}}}],["argon.hash(user.password",{"_index":558,"title":{},"body":{"injectables/UserService.html":{}}}],["argon.verify(user.password",{"_index":396,"title":{},"body":{"injectables/AuthService.html":{}}}],["argon2",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["async",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/OtpService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{}}}],["auth",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"index.html":{}}}],["auth.controller",{"_index":235,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":140,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":260,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/UserController.html":{}}}],["authlogin",{"_index":162,"title":{"classes/AuthLogin.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthLogin.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"classes/Phnum.html":{},"classes/UserDTO.html":{},"coverage.html":{}}}],["authlogin:12",{"_index":427,"title":{},"body":{"classes/AuthSignup.html":{}}}],["authlogin:15",{"_index":426,"title":{},"body":{"classes/AuthSignup.html":{}}}],["authmodule",{"_index":44,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":723,"title":{},"body":{"properties.html":{}}}],["authrequest",{"_index":249,"title":{"interfaces/AuthRequest.html":{}},"body":{"interfaces/AuthRequest.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["authservice",{"_index":184,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["authsignup",{"_index":166,"title":{"classes/AuthSignup.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthLogin.html":{},"interfaces/AuthRequest.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"classes/Phnum.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"coverage.html":{}}}],["authtoken",{"_index":496,"title":{},"body":{"injectables/OtpService.html":{}}}],["available",{"_index":246,"title":{},"body":{"modules/AuthModule.html":{}}}],["await",{"_index":373,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/OtpService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{}}}],["awesome",{"_index":685,"title":{},"body":{"index.html":{}}}],["backend",{"_index":626,"title":{},"body":{"index.html":{}}}],["baseurl",{"_index":468,"title":{},"body":{"injectables/LogRequest.html":{}}}],["basicroute",{"_index":11,"title":{},"body":{"controllers/AppController.html":{}}}],["better",{"_index":339,"title":{},"body":{"injectables/AuthService.html":{}}}],["body",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/AuthRequest.html":{},"injectables/AuthService.html":{},"injectables/OtpService.html":{},"controllers/UserController.html":{}}}],["body('email",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{}}}],["body('otp",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.phnum",{"_index":378,"title":{},"body":{"injectables/AuthService.html":{}}}],["body.username",{"_index":379,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":577,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":715,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":713,"title":{},"body":{"modules.html":{}}}],["cacha_manager",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{}}}],["cache",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{},"index.html":{}}}],["cache_manager",{"_index":356,"title":{},"body":{"injectables/AuthService.html":{}}}],["cachemanager",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{}}}],["cachemodule",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["cachemodule.register",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["cacheotp",{"_index":409,"title":{},"body":{"injectables/AuthService.html":{}}}],["calculate",{"_index":709,"title":{},"body":{"index.html":{}}}],["cases",{"_index":346,"title":{},"body":{"injectables/AuthService.html":{}}}],["catch",{"_index":381,"title":{},"body":{"injectables/AuthService.html":{}}}],["centre",{"_index":680,"title":{},"body":{"index.html":{}}}],["change",{"_index":257,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["class",{"_index":23,"title":{"classes/AuthLogin.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"classes/Phnum.html":{},"classes/UserDTO.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthLogin.html":{},"modules/AuthModule.html":{},"interfaces/AuthRequest.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"modules/OtpModule.html":{},"injectables/OtpService.html":{},"classes/Phnum.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":200,"title":{},"body":{"classes/AuthLogin.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"classes/Phnum.html":{},"classes/UserDTO.html":{},"overview.html":{}}}],["client",{"_index":521,"title":{},"body":{"injectables/PrismaService.html":{}}}],["cloud",{"_index":637,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":224,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":225,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":226,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_otpmodule",{"_index":478,"title":{},"body":{"modules/OtpModule.html":{},"overview.html":{}}}],["cluster_otpmodule_exports",{"_index":479,"title":{},"body":{"modules/OtpModule.html":{},"overview.html":{}}}],["cluster_otpmodule_providers",{"_index":480,"title":{},"body":{"modules/OtpModule.html":{},"overview.html":{}}}],["cluster_prismamodule",{"_index":508,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_exports",{"_index":509,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_providers",{"_index":510,"title":{},"body":{"modules/PrismaModule.html":{}}}],["cluster_usermodule",{"_index":543,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":544,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["compose",{"_index":650,"title":{},"body":{"index.html":{}}}],["config",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{}}}],["config.get('database_url",{"_index":530,"title":{},"body":{"injectables/PrismaService.html":{}}}],["config.get('jwt_secret",{"_index":449,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configmodule",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/OtpService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{}}}],["configservice.get('twilio_account_sid",{"_index":495,"title":{},"body":{"injectables/OtpService.html":{}}}],["configservice.get('twilio_auth_token",{"_index":497,"title":{},"body":{"injectables/OtpService.html":{}}}],["configure",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"injectables/PrismaService.html":{}}}],["configure(consumer",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["configuring",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["connection",{"_index":513,"title":{},"body":{"modules/PrismaModule.html":{}}}],["console.log('here",{"_index":383,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(`\"${originalurl",{"_index":472,"title":{},"body":{"injectables/LogRequest.html":{}}}],["console.log(body.phnum",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log(phonenum",{"_index":397,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(res",{"_index":476,"title":{},"body":{"injectables/LogRequest.html":{}}}],["const",{"_index":372,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"injectables/OtpService.html":{},"injectables/UserService.html":{}}}],["constructor",{"_index":215,"title":{},"body":{"classes/AuthLogin.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"injectables/JwtStrategy.html":{},"injectables/OtpService.html":{},"classes/Phnum.html":{},"injectables/PrismaService.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{}}}],["constructor(config",{"_index":435,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{}}}],["constructor(configservice",{"_index":488,"title":{},"body":{"injectables/OtpService.html":{}}}],["constructor(postgre",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["constructor(private",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/AuthRequest.html":{},"injectables/OtpService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["construstor",{"_index":366,"title":{},"body":{"injectables/AuthService.html":{}}}],["consumer",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(logrequest).forroutes",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"interfaces/AuthRequest.html":{},"injectables/AuthService.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('user",{"_index":269,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/UserController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["coonect",{"_index":522,"title":{},"body":{"injectables/PrismaService.html":{}}}],["cordination",{"_index":679,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":561,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["created",{"_index":413,"title":{},"body":{"injectables/AuthService.html":{}}}],["createdat",{"_index":221,"title":{},"body":{"classes/AuthLogin.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"classes/Phnum.html":{},"classes/UserDTO.html":{}}}],["creating",{"_index":344,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["crimeapp",{"_index":504,"title":{},"body":{"injectables/OtpService.html":{}}}],["crud",{"_index":550,"title":{},"body":{"injectables/UserService.html":{}}}],["current",{"_index":682,"title":{},"body":{"index.html":{}}}],["currently",{"_index":688,"title":{},"body":{"index.html":{}}}],["cyber",{"_index":677,"title":{},"body":{"index.html":{}}}],["data",{"_index":377,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["database",{"_index":666,"title":{},"body":{"index.html":{}}}],["datasources",{"_index":527,"title":{},"body":{"injectables/PrismaService.html":{}}}],["db",{"_index":528,"title":{},"body":{"injectables/PrismaService.html":{},"index.html":{}}}],["dbs",{"_index":672,"title":{},"body":{"index.html":{}}}],["dbuser",{"_index":553,"title":{},"body":{"injectables/UserService.html":{}}}],["dbuser.id",{"_index":560,"title":{},"body":{"injectables/UserService.html":{}}}],["debugging",{"_index":458,"title":{},"body":{"injectables/LogRequest.html":{}}}],["decorators",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthLogin.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"classes/Phnum.html":{},"controllers/UserController.html":{}}}],["define",{"_index":229,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthLogin.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"injectables/OtpService.html":{},"classes/Phnum.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":452,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["demand",{"_index":681,"title":{},"body":{"index.html":{}}}],["dependecies",{"_index":230,"title":{},"body":{"modules/AuthModule.html":{}}}],["dependencies",{"_index":40,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/OtpModule.html":{},"modules/PrismaModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["description",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthRequest.html":{},"injectables/AuthService.html":{},"injectables/LogRequest.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"properties.html":{}}}],["designed",{"_index":455,"title":{},"body":{"injectables/LogRequest.html":{}}}],["detection",{"_index":704,"title":{},"body":{"index.html":{}}}],["dev",{"_index":664,"title":{},"body":{"index.html":{}}}],["developed",{"_index":625,"title":{},"body":{"index.html":{}}}],["docker",{"_index":632,"title":{},"body":{"index.html":{}}}],["docs",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"index.html":{}}}],["docs)[/docs",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["docslink",{"_index":12,"title":{},"body":{"controllers/AppController.html":{}}}],["documentation",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"index.html":{}}}],["doesnt",{"_index":689,"title":{},"body":{"index.html":{}}}],["done",{"_index":408,"title":{},"body":{"injectables/AuthService.html":{}}}],["easily",{"_index":659,"title":{},"body":{"index.html":{}}}],["edge",{"_index":345,"title":{},"body":{"injectables/AuthService.html":{}}}],["edit",{"_index":285,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/UserController.html":{}}}],["editmydata",{"_index":532,"title":{},"body":{"controllers/UserController.html":{}}}],["editmydata(@body",{"_index":287,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/UserController.html":{}}}],["editmydata(user",{"_index":534,"title":{},"body":{"controllers/UserController.html":{}}}],["edituser",{"_index":218,"title":{"classes/EditUser.html":{}},"body":{"classes/AuthLogin.html":{},"interfaces/AuthRequest.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"classes/Phnum.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["edituser(user",{"_index":552,"title":{},"body":{"injectables/UserService.html":{}}}],["elements",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["email",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["emailing",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{}}}],["enterred",{"_index":416,"title":{},"body":{"injectables/AuthService.html":{}}}],["entity",{"_index":711,"title":{},"body":{"index.html":{}}}],["env",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{}}}],["error",{"_index":382,"title":{},"body":{"injectables/AuthService.html":{}}}],["error.code",{"_index":384,"title":{},"body":{"injectables/AuthService.html":{}}}],["execute",{"_index":406,"title":{},"body":{"injectables/AuthService.html":{}}}],["exisit",{"_index":556,"title":{},"body":{"injectables/UserService.html":{}}}],["expired",{"_index":412,"title":{},"body":{"injectables/AuthService.html":{}}}],["expiresin",{"_index":421,"title":{},"body":{"injectables/AuthService.html":{}}}],["expiry",{"_index":330,"title":{},"body":{"injectables/AuthService.html":{}}}],["export",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthLogin.html":{},"modules/AuthModule.html":{},"interfaces/AuthRequest.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"modules/OtpModule.html":{},"injectables/OtpService.html":{},"classes/Phnum.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["exporting",{"_index":514,"title":{},"body":{"modules/PrismaModule.html":{}}}],["exports",{"_index":247,"title":{},"body":{"modules/AuthModule.html":{},"modules/OtpModule.html":{},"modules/PrismaModule.html":{}}}],["express",{"_index":264,"title":{},"body":{"interfaces/AuthRequest.html":{},"injectables/LogRequest.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["extends",{"_index":214,"title":{},"body":{"classes/AuthLogin.html":{},"interfaces/AuthRequest.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"injectables/JwtStrategy.html":{},"classes/Phnum.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{}}}],["extracting",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{}}}],["extractjwt",{"_index":442,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":447,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["feilds",{"_index":279,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/UserController.html":{}}}],["few",{"_index":673,"title":{},"body":{"index.html":{}}}],["figure",{"_index":29,"title":{},"body":{"controllers/AppController.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthLogin.html":{},"modules/AuthModule.html":{},"interfaces/AuthRequest.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"modules/OtpModule.html":{},"injectables/OtpService.html":{},"classes/Phnum.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["files",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["finding",{"_index":333,"title":{},"body":{"injectables/AuthService.html":{}}}],["flexible",{"_index":657,"title":{},"body":{"index.html":{}}}],["followed",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{}}}],["forbiddenexception",{"_index":354,"title":{},"body":{"injectables/AuthService.html":{}}}],["forbiddenexception('credentials",{"_index":388,"title":{},"body":{"injectables/AuthService.html":{}}}],["forbiddenexception('session",{"_index":411,"title":{},"body":{"injectables/AuthService.html":{}}}],["forbiddenexception('wrong",{"_index":415,"title":{},"body":{"injectables/AuthService.html":{}}}],["forensics",{"_index":678,"title":{},"body":{"index.html":{}}}],["forgot",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{}}}],["forgotpasswordlogic",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{}}}],["forgotpasswordlogic(phonenum",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{}}}],["forgotpw",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{}}}],["forgotpwd",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{}}}],["forgotpwd(@body",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{}}}],["forgotpwd(body",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{}}}],["framework",{"_index":640,"title":{},"body":{"index.html":{}}}],["fraud",{"_index":703,"title":{},"body":{"index.html":{}}}],["function",{"_index":576,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":621,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generated",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["generating",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["get('/hehe",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('me",{"_index":274,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/UserController.html":{}}}],["getting",{"_index":623,"title":{"index.html":{}},"body":{}}],["global",{"_index":482,"title":{},"body":{"modules/OtpModule.html":{},"modules/PrismaModule.html":{}}}],["globally",{"_index":516,"title":{},"body":{"modules/PrismaModule.html":{}}}],["go",{"_index":649,"title":{},"body":{"index.html":{}}}],["good",{"_index":26,"title":{},"body":{"controllers/AppController.html":{}}}],["graph",{"_index":234,"title":{},"body":{"modules/AuthModule.html":{}}}],["guess",{"_index":655,"title":{},"body":{"index.html":{}}}],["hackathon",{"_index":628,"title":{},"body":{"index.html":{}}}],["handle",{"_index":549,"title":{},"body":{"injectables/UserService.html":{}}}],["handlebars",{"_index":605,"title":{},"body":{"dependencies.html":{}}}],["handled",{"_index":347,"title":{},"body":{"injectables/AuthService.html":{}}}],["hash",{"_index":342,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["header",{"_index":284,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/UserController.html":{}}}],["headers",{"_index":469,"title":{},"body":{"injectables/LogRequest.html":{}}}],["hehe",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{}}}],["here",{"_index":503,"title":{},"body":{"injectables/OtpService.html":{}}}],["heyy",{"_index":502,"title":{},"body":{"injectables/OtpService.html":{}}}],["host",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["hosting",{"_index":636,"title":{},"body":{"index.html":{}}}],["httpexception",{"_index":359,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpexception(error",{"_index":391,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpstatus",{"_index":362,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpstatus.forbidden",{"_index":392,"title":{},"body":{"injectables/AuthService.html":{}}}],["id",{"_index":220,"title":{},"body":{"classes/AuthLogin.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"injectables/JwtStrategy.html":{},"classes/Phnum.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":562,"title":{},"body":{"coverage.html":{}}}],["implemented",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["implementing",{"_index":519,"title":{},"body":{"injectables/PrismaService.html":{}}}],["implements",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"injectables/LogRequest.html":{},"injectables/PrismaService.html":{}}}],["import",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthLogin.html":{},"modules/AuthModule.html":{},"interfaces/AuthRequest.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"modules/OtpModule.html":{},"injectables/OtpService.html":{},"classes/Phnum.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["incoming",{"_index":272,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/UserController.html":{}}}],["incomming",{"_index":457,"title":{},"body":{"injectables/LogRequest.html":{}}}],["incorrect",{"_index":394,"title":{},"body":{"injectables/AuthService.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthLogin.html":{},"interfaces/AuthRequest.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"injectables/OtpService.html":{},"classes/Phnum.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthLogin.html":{},"modules/AuthModule.html":{},"interfaces/AuthRequest.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"modules/OtpModule.html":{},"injectables/OtpService.html":{},"classes/Phnum.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["infor",{"_index":674,"title":{},"body":{"index.html":{}}}],["inherited",{"_index":425,"title":{},"body":{"classes/AuthSignup.html":{}}}],["init",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"injectables/PrismaService.html":{}}}],["initiated",{"_index":367,"title":{},"body":{"injectables/AuthService.html":{}}}],["initiating",{"_index":512,"title":{},"body":{"modules/PrismaModule.html":{}}}],["inject",{"_index":355,"title":{},"body":{"injectables/AuthService.html":{}}}],["inject(cache_manager",{"_index":371,"title":{},"body":{"injectables/AuthService.html":{}}}],["injectable",{"_index":137,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"injectables/OtpService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"injectables/OtpService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":138,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"injectables/OtpService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injected",{"_index":241,"title":{},"body":{"modules/AuthModule.html":{},"modules/PrismaModule.html":{}}}],["inserting",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{}}}],["instance",{"_index":693,"title":{},"body":{"index.html":{}}}],["interface",{"_index":248,"title":{"interfaces/AuthRequest.html":{}},"body":{"interfaces/AuthRequest.html":{},"controllers/UserController.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":250,"title":{},"body":{"interfaces/AuthRequest.html":{}}}],["internalservererrorexception",{"_index":360,"title":{},"body":{"injectables/AuthService.html":{}}}],["internalservererrorexception('failed",{"_index":405,"title":{},"body":{"injectables/AuthService.html":{}}}],["isemail",{"_index":207,"title":{},"body":{"classes/AuthLogin.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"classes/Phnum.html":{},"classes/UserDTO.html":{}}}],["isglobal",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["isnotempty",{"_index":208,"title":{},"body":{"classes/AuthLogin.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"classes/Phnum.html":{},"classes/UserDTO.html":{}}}],["isnotempty()@isphonenumber('in",{"_index":205,"title":{},"body":{"classes/AuthLogin.html":{},"classes/AuthSignup.html":{},"classes/Phnum.html":{}}}],["isoptional",{"_index":209,"title":{},"body":{"classes/AuthLogin.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"classes/Phnum.html":{},"classes/UserDTO.html":{}}}],["isoptional()@isphonenumber('in",{"_index":430,"title":{},"body":{"classes/EditUser.html":{}}}],["isphonenumber",{"_index":210,"title":{},"body":{"classes/AuthLogin.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"classes/Phnum.html":{},"classes/UserDTO.html":{}}}],["isphonenumber('in",{"_index":213,"title":{},"body":{"classes/AuthLogin.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"classes/Phnum.html":{},"classes/UserDTO.html":{}}}],["isstring",{"_index":211,"title":{},"body":{"classes/AuthLogin.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"classes/Phnum.html":{},"classes/UserDTO.html":{}}}],["isstring()@isnotempty",{"_index":203,"title":{},"body":{"classes/AuthLogin.html":{},"classes/AuthSignup.html":{}}}],["isstring()@isoptional",{"_index":428,"title":{},"body":{"classes/EditUser.html":{}}}],["jobs",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{}}}],["join",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["join(__dirname",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["json.stringify",{"_index":473,"title":{},"body":{"injectables/LogRequest.html":{}}}],["jwt",{"_index":283,"title":{},"body":{"interfaces/AuthRequest.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"dependencies.html":{},"index.html":{}}}],["jwtfromrequest",{"_index":446,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":236,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":243,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtsign",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtsign(userid",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":227,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kawach",{"_index":627,"title":{},"body":{"index.html":{}}}],["lay",{"_index":699,"title":{},"body":{"index.html":{}}}],["lets",{"_index":477,"title":{},"body":{"injectables/LogRequest.html":{}}}],["license",{"_index":721,"title":{},"body":{"properties.html":{}}}],["literal",{"_index":438,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["local",{"_index":597,"title":{},"body":{"dependencies.html":{}}}],["locally",{"_index":634,"title":{},"body":{"index.html":{}}}],["log",{"_index":456,"title":{},"body":{"injectables/LogRequest.html":{}}}],["logging",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["logic",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{},"modules/UserModule.html":{}}}],["login",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(@body",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(body",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginlogic",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginlogic(body",{"_index":331,"title":{},"body":{"injectables/AuthService.html":{}}}],["logrequest",{"_index":86,"title":{"injectables/LogRequest.html":{}},"body":{"modules/AppModule.html":{},"injectables/LogRequest.html":{},"coverage.html":{}}}],["logs",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["love",{"_index":656,"title":{},"body":{"index.html":{}}}],["mailservice",{"_index":364,"title":{},"body":{"injectables/AuthService.html":{}}}],["maintain",{"_index":653,"title":{},"body":{"index.html":{}}}],["maintaining",{"_index":668,"title":{},"body":{"index.html":{}}}],["make",{"_index":690,"title":{},"body":{"index.html":{}}}],["manage",{"_index":660,"title":{},"body":{"index.html":{}}}],["management",{"_index":645,"title":{},"body":{"index.html":{}}}],["manager",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["manages",{"_index":684,"title":{},"body":{"index.html":{}}}],["many",{"_index":671,"title":{},"body":{"index.html":{}}}],["matching",{"_index":36,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthLogin.html":{},"modules/AuthModule.html":{},"interfaces/AuthRequest.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"modules/OtpModule.html":{},"injectables/OtpService.html":{},"classes/Phnum.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["math.floor(math.random",{"_index":398,"title":{},"body":{"injectables/AuthService.html":{}}}],["message",{"_index":407,"title":{},"body":{"injectables/AuthService.html":{}}}],["messaging",{"_index":648,"title":{},"body":{"index.html":{}}}],["metadata",{"_index":613,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":470,"title":{},"body":{"injectables/LogRequest.html":{}}}],["methods",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"injectables/OtpService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["middleware",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"injectables/LogRequest.html":{}}}],["middlewareconsumer",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["migrate",{"_index":663,"title":{},"body":{"index.html":{}}}],["miscellaneous",{"_index":620,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["ml",{"_index":706,"title":{},"body":{"index.html":{}}}],["models",{"_index":707,"title":{},"body":{"index.html":{}}}],["module",{"_index":37,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/OtpModule.html":{},"modules/PrismaModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/OtpModule.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/UserModule.html":{}}}],["modules",{"_index":39,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/OtpModule.html":{},"modules/PrismaModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/mailer",{"_index":584,"title":{},"body":{"dependencies.html":{}}}],["moniter",{"_index":665,"title":{},"body":{"index.html":{}}}],["mydata",{"_index":533,"title":{},"body":{"controllers/UserController.html":{}}}],["mydata(@req",{"_index":275,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/UserController.html":{}}}],["mydata(req",{"_index":536,"title":{},"body":{"controllers/UserController.html":{}}}],["mysql",{"_index":692,"title":{},"body":{"index.html":{}}}],["name",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"injectables/OtpService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["national",{"_index":676,"title":{},"body":{"index.html":{}}}],["need",{"_index":281,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/UserController.html":{}}}],["nestjs",{"_index":232,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs(express",{"_index":638,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthRequest.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"modules/OtpModule.html":{},"injectables/OtpService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/common/decorators",{"_index":483,"title":{},"body":{"modules/OtpModule.html":{}}}],["nestjs/common/enums",{"_index":363,"title":{},"body":{"injectables/AuthService.html":{}}}],["nestjs/common/exceptions",{"_index":361,"title":{},"body":{"injectables/AuthService.html":{}}}],["nestjs/config",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/OtpService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{}}}],["nestjs/core",{"_index":587,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":237,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["nestjs/passport",{"_index":261,"title":{},"body":{"interfaces/AuthRequest.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":588,"title":{},"body":{"dependencies.html":{}}}],["nestjs/serve",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":467,"title":{},"body":{"injectables/LogRequest.html":{}}}],["nestmodule",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["new",{"_index":387,"title":{},"body":{"injectables/AuthService.html":{},"injectables/OtpService.html":{},"coverage.html":{}}}],["next",{"_index":464,"title":{},"body":{"injectables/LogRequest.html":{}}}],["nextfunction",{"_index":465,"title":{},"body":{"injectables/LogRequest.html":{}}}],["nodemailer",{"_index":607,"title":{},"body":{"dependencies.html":{}}}],["now",{"_index":27,"title":{},"body":{"controllers/AppController.html":{}}}],["npx",{"_index":662,"title":{},"body":{"index.html":{}}}],["number",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthLogin.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"injectables/JwtStrategy.html":{},"injectables/OtpService.html":{},"classes/Phnum.html":{},"classes/UserDTO.html":{}}}],["object",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"interfaces/AuthRequest.html":{},"injectables/AuthService.html":{},"controllers/UserController.html":{}}}],["onmoduleinit",{"_index":523,"title":{},"body":{"injectables/PrismaService.html":{}}}],["optional",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/AuthRequest.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"injectables/OtpService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["originalurl",{"_index":471,"title":{},"body":{"injectables/LogRequest.html":{}}}],["orm",{"_index":557,"title":{},"body":{"injectables/UserService.html":{},"index.html":{}}}],["otp",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/OtpService.html":{},"index.html":{}}}],["otp.service",{"_index":484,"title":{},"body":{"modules/OtpModule.html":{}}}],["otp/otp.module",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["otp/otp.service",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["otpmodule",{"_index":45,"title":{"modules/OtpModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/OtpModule.html":{},"modules.html":{},"overview.html":{}}}],["otpsender",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{}}}],["otpservice",{"_index":96,"title":{"injectables/OtpService.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/OtpModule.html":{},"injectables/OtpService.html":{},"coverage.html":{},"overview.html":{}}}],["out",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/OtpModule.html":{},"modules/PrismaModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["over",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["overview",{"_index":716,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p2002",{"_index":385,"title":{},"body":{"injectables/AuthService.html":{}}}],["package",{"_index":583,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":34,"title":{},"body":{"controllers/AppController.html":{}}}],["param",{"_index":271,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["parameters",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"injectables/OtpService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["pas",{"_index":555,"title":{},"body":{"injectables/UserService.html":{}}}],["pass",{"_index":277,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/UserController.html":{}}}],["passport",{"_index":444,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportjs",{"_index":644,"title":{},"body":{"index.html":{}}}],["passportstrategy",{"_index":441,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":445,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":125,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthLogin.html":{},"interfaces/AuthRequest.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"classes/Phnum.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["passwords",{"_index":343,"title":{},"body":{"injectables/AuthService.html":{}}}],["path",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["payload",{"_index":273,"title":{},"body":{"interfaces/AuthRequest.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["payload.sub",{"_index":451,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["pending",{"_index":697,"title":{},"body":{"index.html":{}}}],["phnum",{"_index":156,"title":{"classes/Phnum.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthLogin.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"injectables/OtpService.html":{},"classes/Phnum.html":{},"classes/UserDTO.html":{},"coverage.html":{}}}],["phonenum",{"_index":223,"title":{},"body":{"classes/AuthLogin.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"classes/Phnum.html":{},"classes/UserDTO.html":{}}}],["pipelines",{"_index":700,"title":{},"body":{"index.html":{}}}],["port",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["post",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/AuthRequest.html":{},"controllers/UserController.html":{}}}],["post('/requestotp",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/signin",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/signup",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/verifyotp",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('edit",{"_index":286,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/UserController.html":{}}}],["postgre",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["postgres",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{},"modules/PrismaModule.html":{},"injectables/UserService.html":{},"index.html":{}}}],["posts",{"_index":256,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/UserController.html":{}}}],["prefetched",{"_index":675,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["prisma",{"_index":348,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"dependencies.html":{},"index.html":{}}}],["prisma.service",{"_index":517,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma/client",{"_index":526,"title":{},"body":{"injectables/PrismaService.html":{},"dependencies.html":{}}}],["prisma/prisma.module",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["prisma/prisma.service",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["prismaclient",{"_index":520,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismamodule",{"_index":46,"title":{"modules/PrismaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PrismaModule.html":{},"modules.html":{},"overview.html":{}}}],["prismaservice",{"_index":49,"title":{"injectables/PrismaService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":370,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/OtpService.html":{},"injectables/UserService.html":{}}}],["promise",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/OtpService.html":{}}}],["properties",{"_index":202,"title":{"properties.html":{}},"body":{"classes/AuthLogin.html":{},"interfaces/AuthRequest.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"injectables/OtpService.html":{},"classes/Phnum.html":{},"classes/UserDTO.html":{},"properties.html":{}}}],["property",{"_index":267,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/UserController.html":{}}}],["provided",{"_index":245,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/OtpModule.html":{},"modules/PrismaModule.html":{},"modules/UserModule.html":{}}}],["pw",{"_index":280,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/UserController.html":{}}}],["pwmatches",{"_index":395,"title":{},"body":{"injectables/AuthService.html":{}}}],["python",{"_index":641,"title":{},"body":{"index.html":{}}}],["qmvxege8cv0xsmddlkgezlo4u3b9rwwj",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["quering",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{}}}],["query",{"_index":708,"title":{},"body":{"index.html":{}}}],["railway",{"_index":635,"title":{},"body":{"index.html":{}}}],["random",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{}}}],["reading",{"_index":32,"title":{},"body":{"controllers/AppController.html":{}}}],["readonly",{"_index":493,"title":{},"body":{"injectables/OtpService.html":{}}}],["reddis",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["reddistore",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["redis",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{},"index.html":{}}}],["reflect",{"_index":612,"title":{},"body":{"dependencies.html":{}}}],["related",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["relations",{"_index":658,"title":{},"body":{"index.html":{}}}],["relationships",{"_index":231,"title":{},"body":{"modules/AuthModule.html":{}}}],["replace",{"_index":265,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/UserController.html":{}}}],["req",{"_index":258,"title":{},"body":{"interfaces/AuthRequest.html":{},"injectables/LogRequest.html":{},"controllers/UserController.html":{}}}],["req.user",{"_index":276,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/UserController.html":{}}}],["request",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AuthRequest.html":{},"injectables/AuthService.html":{},"injectables/LogRequest.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["requests",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{},"injectables/LogRequest.html":{}}}],["required",{"_index":242,"title":{},"body":{"modules/AuthModule.html":{}}}],["res",{"_index":462,"title":{},"body":{"injectables/LogRequest.html":{}}}],["res.on('close",{"_index":474,"title":{},"body":{"injectables/LogRequest.html":{}}}],["reset",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/OtpModule.html":{},"modules/PrismaModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resp",{"_index":402,"title":{},"body":{"injectables/AuthService.html":{}}}],["response",{"_index":463,"title":{},"body":{"injectables/LogRequest.html":{}}}],["responses",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{}}}],["respsent",{"_index":475,"title":{},"body":{"injectables/LogRequest.html":{}}}],["rest",{"_index":31,"title":{},"body":{"controllers/AppController.html":{}}}],["results",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthLogin.html":{},"modules/AuthModule.html":{},"interfaces/AuthRequest.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"modules/OtpModule.html":{},"injectables/OtpService.html":{},"classes/Phnum.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["retrieve",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["retrieved",{"_index":352,"title":{},"body":{"injectables/AuthService.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"interfaces/AuthRequest.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/OtpService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["returns",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/AuthRequest.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"injectables/OtpService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["rimraf",{"_index":615,"title":{},"body":{"dependencies.html":{}}}],["rn",{"_index":687,"title":{},"body":{"index.html":{}}}],["root",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["rootpath",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["route",{"_index":120,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/AuthRequest.html":{},"controllers/UserController.html":{},"index.html":{}}}],["routes",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["routs",{"_index":253,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/UserController.html":{}}}],["run",{"_index":633,"title":{},"body":{"index.html":{}}}],["running",{"_index":695,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":617,"title":{},"body":{"dependencies.html":{}}}],["sample",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{}}}],["saved",{"_index":255,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/UserController.html":{}}}],["secondary",{"_index":630,"title":{},"body":{"index.html":{}}}],["secret",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{}}}],["secretkey",{"_index":328,"title":{},"body":{"injectables/AuthService.html":{}}}],["secretorkey",{"_index":448,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["send",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{}}}],["sendotp",{"_index":487,"title":{},"body":{"injectables/OtpService.html":{}}}],["sendotp(otp",{"_index":490,"title":{},"body":{"injectables/OtpService.html":{}}}],["sense",{"_index":691,"title":{},"body":{"index.html":{}}}],["servce",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{}}}],["serve",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["server",{"_index":651,"title":{},"body":{"index.html":{}}}],["serveroot",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forroot",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["service",{"_index":515,"title":{},"body":{"modules/PrismaModule.html":{},"injectables/UserService.html":{}}}],["services",{"_index":369,"title":{},"body":{"injectables/AuthService.html":{}}}],["serving",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["setup",{"_index":546,"title":{},"body":{"modules/UserModule.html":{},"index.html":{}}}],["several",{"_index":669,"title":{},"body":{"index.html":{}}}],["sha",{"_index":341,"title":{},"body":{"injectables/AuthService.html":{}}}],["signin",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{}}}],["signing",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{}}}],["signup",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(@body",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(body",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{}}}],["signuplogic",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{}}}],["signuplogic(body",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{}}}],["sms",{"_index":647,"title":{},"body":{"index.html":{}}}],["smssent",{"_index":500,"title":{},"body":{"injectables/OtpService.html":{}}}],["smssent.sid",{"_index":506,"title":{},"body":{"injectables/OtpService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthLogin.html":{},"modules/AuthModule.html":{},"interfaces/AuthRequest.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"modules/OtpModule.html":{},"injectables/OtpService.html":{},"classes/Phnum.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["south",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["src/.../main.ts",{"_index":622,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.module.ts",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:58",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app/app.controller.ts:14",{"_index":18,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app/app.controller.ts:6",{"_index":15,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app/app.service.ts",{"_index":139,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:19",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:24",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:29",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:35",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:46",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":228,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:116",{"_index":350,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:139",{"_index":327,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:30",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:43",{"_index":337,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:70",{"_index":332,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:93",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/jwtstrategy.ts",{"_index":433,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwtstrategy.ts:16",{"_index":439,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwtstrategy.ts:8",{"_index":436,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/mail/mail.service",{"_index":365,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":575,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/middleware/requestlog.ts",{"_index":454,"title":{},"body":{"injectables/LogRequest.html":{},"coverage.html":{}}}],["src/middleware/requestlog.ts:9",{"_index":466,"title":{},"body":{"injectables/LogRequest.html":{}}}],["src/otp/otp.module",{"_index":239,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/otp/otp.module.ts",{"_index":481,"title":{},"body":{"modules/OtpModule.html":{}}}],["src/otp/otp.service",{"_index":238,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["src/otp/otp.service.ts",{"_index":485,"title":{},"body":{"injectables/OtpService.html":{},"coverage.html":{}}}],["src/otp/otp.service.ts:14",{"_index":491,"title":{},"body":{"injectables/OtpService.html":{}}}],["src/otp/otp.service.ts:7",{"_index":489,"title":{},"body":{"injectables/OtpService.html":{}}}],["src/prisma/prisma.module.ts",{"_index":511,"title":{},"body":{"modules/PrismaModule.html":{}}}],["src/prisma/prisma.service",{"_index":358,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["src/prisma/prisma.service.ts",{"_index":518,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma/prisma.service.ts:10",{"_index":524,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma/prisma.service.ts:20",{"_index":525,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/typings",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/AuthRequest.html":{},"injectables/AuthService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["src/typings/auth.ts",{"_index":201,"title":{},"body":{"classes/AuthLogin.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"classes/Phnum.html":{},"classes/UserDTO.html":{},"coverage.html":{}}}],["src/typings/auth.ts:12",{"_index":206,"title":{},"body":{"classes/AuthLogin.html":{}}}],["src/typings/auth.ts:15",{"_index":204,"title":{},"body":{"classes/AuthLogin.html":{}}}],["src/typings/auth.ts:17",{"_index":423,"title":{},"body":{"classes/AuthSignup.html":{}}}],["src/typings/auth.ts:23",{"_index":424,"title":{},"body":{"classes/AuthSignup.html":{}}}],["src/typings/auth.ts:29",{"_index":431,"title":{},"body":{"classes/EditUser.html":{}}}],["src/typings/auth.ts:32",{"_index":429,"title":{},"body":{"classes/EditUser.html":{}}}],["src/typings/auth.ts:35",{"_index":432,"title":{},"body":{"classes/EditUser.html":{}}}],["src/typings/auth.ts:41",{"_index":507,"title":{},"body":{"classes/Phnum.html":{}}}],["src/typings/auth.ts:45",{"_index":539,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/typings/auth.ts:46",{"_index":538,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/typings/auth.ts:47",{"_index":541,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/typings/auth.ts:48",{"_index":540,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/typings/auth.ts:49",{"_index":542,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/user/user.controller.ts",{"_index":251,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:26",{"_index":537,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:37",{"_index":535,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module.ts",{"_index":545,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":548,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:11",{"_index":551,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:20",{"_index":554,"title":{},"body":{"injectables/UserService.html":{}}}],["stack",{"_index":629,"title":{},"body":{"index.html":{}}}],["started",{"_index":624,"title":{"index.html":{}},"body":{}}],["statements",{"_index":563,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["stats",{"_index":710,"title":{},"body":{"index.html":{}}}],["storage",{"_index":631,"title":{},"body":{"index.html":{}}}],["store",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["storing",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{}}}],["strategy",{"_index":443,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthLogin.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"injectables/OtpService.html":{},"classes/Phnum.html":{},"classes/UserDTO.html":{}}}],["struggle",{"_index":28,"title":{},"body":{"controllers/AppController.html":{}}}],["studio",{"_index":667,"title":{},"body":{"index.html":{}}}],["sub",{"_index":417,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["subset",{"_index":244,"title":{},"body":{"modules/AuthModule.html":{}}}],["super",{"_index":216,"title":{},"body":{"classes/AuthLogin.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"injectables/JwtStrategy.html":{},"classes/Phnum.html":{},"injectables/PrismaService.html":{},"classes/UserDTO.html":{}}}],["support",{"_index":696,"title":{},"body":{"index.html":{},"modules.html":{}}}],["supprt",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{}}}],["svg",{"_index":714,"title":{},"body":{"modules.html":{}}}],["table",{"_index":582,"title":{},"body":{"coverage.html":{}}}],["tables",{"_index":670,"title":{},"body":{"index.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":581,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{}}}],["taken",{"_index":390,"title":{},"body":{"injectables/AuthService.html":{}}}],["tasks",{"_index":698,"title":{},"body":{"index.html":{}}}],["test",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{}}}],["test(@body('email",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{}}}],["test(email",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{}}}],["testing",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{},"index.html":{}}}],["things",{"_index":240,"title":{},"body":{"modules/AuthModule.html":{}}}],["this.$connect",{"_index":531,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.authservice.forgotpasswordlogic(body.phnum",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.loginlogic(body",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signuplogic(body",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.verifylogic(otp",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.cachemanager.del(phonenum",{"_index":414,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cachemanager.get(phonenum",{"_index":410,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cachemanager.set(phonenum",{"_index":400,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.config.get('jwt_secret",{"_index":418,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('twilio_phone_num",{"_index":505,"title":{},"body":{"injectables/OtpService.html":{}}}],["this.jwt.signasync(payload",{"_index":420,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtsign(user.id",{"_index":380,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.mailservice.senduserconfirmation(otp",{"_index":401,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.otpsender.sendotp(otp",{"_index":403,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.postgre.user.create",{"_index":376,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.postgre.user.findunique",{"_index":393,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.postgre.user.update",{"_index":559,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.findunique",{"_index":450,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.twilioclient",{"_index":498,"title":{},"body":{"injectables/OtpService.html":{}}}],["this.twilioclient.messages.create",{"_index":501,"title":{},"body":{"injectables/OtpService.html":{}}}],["this.userservice.edituser(user",{"_index":288,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/UserController.html":{}}}],["throw",{"_index":386,"title":{},"body":{"injectables/AuthService.html":{}}}],["token",{"_index":419,"title":{},"body":{"injectables/AuthService.html":{}}}],["transformer",{"_index":602,"title":{},"body":{"dependencies.html":{}}}],["trigger",{"_index":705,"title":{},"body":{"index.html":{}}}],["true",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["try",{"_index":375,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LogRequest.html":{}}}],["ts",{"_index":639,"title":{},"body":{"index.html":{}}}],["ttl",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{}}}],["twilio",{"_index":492,"title":{},"body":{"injectables/OtpService.html":{},"dependencies.html":{}}}],["twilio(accountsid",{"_index":499,"title":{},"body":{"injectables/OtpService.html":{}}}],["twilioclient",{"_index":486,"title":{},"body":{"injectables/OtpService.html":{}}}],["twillio",{"_index":646,"title":{},"body":{"index.html":{}}}],["type",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthLogin.html":{},"interfaces/AuthRequest.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"injectables/OtpService.html":{},"classes/Phnum.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["types",{"_index":702,"title":{},"body":{"index.html":{}}}],["types/cache",{"_index":591,"title":{},"body":{"dependencies.html":{}}}],["types/nodemailer",{"_index":593,"title":{},"body":{"dependencies.html":{}}}],["types/passport",{"_index":595,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":643,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":440,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["unlicensed",{"_index":722,"title":{},"body":{"properties.html":{}}}],["update",{"_index":278,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updatedat",{"_index":222,"title":{},"body":{"classes/AuthLogin.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"classes/Phnum.html":{},"classes/UserDTO.html":{}}}],["url",{"_index":529,"title":{},"body":{"injectables/PrismaService.html":{}}}],["use",{"_index":460,"title":{},"body":{"injectables/LogRequest.html":{}}}],["use(req",{"_index":461,"title":{},"body":{"injectables/LogRequest.html":{}}}],["used",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["usedas",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["useguards",{"_index":259,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/UserController.html":{}}}],["useguards(authguard('jwt",{"_index":268,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/UserController.html":{}}}],["user",{"_index":252,"title":{},"body":{"interfaces/AuthRequest.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["user.controller",{"_index":547,"title":{},"body":{"modules/UserModule.html":{}}}],["user.password",{"_index":453,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["user.service",{"_index":263,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user/user.module",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["usercontroller",{"_index":270,"title":{"controllers/UserController.html":{}},"body":{"interfaces/AuthRequest.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdata",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{},"modules/UserModule.html":{}}}],["userdto",{"_index":219,"title":{"classes/UserDTO.html":{}},"body":{"classes/AuthLogin.html":{},"interfaces/AuthRequest.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"classes/Phnum.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["userid",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{}}}],["userinfo",{"_index":254,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/UserController.html":{}}}],["usermodule",{"_index":47,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":217,"title":{},"body":{"classes/AuthLogin.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"classes/Phnum.html":{},"classes/UserDTO.html":{}}}],["users",{"_index":683,"title":{},"body":{"index.html":{}}}],["userservice",{"_index":262,"title":{"injectables/UserService.html":{}},"body":{"interfaces/AuthRequest.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":338,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["valid",{"_index":282,"title":{},"body":{"interfaces/AuthRequest.html":{},"controllers/UserController.html":{}}}],["validate",{"_index":434,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":437,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validator",{"_index":212,"title":{},"body":{"classes/AuthLogin.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"classes/Phnum.html":{},"classes/UserDTO.html":{},"dependencies.html":{}}}],["values",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{}}}],["verfied",{"_index":353,"title":{},"body":{"injectables/AuthService.html":{}}}],["verfifying",{"_index":334,"title":{},"body":{"injectables/AuthService.html":{}}}],["verfiyphno",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{}}}],["verify",{"_index":351,"title":{},"body":{"injectables/AuthService.html":{}}}],["verifylogic",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{}}}],["verifylogic(otp",{"_index":349,"title":{},"body":{"injectables/AuthService.html":{}}}],["verifyotp",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{}}}],["verifyotp(otp",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{}}}],["version",{"_index":340,"title":{},"body":{"injectables/AuthService.html":{},"properties.html":{}}}],["via",{"_index":661,"title":{},"body":{"index.html":{}}}],["void",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/LogRequest.html":{}}}],["welcome_msg",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["well",{"_index":652,"title":{},"body":{"index.html":{}}}],["work",{"_index":686,"title":{},"body":{"index.html":{}}}],["works",{"_index":654,"title":{},"body":{"index.html":{}}}],["yes",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{}}}],["zoom",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/OtpModule.html":{},"modules/PrismaModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/app.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                basicRoute\n                            \n                            \n                                docsLink\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        basicRoute\n                        \n                    \n                \n            \n            \n                \nbasicRoute()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app/app.controller.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         object\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        docsLink\n                        \n                    \n                \n            \n            \n                \ndocsLink()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app/app.controller.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\n\n@Controller('/')\nexport class AppController {\n  @Get()\n  basicRoute(): object {\n    return {\n      welcome_msg:\n        'GOOD Now struggle and figure out rest reading my /docs page ',\n    };\n  }\n\n  @Get()\n  docsLink() {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nOtpModule\n\nOtpModule\n\nAppModule -->\n\nOtpModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Root Of the APP with request logging middleware implemented\n @alias ServeStaticModule used for serving this docs over (docs)[/docs] Documentation is generated in documentation file\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            OtpModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:58\n                \n            \n\n\n            \n                \n                    Configuring the middleware for routes\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import {\n  CacheModule,\n  MiddlewareConsumer,\n  Module,\n  NestModule,\n} from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { AuthModule } from './auth/auth.module';\nimport { LogRequest } from './middleware';\nimport { PrismaService } from './prisma/prisma.service';\nimport { PrismaModule } from './prisma/prisma.module';\nimport { UserModule } from './user/user.module';\nimport { OtpModule } from './otp/otp.module';\nimport * as ReddiStore from 'cache-manager-redis-store';\nimport { OtpService } from './otp/otp.service';\nimport { AppController } from './app/app.controller';\nimport { AppService } from './app/app.service';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { join } from 'path';\n\n/**\n * Root Of the APP with request logging middleware implemented\n *  @alias ServeStaticModule used for serving this docs over (docs)[/docs] Documentation is generated in `documentation` file\n * @alias ConfigModule usedas Configservice to retrieve env elements\n * @alias CacheModule used to init reddis cache store with ttl 1200 `20min`\n */\n@Module({\n  imports: [\n    ServeStaticModule.forRoot({\n      rootPath: join(__dirname, '..', 'documentation'),\n      serveRoot: '/docs', // this will serve your files on /docs route\n    }),\n\n    ConfigModule.forRoot({\n      isGlobal: true,\n    }),\n    CacheModule.register({\n      store: ReddiStore,\n      password: 'qmvXege8CV0xSmddlkgEZlo4u3b9rWwJ',\n      host: 'redis-18258.c305.ap-south-1-1.ec2.cloud.redislabs.com',\n      port: 18258,\n      isGlobal: true,\n      ttl: 1200,\n    }),\n    AuthModule,\n    PrismaModule,\n    UserModule,\n    OtpModule,\n  ],\n  providers: [PrismaService, AppService],\n  controllers: [AppController],\n})\nexport class AppModule implements NestModule {\n  /**\n   * Configuring the middleware for routes\n   * @alias LogRequest middleware logs type of request and route\n   */\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(LogRequest).forRoutes('*');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/app.service.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n            \n                Description\n            \n            \n                Controller to take all requests and send responses\n\n/Signup\n/Signin\n/verfiyphno\n/forgotpw\n/verifyotp\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ForgotPwd\n                            \n                            \n                                Login\n                            \n                            \n                                Signup\n                            \n                            \n                                test\n                            \n                            \n                                verifyOTP\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ForgotPwd\n                        \n                    \n                \n            \n            \n                \nForgotPwd(body: Phnum)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/requestOtp')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                Phnum\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Login\n                        \n                    \n                \n            \n            \n                \nLogin(body: AuthLogin)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/Signin')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                AuthLogin\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Signup\n                        \n                    \n                \n            \n            \n                \nSignup(body: AuthSignup)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/Signup')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                AuthSignup\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        test\n                        \n                    \n                \n            \n            \n                \ntest(email?: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/hehe')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:46\n                \n            \n\n\n            \n                \n                    Sample Testing Route\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verifyOTP\n                        \n                    \n                \n            \n            \n                \nverifyOTP(OTP: number, email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/verifyOTP')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    OTP\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Get, Body } from '@nestjs/common';\nimport { AuthLogin, AuthSignup, Phnum } from 'src/Typings';\nimport { AuthService } from './auth.service';\n\n/**\n * Controller to take all requests and send responses\n *\n * - /Signup\n * - /Signin\n * - /verfiyphno\n * - /forgotpw\n * - /verifyotp\n */\n@Controller('auth')\nexport class AuthController {\n  constructor(private AuthService: AuthService) {}\n\n  @Post('/Signup')\n  Signup(@Body() body: AuthSignup): Promise {\n    return this.AuthService.signupLogic(body);\n  }\n\n  @Post('/Signin')\n  Login(@Body() body: AuthLogin): Promise {\n    return this.AuthService.loginLogic(body);\n  }\n\n  @Post('/requestOtp')\n  ForgotPwd(@Body() body: Phnum): Promise {\n    console.log(body.phnum);\n    return this.AuthService.forgotpasswordLogic(body.phnum);\n  }\n\n  @Post('/verifyOTP')\n  verifyOTP(\n    @Body('OTP') OTP: number,\n    @Body('email') email: string,\n  ): Promise {\n    return this.AuthService.verifyLogic(OTP, email);\n  }\n\n  /**\n   * Sample Testing Route\n   */\n  @Get('/hehe')\n  test(@Body('email') email?: string): string {\n    return 'hehe';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthLogin.html":{"url":"classes/AuthLogin.html","title":"class - AuthLogin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthLogin\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Typings/auth.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                phnum\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Typings/auth.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phnum\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsPhoneNumber('IN')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Typings/auth.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsPhoneNumber,\n  IsString,\n} from 'class-validator';\n\nexport class AuthLogin {\n  @IsNotEmpty()\n  @IsPhoneNumber('IN')\n  phnum: string;\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n}\nexport class AuthSignup extends AuthLogin {\n  constructor() {\n    super();\n  }\n  @IsString()\n  @IsNotEmpty()\n  username: string;\n}\n\nexport class EditUser {\n  @IsOptional()\n  @IsPhoneNumber('IN')\n  phnum: string;\n  @IsString()\n  @IsOptional()\n  password: string;\n  @IsString()\n  @IsOptional()\n  username: string;\n}\n\nexport class Phnum {\n  @IsNotEmpty()\n  @IsPhoneNumber('IN')\n  phnum: string;\n}\n\nexport class UserDTO {\n  id: number;\n  CreatedAt: string;\n  UpdatedAt: string;\n  phonenum: string;\n  username: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nOtpModule\n\nOtpModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nOtpModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Module is where we define all dependecies and relationships for nestjs application graph\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            OtpModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { JwtModule } from '@nestjs/jwt';\nimport { JwtStrategy } from './JwtStrategy';\nimport { OtpService } from 'src/otp/otp.service';\nimport { OtpModule } from 'src/otp/otp.module';\n\n/**\n * Module is where we define all dependecies and relationships for nestjs application graph\n */\n@Module({\n  /**\n   * things that have to be injected into controllers\n   */\n  providers: [AuthService, JwtStrategy],\n\n  // the controllers in this module\n  controllers: [AuthController],\n\n  // Modules required for this module\n  imports: [JwtModule.register({}), OtpModule],\n\n  // the subset of providers that are provided by this module and should be available in other modules which import this module.\n  exports: [],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthRequest.html":{"url":"interfaces/AuthRequest.html","title":"interface - AuthRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AuthRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n\n            \n                Description\n            \n            \n                Controller for User routs\n\nget UserInfo and Saved Posts\nChange Password or body\n\n\n            \n\n            \n                Extends\n            \n            \n                    Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         UserDTO\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UserDTO\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Body, Controller, Get, Post, Req, UseGuards } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { UserService } from './user.service';\nimport { Request } from 'express';\nimport { AuthSignup, EditUser, UserDTO } from 'src/Typings';\n\n/**\n * Controller for User routs\n * - get UserInfo and Saved Posts\n * - Change Password or body\n */\ninterface AuthRequest extends Request {\n  user: UserDTO; // Replace `any` with the actual type of the `user` property\n}\n\n@UseGuards(AuthGuard('jwt'))\n@Controller('user')\nexport class UserController {\n  constructor(private userService: UserService) {}\n  /**\n   *\n   * @param req @type {UserDTO} Incoming req GET route\n   * @returns {object} user payload\n   */\n  @Get('me')\n  MyData(@Req() req: Request) {\n    return req.user;\n  }\n\n  /**\n   * pass update user object and feilds are optional there can be pw or not but need to pass valid JWT in header\n   * @param User @type {EditUser} edit user payload\n   * @param req @type {EditUser} Incoming req with JWT in header\n   * @returns\n   */\n  @Post('edit')\n  EditMyData(@Body() User: EditUser, @Req() req: AuthRequest) {\n    return this.userService.editUser(User, req.user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Controller For Auth related Jobs\n\nPrismaService for inserting and QUering UserData from Postgres\nConfig Servce for extracting Values [Jwt Secret] from .env\nJwtService for Signing Jwt with UserID\nCACHA_MANAGER for redis supprt to store OTP with ttl\n\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                forgotpasswordLogic\n                            \n                            \n                                    Async\n                                JwtSign\n                            \n                            \n                                    Async\n                                loginLogic\n                            \n                            \n                                    Async\n                                signupLogic\n                            \n                            \n                                    Async\n                                verifyLogic\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postgre: PrismaService, config: ConfigService, jwt: JwtService, cachemanager: Cache, otpsender: OtpService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:30\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postgre\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwt\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cachemanager\n                                                  \n                                                        \n                                                                    Cache\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        otpsender\n                                                  \n                                                        \n                                                                        OtpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        forgotpasswordLogic\n                        \n                    \n                \n            \n            \n                \n                    \n                    forgotpasswordLogic(phonenum: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:93\n                \n            \n\n\n            \n                \n                    Forgot PassWord Logic Generating Random OTP Followed By\nStoring it in Redis and Emailing the User His Otp\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    phonenum\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        JwtSign\n                        \n                    \n                \n            \n            \n                \n                    \n                    JwtSign(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:139\n                \n            \n\n\n            \n                \n                    Signing JWT with SecretKey with 15m expiry\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        loginLogic\n                        \n                    \n                \n            \n            \n                \n                    \n                    loginLogic(body: AuthLogin)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:70\n                \n            \n\n\n            \n                \n                    Finding User , Verfifying Password with Argon2 and signing Jwt\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                AuthLogin\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signupLogic\n                        \n                    \n                \n            \n            \n                \n                    \n                    signupLogic(body: AuthSignup)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:43\n                \n            \n\n\n            \n                \n                    Using argon2 a better version of SHA to Hash the passwords\nand Creating User Object all edge cases are handled by Prisma and Nestjs\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                AuthSignup\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        verifyLogic\n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyLogic(OTP: number, phonenum: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:116\n                \n            \n\n\n            \n                \n                    Verify Otp Logic Where OTP is retrieved From Redis and verfied\nreturns JWT\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    OTP\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    phonenum\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  ForbiddenException,\n  Inject,\n  CACHE_MANAGER,\n} from '@nestjs/common';\nimport { AuthLogin, AuthSignup } from 'src/Typings';\nimport * as argon from 'argon2';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { Cache } from 'cache-manager';\nimport {\n  HttpException,\n  InternalServerErrorException,\n} from '@nestjs/common/exceptions';\nimport { HttpStatus } from '@nestjs/common/enums';\nimport { OtpService } from 'src/otp/otp.service';\n// import { MailService } from 'src/mail/mail.service';\n\n/**\n * ### Controller For Auth related Jobs\n * @constructor construstor is initiated with 4 Services\n *  - PrismaService for inserting and QUering UserData from `Postgres`\n *  - Config Servce for extracting Values [Jwt Secret] from `.env`\n *  - JwtService for Signing `Jwt` with UserID\n *  - CACHA_MANAGER for redis supprt to store OTP with `ttl`\n */\n@Injectable()\nexport class AuthService {\n  constructor(\n    private postgre: PrismaService,\n    private config: ConfigService,\n    private jwt: JwtService,\n    @Inject(CACHE_MANAGER) private cachemanager: Cache, //\n    private otpsender: OtpService,\n  ) {}\n\n  /**\n   * Using argon2 a better version of SHA to Hash the passwords\n   * and Creating User Object all edge cases are handled by Prisma and Nestjs\n   */\n  async signupLogic(body: AuthSignup): Promise {\n    const hash = await argon.hash(body.password);\n    try {\n      const user = await this.postgre.user.create({\n        data: {\n          phnum: body.phnum,\n          password: hash,\n          username: body.username,\n        },\n      });\n      return {\n        Jwt: await this.JwtSign(user.id),\n      };\n    } catch (error) {\n      console.log('here', error.code);\n\n      if (error.code == 'P2002') {\n        throw new ForbiddenException('Credentials Already Taken');\n      } else {\n        throw new HttpException(error, HttpStatus.FORBIDDEN);\n      }\n    }\n  }\n\n  /**\n   * Finding User , Verfifying Password with Argon2 and signing Jwt\n   */\n  async loginLogic(body: AuthLogin): Promise {\n    const { phnum, password } = body;\n\n    const user = await this.postgre.user.findUnique({\n      where: {\n        phnum: phnum,\n      },\n    });\n    if (!user) {\n      throw new ForbiddenException('Credentials incorrect');\n    }\n    const pwMatches = await argon.verify(user.password, password);\n    if (!pwMatches) throw new ForbiddenException('Credentials incorrect');\n\n    return {\n      Jwt: await this.JwtSign(user.id),\n    };\n  }\n\n  /**\n   * Forgot PassWord Logic Generating Random OTP Followed By\n   * Storing it in Redis and Emailing the User His Otp\n   */\n  async forgotpasswordLogic(phonenum: string): Promise {\n    console.log(phonenum);\n    const user = await this.postgre.user.findUnique({\n      where: {\n        phnum: phonenum,\n      },\n    });\n    if (!user) {\n      throw new ForbiddenException('Credentials incorrect');\n    }\n    const OTP = Math.floor(Math.random() * 1000000);\n    await this.cachemanager.set(phonenum, OTP);\n    // await this.mailService.sendUserConfirmation(OTP, email);\n    const resp = await this.otpsender.sendotp(OTP, '+91' + phonenum);\n    if (!resp)\n      throw new InternalServerErrorException('Failed to execute request');\n    return { message: 'done' };\n  }\n\n  /**\n   * Verify Otp Logic Where OTP is retrieved From Redis and verfied\n   * returns JWT\n   */\n  async verifyLogic(OTP: number, phonenum: string): Promise {\n    const cacheotp = await this.cachemanager.get(phonenum);\n    if (!cacheotp) {\n      throw new ForbiddenException('Session Expired or Not created');\n    }\n    if (OTP == cacheotp) {\n      const user = await this.postgre.user.findUnique({\n        where: {\n          phnum: phonenum,\n        },\n      });\n      await this.cachemanager.del(phonenum);\n      return {\n        Jwt: await this.JwtSign(user.id),\n      };\n    } else {\n      throw new ForbiddenException('Wrong Otp Enterred');\n    }\n  }\n\n  /**\n   * Signing JWT with SecretKey with `15m` expiry\n   */\n  async JwtSign(userId: number): Promise {\n    const payload = {\n      sub: userId,\n    };\n    const secret = this.config.get('JWT_SECRET');\n    const token = await this.jwt.signAsync(payload, {\n      expiresIn: '1d',\n      secret: secret,\n    });\n    return token;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthSignup.html":{"url":"classes/AuthSignup.html","title":"class - AuthSignup","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthSignup\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Typings/auth.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthLogin\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                username\n                            \n                            \n                                password\n                            \n                            \n                                phnum\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/Typings/auth.ts:17\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Typings/auth.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         AuthLogin\n\n                            \n                        \n                    \n                        \n                                Defined in         AuthLogin:15\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phnum\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsPhoneNumber('IN')\n                        \n                    \n                \n                        \n                            \n                                Inherited from         AuthLogin\n\n                            \n                        \n                    \n                        \n                                Defined in         AuthLogin:12\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsPhoneNumber,\n  IsString,\n} from 'class-validator';\n\nexport class AuthLogin {\n  @IsNotEmpty()\n  @IsPhoneNumber('IN')\n  phnum: string;\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n}\nexport class AuthSignup extends AuthLogin {\n  constructor() {\n    super();\n  }\n  @IsString()\n  @IsNotEmpty()\n  username: string;\n}\n\nexport class EditUser {\n  @IsOptional()\n  @IsPhoneNumber('IN')\n  phnum: string;\n  @IsString()\n  @IsOptional()\n  password: string;\n  @IsString()\n  @IsOptional()\n  username: string;\n}\n\nexport class Phnum {\n  @IsNotEmpty()\n  @IsPhoneNumber('IN')\n  phnum: string;\n}\n\nexport class UserDTO {\n  id: number;\n  CreatedAt: string;\n  UpdatedAt: string;\n  phonenum: string;\n  username: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EditUser.html":{"url":"classes/EditUser.html","title":"class - EditUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EditUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Typings/auth.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                phnum\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Typings/auth.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phnum\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPhoneNumber('IN')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Typings/auth.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Typings/auth.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsPhoneNumber,\n  IsString,\n} from 'class-validator';\n\nexport class AuthLogin {\n  @IsNotEmpty()\n  @IsPhoneNumber('IN')\n  phnum: string;\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n}\nexport class AuthSignup extends AuthLogin {\n  constructor() {\n    super();\n  }\n  @IsString()\n  @IsNotEmpty()\n  username: string;\n}\n\nexport class EditUser {\n  @IsOptional()\n  @IsPhoneNumber('IN')\n  phnum: string;\n  @IsString()\n  @IsOptional()\n  password: string;\n  @IsString()\n  @IsOptional()\n  username: string;\n}\n\nexport class Phnum {\n  @IsNotEmpty()\n  @IsPhoneNumber('IN')\n  phnum: string;\n}\n\nexport class UserDTO {\n  id: number;\n  CreatedAt: string;\n  UpdatedAt: string;\n  phonenum: string;\n  username: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/JwtStrategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService, prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/JwtStrategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/JwtStrategy.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PrismaService } from 'src/prisma/prisma.service';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(config: ConfigService, private prisma: PrismaService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: config.get('JWT_SECRET'),\n    });\n  }\n\n  async validate(payload: { sub: number }) {\n    const user = await this.prisma.user.findUnique({\n      where: {\n        id: payload.sub,\n      },\n    });\n    delete user.password;\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LogRequest.html":{"url":"injectables/LogRequest.html","title":"injectable - LogRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LogRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/middleware/requestLog.ts\n        \n\n\n            \n                Description\n            \n            \n                This is a Middleware is designed to log the incomming requests for debugging and analysis\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/middleware/requestLog.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { NextFunction, Request, Response } from 'express';\n\n/**\n * This is a Middleware is designed to log the incomming requests for debugging and analysis\n */\n@Injectable()\nexport class LogRequest implements NestMiddleware {\n  use(req: Request, res: Response, next: NextFunction) {\n    const { baseUrl, headers, method, originalUrl } = req;\n    console.log(`\"${originalUrl}\" - METHOD ${method}`);\n\n    // with headers ${JSON.stringify(\n    //   headers,\n    // )}\n\n    res.on('close', () => {\n      // const respSent = res;\n      // console.log(res, 'lets try');\n    });\n\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OtpModule.html":{"url":"modules/OtpModule.html","title":"module - OtpModule","body":"\n                   \n\n\n\n\n    Modules\n    OtpModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_OtpModule\n\n\n\ncluster_OtpModule_exports\n\n\n\ncluster_OtpModule_providers\n\n\n\n\nOtpService \n\nOtpService \n\n\n\nOtpModule\n\nOtpModule\n\nOtpService  -->\n\nOtpModule->OtpService \n\n\n\n\n\nOtpService\n\nOtpService\n\nOtpModule -->\n\nOtpService->OtpModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/otp/otp.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            OtpService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            OtpService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { Global } from '@nestjs/common/decorators';\nimport { OtpService } from './otp.service';\n\n/**\n *\n */\n@Global()\n@Module({\n  providers: [OtpService],\n  exports: [OtpService],\n})\nexport class OtpModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OtpService.html":{"url":"injectables/OtpService.html","title":"injectable - OtpService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OtpService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/otp/otp.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                twilioClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendotp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/otp/otp.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendotp\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendotp(OTP: number, phnum: string)\n                \n            \n\n\n            \n                \n                    Defined in src/otp/otp.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    OTP\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    phnum\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        twilioClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Twilio\n\n                    \n                \n                    \n                        \n                                Defined in src/otp/otp.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Twilio } from 'twilio';\n\n@Injectable()\nexport class OtpService {\n  private twilioClient: Twilio;\n\n  constructor(private readonly configService: ConfigService) {\n    const accountSid = configService.get('TWILIO_ACCOUNT_SID');\n    const authToken = configService.get('TWILIO_AUTH_TOKEN');\n    this.twilioClient = new Twilio(accountSid, authToken);\n  }\n  async sendotp(OTP: number, phnum: string): Promise {\n    const smsSent = await this.twilioClient.messages.create({\n      to: phnum,\n      body: `Heyy here is your crimeapp otp ${OTP}`,\n      from: this.configService.get('TWILIO_PHONE_NUM'),\n    });\n    return !!smsSent.sid;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Phnum.html":{"url":"classes/Phnum.html","title":"class - Phnum","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Phnum\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Typings/auth.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                phnum\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        phnum\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsPhoneNumber('IN')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Typings/auth.ts:41\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsPhoneNumber,\n  IsString,\n} from 'class-validator';\n\nexport class AuthLogin {\n  @IsNotEmpty()\n  @IsPhoneNumber('IN')\n  phnum: string;\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n}\nexport class AuthSignup extends AuthLogin {\n  constructor() {\n    super();\n  }\n  @IsString()\n  @IsNotEmpty()\n  username: string;\n}\n\nexport class EditUser {\n  @IsOptional()\n  @IsPhoneNumber('IN')\n  phnum: string;\n  @IsString()\n  @IsOptional()\n  password: string;\n  @IsString()\n  @IsOptional()\n  username: string;\n}\n\nexport class Phnum {\n  @IsNotEmpty()\n  @IsPhoneNumber('IN')\n  phnum: string;\n}\n\nexport class UserDTO {\n  id: number;\n  CreatedAt: string;\n  UpdatedAt: string;\n  phonenum: string;\n  username: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/prisma/prisma.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Module for initiating Prisma-Postgres Connection\nand exporting Prisma Service globally for it to get injected in all modules\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\n\n/**\n * Module for initiating Prisma-Postgres Connection\n * and exporting Prisma Service globally for it to get injected in all modules\n */\n@Global()\n@Module({\n  providers: [PrismaService],\n  exports: [PrismaService],\n})\nexport class PrismaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma/prisma.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Implementing PrismaClient\nconfigure prisma client and coonect  it on module init\n\n            \n\n            \n                Extends\n            \n            \n                    PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/prisma/prisma.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/prisma/prisma.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PrismaClient } from '@prisma/client';\n\n/**\n * Implementing PrismaClient\n * configure prisma client and coonect  it on module init\n */\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n  constructor(config: ConfigService) {\n    super({\n      datasources: {\n        db: {\n          url: config.get('DATABASE_URL'),\n        },\n      },\n    });\n  }\n  async onModuleInit() {\n    await this.$connect();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                EditMyData\n                            \n                            \n                                MyData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        EditMyData\n                        \n                    \n                \n            \n            \n                \nEditMyData(User: EditUser, req: AuthRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('edit')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:37\n                \n            \n\n\n            \n                \n                    pass update user object and feilds are optional there can be pw or not but need to pass valid JWT in header\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    User\n                                    \n                                                EditUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                                AuthRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MyData\n                        \n                    \n                \n            \n            \n                \nMyData(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('me')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        user payload\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post, Req, UseGuards } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { UserService } from './user.service';\nimport { Request } from 'express';\nimport { AuthSignup, EditUser, UserDTO } from 'src/Typings';\n\n/**\n * Controller for User routs\n * - get UserInfo and Saved Posts\n * - Change Password or body\n */\ninterface AuthRequest extends Request {\n  user: UserDTO; // Replace `any` with the actual type of the `user` property\n}\n\n@UseGuards(AuthGuard('jwt'))\n@Controller('user')\nexport class UserController {\n  constructor(private userService: UserService) {}\n  /**\n   *\n   * @param req @type {UserDTO} Incoming req GET route\n   * @returns {object} user payload\n   */\n  @Get('me')\n  MyData(@Req() req: Request) {\n    return req.user;\n  }\n\n  /**\n   * pass update user object and feilds are optional there can be pw or not but need to pass valid JWT in header\n   * @param User @type {EditUser} edit user payload\n   * @param req @type {EditUser} Incoming req with JWT in header\n   * @returns\n   */\n  @Post('edit')\n  EditMyData(@Body() User: EditUser, @Req() req: AuthRequest) {\n    return this.userService.editUser(User, req.user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserDTO.html":{"url":"classes/UserDTO.html","title":"class - UserDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Typings/auth.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                CreatedAt\n                            \n                            \n                                id\n                            \n                            \n                                phonenum\n                            \n                            \n                                UpdatedAt\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        CreatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/Typings/auth.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/Typings/auth.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phonenum\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/Typings/auth.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        UpdatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/Typings/auth.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/Typings/auth.ts:49\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsPhoneNumber,\n  IsString,\n} from 'class-validator';\n\nexport class AuthLogin {\n  @IsNotEmpty()\n  @IsPhoneNumber('IN')\n  phnum: string;\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n}\nexport class AuthSignup extends AuthLogin {\n  constructor() {\n    super();\n  }\n  @IsString()\n  @IsNotEmpty()\n  username: string;\n}\n\nexport class EditUser {\n  @IsOptional()\n  @IsPhoneNumber('IN')\n  phnum: string;\n  @IsString()\n  @IsOptional()\n  password: string;\n  @IsString()\n  @IsOptional()\n  username: string;\n}\n\nexport class Phnum {\n  @IsNotEmpty()\n  @IsPhoneNumber('IN')\n  phnum: string;\n}\n\nexport class UserDTO {\n  id: number;\n  CreatedAt: string;\n  UpdatedAt: string;\n  phonenum: string;\n  username: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService\n\nUserService\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Module to Setup User Logic to get their userData or change Password\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { UserController } from './user.controller';\n\n/**\n * Module to Setup User Logic to get their userData or change Password\n */\n@Module({\n  providers: [UserService],\n  controllers: [UserController],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Userservice service to handle user related CRUD\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                editUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postgre: PrismaService, config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postgre\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        editUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    editUser(User: EditUser, dbuser: UserDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    User\n                                    \n                                                EditUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dbuser\n                                    \n                                                UserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { EditUser, UserDTO } from 'src/Typings';\nimport * as argon from 'argon2';\n\n/**\n * Userservice service to handle user related CRUD\n */\n@Injectable()\nexport class UserService {\n  constructor(private postgre: PrismaService, private config: ConfigService) {}\n\n  /**\n   *\n   * @param User @type  {EditUser}\n   * @param dbuser @type {UserDTO}\n   * @returns\n   */\n  async editUser(User: EditUser, dbuser: UserDTO) {\n    /**\n     * hash password from request payload if pas exisit\n     * update using postgres prisma ORM\n     */\n    if (User.password) {\n      const hash = await argon.hash(User.password);\n      delete User.password;\n      const user = await this.postgre.user.update({\n        where: {\n          id: dbuser.id,\n        },\n        data: {\n          ...User,\n          password: hash,\n        },\n      });\n      delete user.password;\n      return user;\n    } else {\n      const user = await this.postgre.user.update({\n        where: {\n          id: dbuser.id,\n        },\n        data: {\n          ...User,\n        },\n      });\n      delete user.password;\n      return user;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/Typings/auth.ts\n            \n            class\n            AuthLogin\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/Typings/auth.ts\n            \n            class\n            AuthSignup\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/Typings/auth.ts\n            \n            class\n            EditUser\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/Typings/auth.ts\n            \n            class\n            Phnum\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/Typings/auth.ts\n            \n            class\n            UserDTO\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/JwtStrategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                33 %\n                (2/6)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/middleware/requestLog.ts\n            \n            injectable\n            LogRequest\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/otp/otp.service.ts\n            \n            injectable\n            OtpService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            interface\n            AuthRequest\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                33 %\n                (1/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs-modules/mailer : ^1.8.1\n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/serve-static : ^3.0.1\n        \n            @prisma/client : ^4.3.1\n        \n            @types/cache-manager-redis-store : ^2.0.1\n        \n            @types/nodemailer : ^6.4.6\n        \n            @types/passport-jwt : ^3.0.6\n        \n            @types/passport-local : ^1.0.34\n        \n            argon2 : ^0.29.1\n        \n            cache-manager : ^4.1.0\n        \n            cache-manager-redis-store : ^2.0.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            handlebars : ^4.7.7\n        \n            nodemailer : ^6.7.8\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            prisma : ^4.3.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            twilio : ^4.8.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nApp where I developed Backend for Kawach Hackathon.\nStack used\n\nPrisma - for Postgres ORM\nreddis - Cache secondary storage\nDocker - to host and run postgres [locally only] railway for hosting cloud postgres\nNestJS(express-TS) - backend framework\npython - api testing\nTypescript\nPassportJs - Auth and jwt management\nTwillio - SMS messaging\n\nHow did it Go\n\nI used Compose Docs for generating the documentation and i am serving it over /docs route of server\nPrisma well i used to maintain all my db works and i guess i am in love with it 🥰 , Prisma ORM is flexible for me to setup relations easily and manage creating via npx prisma migrate dev and moniter my database from npx prisma studio\ni am maintaining several tables and several many to many relations from dbs. Got few tables with infor prefetched from national cyber forensics cordination centre and other tables which has demand data about our current users prisma ORM manages them for me\nPostgres was awesome to work with rn as i was currently using Prisma it doesnt make sense for me as it is Mysql or Postgres\nDocker i am using to run my postgres instance on port 5434 on locally and on railway for cloud\nRunning Redis instance on docker for OTP support\n\nPending tasks\n\nLay pipelines for 6 types of fraud detection\ntrigger ml models\nquery tables and calculate stats of an entity\n\n##Dependencies and Architecture\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OtpModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_OtpModule\n\n\n\ncluster_OtpModule_exports\n\n\n\ncluster_OtpModule_providers\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nOtpModule\n\nOtpModule\n\nAuthModule -->\n\nOtpModule->AuthModule\n\n\n\nAppModule -->\n\nOtpModule->AppModule\n\n\n\n\n\nOtpService \n\nOtpService \n\nOtpService  -->\n\nOtpModule->OtpService \n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nOtpService\n\nOtpService\n\nOtpModule -->\n\nOtpService->OtpModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    7 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
